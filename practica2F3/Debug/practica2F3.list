
practica2F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cb0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e80  08004e80  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e80  08004e80  00005e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e88  08004e88  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e88  08004e88  00005e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e8c  08004e8c  00005e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004e90  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  2000000c  08004e9c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08004e9c  00006780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001756e  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6a  00000000  00000000  0001d5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00020518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e9  00000000  00000000  00021ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002751e  00000000  00000000  00022bc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019db6  00000000  00000000  0004a0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efd31  00000000  00000000  00063e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00153bce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d34  00000000  00000000  00153c14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00159948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e20 	.word	0x08004e20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004e20 	.word	0x08004e20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
    // Pulse clock
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c6:	f001 fd61 	bl	8001f8c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80004ca:	2001      	movs	r0, #1
 80004cc:	f001 f972 	bl	80017b4 <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004da:	f001 fd57 	bl	8001f8c <HAL_GPIO_WritePin>
     //LL_mDelay(1);
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <lcd_reset>:

void lcd_reset(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2104      	movs	r1, #4
 80004ec:	481a      	ldr	r0, [pc, #104]	@ (8000558 <lcd_reset+0x74>)
 80004ee:	f001 fd4d 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT7,  LCD_7, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2110      	movs	r1, #16
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f001 fd47 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4,  LCD_4, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2108      	movs	r1, #8
 8000502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000506:	f001 fd41 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56,  LCD_5 | LCD_6, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2112      	movs	r1, #18
 800050e:	4812      	ldr	r0, [pc, #72]	@ (8000558 <lcd_reset+0x74>)
 8000510:	f001 fd3c 	bl	8001f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT,  LCD_CLOCK, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800051a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051e:	f001 fd35 	bl	8001f8c <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, GPIO_PIN_SET );
 8000522:	2201      	movs	r2, #1
 8000524:	2108      	movs	r1, #8
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f001 fd2f 	bl	8001f8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_PORT56, LCD_5, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2110      	movs	r1, #16
 8000532:	4809      	ldr	r0, [pc, #36]	@ (8000558 <lcd_reset+0x74>)
 8000534:	f001 fd2a 	bl	8001f8c <HAL_GPIO_WritePin>
    lcd_clock();
 8000538:	f7ff ffbe 	bl	80004b8 <lcd_clock>
    lcd_clock();
 800053c:	f7ff ffbc 	bl	80004b8 <lcd_clock>
    lcd_clock();
 8000540:	f7ff ffba 	bl	80004b8 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2108      	movs	r1, #8
 8000548:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800054c:	f001 fd1e 	bl	8001f8c <HAL_GPIO_WritePin>
    lcd_clock();
 8000550:	f7ff ffb2 	bl	80004b8 <lcd_clock>
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	48000400 	.word	0x48000400

0800055c <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	091b      	lsrs	r3, r3, #4
 8000570:	b2db      	uxtb	r3, r3
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	2b00      	cmp	r3, #0
 8000578:	d006      	beq.n	8000588 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2108      	movs	r1, #8
 800057e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000582:	f001 fd03 	bl	8001f8c <HAL_GPIO_WritePin>
 8000586:	e005      	b.n	8000594 <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2108      	movs	r1, #8
 800058c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000590:	f001 fcfc 	bl	8001f8c <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	095b      	lsrs	r3, r3, #5
 8000598:	b2db      	uxtb	r3, r3
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d005      	beq.n	80005ae <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	4847      	ldr	r0, [pc, #284]	@ (80006c4 <lcd_write+0x168>)
 80005a8:	f001 fcf0 	bl	8001f8c <HAL_GPIO_WritePin>
 80005ac:	e004      	b.n	80005b8 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2110      	movs	r1, #16
 80005b2:	4844      	ldr	r0, [pc, #272]	@ (80006c4 <lcd_write+0x168>)
 80005b4:	f001 fcea 	bl	8001f8c <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	099b      	lsrs	r3, r3, #6
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d005      	beq.n	80005d2 <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2102      	movs	r1, #2
 80005ca:	483e      	ldr	r0, [pc, #248]	@ (80006c4 <lcd_write+0x168>)
 80005cc:	f001 fcde 	bl	8001f8c <HAL_GPIO_WritePin>
 80005d0:	e004      	b.n	80005dc <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2102      	movs	r1, #2
 80005d6:	483b      	ldr	r0, [pc, #236]	@ (80006c4 <lcd_write+0x168>)
 80005d8:	f001 fcd8 	bl	8001f8c <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	09db      	lsrs	r3, r3, #7
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d006      	beq.n	80005f8 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2110      	movs	r1, #16
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f2:	f001 fccb 	bl	8001f8c <HAL_GPIO_WritePin>
 80005f6:	e005      	b.n	8000604 <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2110      	movs	r1, #16
 80005fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000600:	f001 fcc4 	bl	8001f8c <HAL_GPIO_WritePin>

    if(rs)
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d005      	beq.n	8000616 <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2104      	movs	r1, #4
 800060e:	482d      	ldr	r0, [pc, #180]	@ (80006c4 <lcd_write+0x168>)
 8000610:	f001 fcbc 	bl	8001f8c <HAL_GPIO_WritePin>
 8000614:	e004      	b.n	8000620 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2104      	movs	r1, #4
 800061a:	482a      	ldr	r0, [pc, #168]	@ (80006c4 <lcd_write+0x168>)
 800061c:	f001 fcb6 	bl	8001f8c <HAL_GPIO_WritePin>

    lcd_clock();
 8000620:	f7ff ff4a 	bl	80004b8 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d006      	beq.n	800063c <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, GPIO_PIN_SET);
 800062e:	2201      	movs	r2, #1
 8000630:	2108      	movs	r1, #8
 8000632:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000636:	f001 fca9 	bl	8001f8c <HAL_GPIO_WritePin>
 800063a:	e005      	b.n	8000648 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, GPIO_PIN_RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2108      	movs	r1, #8
 8000640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000644:	f001 fca2 	bl	8001f8c <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	085b      	lsrs	r3, r3, #1
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	2b00      	cmp	r3, #0
 8000654:	d005      	beq.n	8000662 <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2110      	movs	r1, #16
 800065a:	481a      	ldr	r0, [pc, #104]	@ (80006c4 <lcd_write+0x168>)
 800065c:	f001 fc96 	bl	8001f8c <HAL_GPIO_WritePin>
 8000660:	e004      	b.n	800066c <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2110      	movs	r1, #16
 8000666:	4817      	ldr	r0, [pc, #92]	@ (80006c4 <lcd_write+0x168>)
 8000668:	f001 fc90 	bl	8001f8c <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	2b00      	cmp	r3, #0
 8000678:	d005      	beq.n	8000686 <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, GPIO_PIN_SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2102      	movs	r1, #2
 800067e:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <lcd_write+0x168>)
 8000680:	f001 fc84 	bl	8001f8c <HAL_GPIO_WritePin>
 8000684:	e004      	b.n	8000690 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2102      	movs	r1, #2
 800068a:	480e      	ldr	r0, [pc, #56]	@ (80006c4 <lcd_write+0x168>)
 800068c:	f001 fc7e 	bl	8001f8c <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	08db      	lsrs	r3, r3, #3
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d006      	beq.n	80006ac <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a6:	f001 fc71 	bl	8001f8c <HAL_GPIO_WritePin>
 80006aa:	e005      	b.n	80006b8 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2110      	movs	r1, #16
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f001 fc6a 	bl	8001f8c <HAL_GPIO_WritePin>

    lcd_clock();
 80006b8:	f7ff fefe 	bl	80004b8 <lcd_clock>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	48000400 	.word	0x48000400

080006c8 <lcd_clear>:

void lcd_clear(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff ff44 	bl	800055c <lcd_write>
    _lcd_char = 0;
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <lcd_clear+0x1c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80006da:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <lcd_clear+0x20>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000028 	.word	0x20000028
 80006e8:	20000029 	.word	0x20000029

080006ec <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	460b      	mov	r3, r1
 80006f8:	71bb      	strb	r3, [r7, #6]
 80006fa:	4613      	mov	r3, r2
 80006fc:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	b25b      	sxtb	r3, r3
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	b25a      	sxtb	r2, r3
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	b25b      	sxtb	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b25a      	sxtb	r2, r3
 8000714:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000718:	4313      	orrs	r3, r2
 800071a:	b25b      	sxtb	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff1b 	bl	800055c <lcd_write>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff0a 	bl	800055c <lcd_write>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <lcd_cgram_address>:

void lcd_cgram_address(uint8_t address)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	lcd_write(0b01000000 | address, 0);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fef9 	bl	800055c <lcd_write>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <moveToXY>:
	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
	lcd_write( ones + 0x30,1);
}

void moveToXY(unsigned char row, unsigned char column)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	011a      	lsls	r2, r3, #4
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	dc0a      	bgt.n	80007aa <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	b25b      	sxtb	r3, r3
 8000798:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800079c:	b25b      	sxtb	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff feda 	bl	800055c <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 80007a8:	e059      	b.n	800085e <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	dd17      	ble.n	80007e0 <moveToXY+0x6c>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b1f      	cmp	r3, #31
 80007b4:	dc14      	bgt.n	80007e0 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	425a      	negs	r2, r3
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	f002 020f 	and.w	r2, r2, #15
 80007c2:	bf58      	it	pl
 80007c4:	4253      	negpl	r3, r2
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3340      	adds	r3, #64	@ 0x40
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff febf 	bl	800055c <lcd_write>
 80007de:	e03e      	b.n	800085e <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b28      	cmp	r3, #40	@ 0x28
 80007e4:	dd1b      	ble.n	800081e <moveToXY+0xaa>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80007ea:	dc18      	bgt.n	800081e <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <moveToXY+0xf4>)
 80007f0:	fb83 1302 	smull	r1, r3, r3, r2
 80007f4:	1119      	asrs	r1, r3, #4
 80007f6:	17d3      	asrs	r3, r2, #31
 80007f8:	1ac9      	subs	r1, r1, r3
 80007fa:	460b      	mov	r3, r1
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	440b      	add	r3, r1
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	1ad1      	subs	r1, r2, r3
 8000804:	b2cb      	uxtb	r3, r1
 8000806:	3314      	adds	r3, #20
 8000808:	b2db      	uxtb	r3, r3
 800080a:	b25b      	sxtb	r3, r3
 800080c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000810:	b25b      	sxtb	r3, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fea0 	bl	800055c <lcd_write>
 800081c:	e01f      	b.n	800085e <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b13      	cmp	r3, #19
 8000822:	dd1c      	ble.n	800085e <moveToXY+0xea>
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b27      	cmp	r3, #39	@ 0x27
 8000828:	dc19      	bgt.n	800085e <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <moveToXY+0xf8>)
 800082e:	fb83 1302 	smull	r1, r3, r3, r2
 8000832:	4413      	add	r3, r2
 8000834:	1159      	asrs	r1, r3, #5
 8000836:	17d3      	asrs	r3, r2, #31
 8000838:	1ac9      	subs	r1, r1, r3
 800083a:	460b      	mov	r3, r1
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	1ad1      	subs	r1, r2, r3
 8000844:	b2cb      	uxtb	r3, r1
 8000846:	3354      	adds	r3, #84	@ 0x54
 8000848:	b2db      	uxtb	r3, r3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe80 	bl	800055c <lcd_write>
}
 800085c:	e7ff      	b.n	800085e <moveToXY+0xea>
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	66666667 	.word	0x66666667
 800086c:	88888889 	.word	0x88888889

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000874:	f000 ff29 	bl	80016ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000878:	f000 f892 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087c:	f000 fa5a 	bl	8000d34 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000880:	f000 f8f0 	bl	8000a64 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000884:	f000 f926 	bl	8000ad4 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000888:	f000 f962 	bl	8000b50 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800088c:	f000 f986 	bl	8000b9c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000890:	f000 f9c2 	bl	8000c18 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000894:	f000 f9f0 	bl	8000c78 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000898:	f000 fa1e 	bl	8000cd8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin, GPIO_PIN_SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2104      	movs	r1, #4
 80008a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a4:	f001 fb72 	bl	8001f8c <HAL_GPIO_WritePin>
  lcd_reset();
 80008a8:	f7ff fe1c 	bl	80004e4 <lcd_reset>
  lcd_display_settings(1,0,0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2100      	movs	r1, #0
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff ff1b 	bl	80006ec <lcd_display_settings>
  lcd_clear();
 80008b6:	f7ff ff07 	bl	80006c8 <lcd_clear>

  	lcd_cgram_address(0); // se selecciona la dirección 0 de la CGRAM, patrón con código 0
 80008ba:	2000      	movs	r0, #0
 80008bc:	f7ff ff48 	bl	8000750 <lcd_cgram_address>
  	lcd_write(0x15, 1); //se va cargando con los bytes del patrón de cada fila de la CGRAM
 80008c0:	2101      	movs	r1, #1
 80008c2:	2015      	movs	r0, #21
 80008c4:	f7ff fe4a 	bl	800055c <lcd_write>
  	lcd_write(0x15, 1);
 80008c8:	2101      	movs	r1, #1
 80008ca:	2015      	movs	r0, #21
 80008cc:	f7ff fe46 	bl	800055c <lcd_write>
  	lcd_write(0xe, 1);
 80008d0:	2101      	movs	r1, #1
 80008d2:	200e      	movs	r0, #14
 80008d4:	f7ff fe42 	bl	800055c <lcd_write>
  	lcd_write(0x4, 1);
 80008d8:	2101      	movs	r1, #1
 80008da:	2004      	movs	r0, #4
 80008dc:	f7ff fe3e 	bl	800055c <lcd_write>
  	lcd_write(0x4, 1);
 80008e0:	2101      	movs	r1, #1
 80008e2:	2004      	movs	r0, #4
 80008e4:	f7ff fe3a 	bl	800055c <lcd_write>
  	lcd_write(0xa, 1);
 80008e8:	2101      	movs	r1, #1
 80008ea:	200a      	movs	r0, #10
 80008ec:	f7ff fe36 	bl	800055c <lcd_write>
  	lcd_write(0x11, 1);
 80008f0:	2101      	movs	r1, #1
 80008f2:	2011      	movs	r0, #17
 80008f4:	f7ff fe32 	bl	800055c <lcd_write>
  	lcd_write(0x00, 1);
 80008f8:	2101      	movs	r1, #1
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff fe2e 	bl	800055c <lcd_write>

  	lcd_cgram_address(8); //se selecciona la dirección 8 de la CGRAM, patrón con código 1
 8000900:	2008      	movs	r0, #8
 8000902:	f7ff ff25 	bl	8000750 <lcd_cgram_address>
  	lcd_write(0x4, 1); // se va cargando con los bytes del patrón de cada fila de la CGRAM
 8000906:	2101      	movs	r1, #1
 8000908:	2004      	movs	r0, #4
 800090a:	f7ff fe27 	bl	800055c <lcd_write>
  	lcd_write(0x4, 1);
 800090e:	2101      	movs	r1, #1
 8000910:	2004      	movs	r0, #4
 8000912:	f7ff fe23 	bl	800055c <lcd_write>
  	lcd_write(0xe, 1);
 8000916:	2101      	movs	r1, #1
 8000918:	200e      	movs	r0, #14
 800091a:	f7ff fe1f 	bl	800055c <lcd_write>
  	lcd_write(0x15, 1);
 800091e:	2101      	movs	r1, #1
 8000920:	2015      	movs	r0, #21
 8000922:	f7ff fe1b 	bl	800055c <lcd_write>
  	lcd_write(0x15, 1);
 8000926:	2101      	movs	r1, #1
 8000928:	2015      	movs	r0, #21
 800092a:	f7ff fe17 	bl	800055c <lcd_write>
  	lcd_write(0xa, 1);
 800092e:	2101      	movs	r1, #1
 8000930:	200a      	movs	r0, #10
 8000932:	f7ff fe13 	bl	800055c <lcd_write>
  	lcd_write(0xa, 1);
 8000936:	2101      	movs	r1, #1
 8000938:	200a      	movs	r0, #10
 800093a:	f7ff fe0f 	bl	800055c <lcd_write>
  	lcd_write(0x00, 1);
 800093e:	2101      	movs	r1, #1
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fe0b 	bl	800055c <lcd_write>

    lcd_display_address(0);
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fef1 	bl	800072e <lcd_display_address>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  moveToXY(1, 7);
 800094c:	2107      	movs	r1, #7
 800094e:	2001      	movs	r0, #1
 8000950:	f7ff ff10 	bl	8000774 <moveToXY>
	  lcd_write(0, 1);
 8000954:	2101      	movs	r1, #1
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fe00 	bl	800055c <lcd_write>
	  moveToXY(1, 8);
 800095c:	2108      	movs	r1, #8
 800095e:	2001      	movs	r0, #1
 8000960:	f7ff ff08 	bl	8000774 <moveToXY>
	  lcd_write(0, 1);
 8000964:	2101      	movs	r1, #1
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fdf8 	bl	800055c <lcd_write>
	  HAL_Delay(300);
 800096c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000970:	f000 ff20 	bl	80017b4 <HAL_Delay>
	  moveToXY(1, 7);
 8000974:	2107      	movs	r1, #7
 8000976:	2001      	movs	r0, #1
 8000978:	f7ff fefc 	bl	8000774 <moveToXY>
	  lcd_write(1, 1);
 800097c:	2101      	movs	r1, #1
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff fdec 	bl	800055c <lcd_write>
	  moveToXY(1, 8);
 8000984:	2108      	movs	r1, #8
 8000986:	2001      	movs	r0, #1
 8000988:	f7ff fef4 	bl	8000774 <moveToXY>
	  lcd_write(1, 1);
 800098c:	2101      	movs	r1, #1
 800098e:	2001      	movs	r0, #1
 8000990:	f7ff fde4 	bl	800055c <lcd_write>
	  HAL_Delay(300);
 8000994:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000998:	f000 ff0c 	bl	80017b4 <HAL_Delay>
	  moveToXY(1, 7);
 800099c:	bf00      	nop
 800099e:	e7d5      	b.n	800094c <main+0xdc>

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b096      	sub	sp, #88	@ 0x58
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2244      	movs	r2, #68	@ 0x44
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f004 fa09 	bl	8004dc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009c6:	f001 fd9f 	bl	8002508 <HAL_PWREx_ControlVoltageScaling>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009d0:	f000 fb34 	bl	800103c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009d4:	f001 fd7a 	bl	80024cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009d8:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <SystemClock_Config+0xc0>)
 80009da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009de:	4a20      	ldr	r2, [pc, #128]	@ (8000a60 <SystemClock_Config+0xc0>)
 80009e0:	f023 0318 	bic.w	r3, r3, #24
 80009e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009e8:	2314      	movs	r3, #20
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009f0:	2301      	movs	r3, #1
 80009f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009f4:	2300      	movs	r3, #0
 80009f6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009f8:	2360      	movs	r3, #96	@ 0x60
 80009fa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fc:	2302      	movs	r3, #2
 80009fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a00:	2301      	movs	r3, #1
 8000a02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a08:	2328      	movs	r3, #40	@ 0x28
 8000a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a0c:	2307      	movs	r3, #7
 8000a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fe95 	bl	800274c <HAL_RCC_OscConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a28:	f000 fb08 	bl	800103c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2c:	230f      	movs	r3, #15
 8000a2e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a30:	2303      	movs	r3, #3
 8000a32:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	2104      	movs	r1, #4
 8000a44:	4618      	mov	r0, r3
 8000a46:	f002 fa5d 	bl	8002f04 <HAL_RCC_ClockConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a50:	f000 faf4 	bl	800103c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a54:	f002 ff64 	bl	8003920 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a58:	bf00      	nop
 8000a5a:	3758      	adds	r7, #88	@ 0x58
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021000 	.word	0x40021000

08000a64 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000a6a:	4a19      	ldr	r2, [pc, #100]	@ (8000ad0 <MX_DFSDM1_Init+0x6c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a86:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000a8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a92:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a94:	4b0d      	ldr	r3, [pc, #52]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <MX_DFSDM1_Init+0x68>)
 8000aba:	f000 ffb1 	bl	8001a20 <HAL_DFSDM_ChannelInit>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000ac4:	f000 faba 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000002c 	.word	0x2000002c
 8000ad0:	40016020 	.word	0x40016020

08000ad4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	@ (8000b4c <MX_I2C2_Init+0x78>)
 8000adc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000ade:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ae0:	f640 6214 	movw	r2, #3604	@ 0xe14
 8000ae4:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aec:	4b16      	ldr	r3, [pc, #88]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b04:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b10:	480d      	ldr	r0, [pc, #52]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b12:	f001 fa76 	bl	8002002 <HAL_I2C_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b1c:	f000 fa8e 	bl	800103c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	4809      	ldr	r0, [pc, #36]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b24:	f001 fb08 	bl	8002138 <HAL_I2CEx_ConfigAnalogFilter>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b2e:	f000 fa85 	bl	800103c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_I2C2_Init+0x74>)
 8000b36:	f001 fb4a 	bl	80021ce <HAL_I2CEx_ConfigDigitalFilter>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b40:	f000 fa7c 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000064 	.word	0x20000064
 8000b4c:	40005800 	.word	0x40005800

08000b50 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <MX_QUADSPI_Init+0x44>)
 8000b56:	4a10      	ldr	r2, [pc, #64]	@ (8000b98 <MX_QUADSPI_Init+0x48>)
 8000b58:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_QUADSPI_Init+0x44>)
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_QUADSPI_Init+0x44>)
 8000b62:	2204      	movs	r2, #4
 8000b64:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <MX_QUADSPI_Init+0x44>)
 8000b68:	2210      	movs	r2, #16
 8000b6a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_QUADSPI_Init+0x44>)
 8000b6e:	2217      	movs	r2, #23
 8000b70:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <MX_QUADSPI_Init+0x44>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b78:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_QUADSPI_Init+0x44>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	@ (8000b94 <MX_QUADSPI_Init+0x44>)
 8000b80:	f001 fd28 	bl	80025d4 <HAL_QSPI_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000b8a:	f000 fa57 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000b8 	.word	0x200000b8
 8000b98:	a0001000 	.word	0xa0001000

08000b9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8000c14 <MX_SPI3_Init+0x78>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000ba8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bb6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bbc:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bea:	2207      	movs	r2, #7
 8000bec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bf6:	2208      	movs	r2, #8
 8000bf8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_SPI3_Init+0x74>)
 8000bfc:	f003 f872 	bl	8003ce4 <HAL_SPI_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c06:	f000 fa19 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000fc 	.word	0x200000fc
 8000c14:	40003c00 	.word	0x40003c00

08000c18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c1e:	4a15      	ldr	r2, [pc, #84]	@ (8000c74 <MX_USART1_UART_Init+0x5c>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c22:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c3e:	220c      	movs	r2, #12
 8000c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_USART1_UART_Init+0x58>)
 8000c5c:	f003 f8e5 	bl	8003e2a <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c66:	f000 f9e9 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000160 	.word	0x20000160
 8000c74:	40013800 	.word	0x40013800

08000c78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c7e:	4a15      	ldr	r2, [pc, #84]	@ (8000cd4 <MX_USART3_UART_Init+0x5c>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	@ (8000cd0 <MX_USART3_UART_Init+0x58>)
 8000cbc:	f003 f8b5 	bl	8003e2a <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cc6:	f000 f9b9 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200001e8 	.word	0x200001e8
 8000cd4:	40004800 	.word	0x40004800

08000cd8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cde:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ce2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce6:	2206      	movs	r2, #6
 8000ce8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cec:	2202      	movs	r2, #2
 8000cee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d1c:	f001 faa3 	bl	8002266 <HAL_PCD_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d26:	f000 f989 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000270 	.word	0x20000270

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4a:	4bb7      	ldr	r3, [pc, #732]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	4ab6      	ldr	r2, [pc, #728]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d50:	f043 0310 	orr.w	r3, r3, #16
 8000d54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d56:	4bb4      	ldr	r3, [pc, #720]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5a:	f003 0310 	and.w	r3, r3, #16
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d62:	4bb1      	ldr	r3, [pc, #708]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d66:	4ab0      	ldr	r2, [pc, #704]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d68:	f043 0304 	orr.w	r3, r3, #4
 8000d6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d6e:	4bae      	ldr	r3, [pc, #696]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4bab      	ldr	r3, [pc, #684]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7e:	4aaa      	ldr	r2, [pc, #680]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d86:	4ba8      	ldr	r3, [pc, #672]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4ba5      	ldr	r3, [pc, #660]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d96:	4aa4      	ldr	r2, [pc, #656]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9e:	4ba2      	ldr	r3, [pc, #648]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000daa:	4b9f      	ldr	r3, [pc, #636]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	4a9e      	ldr	r2, [pc, #632]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000db6:	4b9c      	ldr	r3, [pc, #624]	@ (8001028 <MX_GPIO_Init+0x2f4>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8000dc8:	4898      	ldr	r0, [pc, #608]	@ (800102c <MX_GPIO_Init+0x2f8>)
 8000dca:	f001 f8df 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f248 111c 	movw	r1, #33052	@ 0x811c
 8000dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dd8:	f001 f8d8 	bl	8001f8c <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f24f 0116 	movw	r1, #61462	@ 0xf016
 8000de2:	4893      	ldr	r0, [pc, #588]	@ (8001030 <MX_GPIO_Init+0x2fc>)
 8000de4:	f001 f8d2 	bl	8001f8c <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	f241 0181 	movw	r1, #4225	@ 0x1081
 8000dee:	4891      	ldr	r0, [pc, #580]	@ (8001034 <MX_GPIO_Init+0x300>)
 8000df0:	f001 f8cc 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dfa:	488e      	ldr	r0, [pc, #568]	@ (8001034 <MX_GPIO_Init+0x300>)
 8000dfc:	f001 f8c6 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8000e06:	488c      	ldr	r0, [pc, #560]	@ (8001038 <MX_GPIO_Init+0x304>)
 8000e08:	f001 f8c0 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	2120      	movs	r1, #32
 8000e10:	4887      	ldr	r0, [pc, #540]	@ (8001030 <MX_GPIO_Init+0x2fc>)
 8000e12:	f001 f8bb 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4884      	ldr	r0, [pc, #528]	@ (800102c <MX_GPIO_Init+0x2f8>)
 8000e1c:	f001 f8b6 	bl	8001f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000e20:	f240 1315 	movw	r3, #277	@ 0x115
 8000e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	487c      	ldr	r0, [pc, #496]	@ (800102c <MX_GPIO_Init+0x2f8>)
 8000e3a:	f000 fefd 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000e3e:	236a      	movs	r3, #106	@ 0x6a
 8000e40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4876      	ldr	r0, [pc, #472]	@ (800102c <MX_GPIO_Init+0x2f8>)
 8000e54:	f000 fef0 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000e58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4872      	ldr	r0, [pc, #456]	@ (8001038 <MX_GPIO_Init+0x304>)
 8000e70:	f000 fee2 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000e74:	233f      	movs	r3, #63	@ 0x3f
 8000e76:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e78:	230b      	movs	r3, #11
 8000e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	486c      	ldr	r0, [pc, #432]	@ (8001038 <MX_GPIO_Init+0x304>)
 8000e88:	f000 fed6 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000e9c:	2308      	movs	r3, #8
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eaa:	f000 fec5 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8000eae:	f248 131c 	movw	r3, #33052	@ 0x811c
 8000eb2:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eca:	f000 feb5 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ece:	23e0      	movs	r3, #224	@ 0xe0
 8000ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	2303      	movs	r3, #3
 8000edc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eec:	f000 fea4 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000ef8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	484a      	ldr	r0, [pc, #296]	@ (8001030 <MX_GPIO_Init+0x2fc>)
 8000f06:	f000 fe97 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8000f0a:	f24f 0336 	movw	r3, #61494	@ 0xf036
 8000f0e:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f10:	2301      	movs	r3, #1
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4843      	ldr	r0, [pc, #268]	@ (8001030 <MX_GPIO_Init+0x2fc>)
 8000f24:	f000 fe88 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000f28:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8000f2c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	483d      	ldr	r0, [pc, #244]	@ (8001034 <MX_GPIO_Init+0x300>)
 8000f40:	f000 fe7a 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000f44:	f243 0381 	movw	r3, #12417	@ 0x3081
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4835      	ldr	r0, [pc, #212]	@ (8001034 <MX_GPIO_Init+0x300>)
 8000f5e:	f000 fe6b 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000f62:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	482f      	ldr	r0, [pc, #188]	@ (8001038 <MX_GPIO_Init+0x304>)
 8000f7c:	f000 fe5c 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000f80:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f86:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	f107 0314 	add.w	r3, r7, #20
 8000f94:	4619      	mov	r1, r3
 8000f96:	4828      	ldr	r0, [pc, #160]	@ (8001038 <MX_GPIO_Init+0x304>)
 8000f98:	f000 fe4e 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fac:	2305      	movs	r3, #5
 8000fae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481f      	ldr	r0, [pc, #124]	@ (8001034 <MX_GPIO_Init+0x300>)
 8000fb8:	f000 fe3e 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000fbc:	2378      	movs	r3, #120	@ 0x78
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4817      	ldr	r0, [pc, #92]	@ (8001034 <MX_GPIO_Init+0x300>)
 8000fd8:	f000 fe2e 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000fdc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe2:	2312      	movs	r3, #18
 8000fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480d      	ldr	r0, [pc, #52]	@ (8001030 <MX_GPIO_Init+0x2fc>)
 8000ffa:	f000 fe1d 	bl	8001c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2017      	movs	r0, #23
 8001004:	f000 fcd5 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001008:	2017      	movs	r0, #23
 800100a:	f000 fcee 	bl	80019ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	2028      	movs	r0, #40	@ 0x28
 8001014:	f000 fccd 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001018:	2028      	movs	r0, #40	@ 0x28
 800101a:	f000 fce6 	bl	80019ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	@ 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40021000 	.word	0x40021000
 800102c:	48001000 	.word	0x48001000
 8001030:	48000400 	.word	0x48000400
 8001034:	48000c00 	.word	0x48000c00
 8001038:	48000800 	.word	0x48000800

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <Error_Handler+0x8>

08001048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <HAL_MspInit+0x44>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001052:	4a0e      	ldr	r2, [pc, #56]	@ (800108c <HAL_MspInit+0x44>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6613      	str	r3, [r2, #96]	@ 0x60
 800105a:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <HAL_MspInit+0x44>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001066:	4b09      	ldr	r3, [pc, #36]	@ (800108c <HAL_MspInit+0x44>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106a:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_MspInit+0x44>)
 800106c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001070:	6593      	str	r3, [r2, #88]	@ 0x58
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_MspInit+0x44>)
 8001074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000

08001090 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b0ac      	sub	sp, #176	@ 0xb0
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2288      	movs	r2, #136	@ 0x88
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fe88 	bl	8004dc6 <memset>
  if(DFSDM1_Init == 0)
 80010b6:	4b25      	ldr	r3, [pc, #148]	@ (800114c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d142      	bne.n	8001144 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80010be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 f93c 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80010da:	f7ff ffaf 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80010de:	4b1c      	ldr	r3, [pc, #112]	@ (8001150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010f6:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fa:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80010fc:	f043 0310 	orr.w	r3, r3, #16
 8001100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001102:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800110e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001112:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001128:	2306      	movs	r3, #6
 800112a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800112e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001132:	4619      	mov	r1, r3
 8001134:	4807      	ldr	r0, [pc, #28]	@ (8001154 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001136:	f000 fd7f 	bl	8001c38 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a02      	ldr	r2, [pc, #8]	@ (800114c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001142:	6013      	str	r3, [r2, #0]
  }

}
 8001144:	bf00      	nop
 8001146:	37b0      	adds	r7, #176	@ 0xb0
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000754 	.word	0x20000754
 8001150:	40021000 	.word	0x40021000
 8001154:	48001000 	.word	0x48001000

08001158 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0ac      	sub	sp, #176	@ 0xb0
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2288      	movs	r2, #136	@ 0x88
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f003 fe24 	bl	8004dc6 <memset>
  if(hi2c->Instance==I2C2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a21      	ldr	r2, [pc, #132]	@ (8001208 <HAL_I2C_MspInit+0xb0>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d13b      	bne.n	8001200 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001188:	2380      	movs	r3, #128	@ 0x80
 800118a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800118c:	2300      	movs	r3, #0
 800118e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4618      	mov	r0, r3
 8001196:	f002 f8d9 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011a0:	f7ff ff4c 	bl	800103c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b19      	ldr	r3, [pc, #100]	@ (800120c <HAL_I2C_MspInit+0xb4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a8:	4a18      	ldr	r2, [pc, #96]	@ (800120c <HAL_I2C_MspInit+0xb4>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <HAL_I2C_MspInit+0xb4>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	613b      	str	r3, [r7, #16]
 80011ba:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80011bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011d6:	2304      	movs	r3, #4
 80011d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011e0:	4619      	mov	r1, r3
 80011e2:	480b      	ldr	r0, [pc, #44]	@ (8001210 <HAL_I2C_MspInit+0xb8>)
 80011e4:	f000 fd28 	bl	8001c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <HAL_I2C_MspInit+0xb4>)
 80011ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ec:	4a07      	ldr	r2, [pc, #28]	@ (800120c <HAL_I2C_MspInit+0xb4>)
 80011ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80011f4:	4b05      	ldr	r3, [pc, #20]	@ (800120c <HAL_I2C_MspInit+0xb4>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001200:	bf00      	nop
 8001202:	37b0      	adds	r7, #176	@ 0xb0
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40005800 	.word	0x40005800
 800120c:	40021000 	.word	0x40021000
 8001210:	48000400 	.word	0x48000400

08001214 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a17      	ldr	r2, [pc, #92]	@ (8001290 <HAL_QSPI_MspInit+0x7c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d128      	bne.n	8001288 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001236:	4b17      	ldr	r3, [pc, #92]	@ (8001294 <HAL_QSPI_MspInit+0x80>)
 8001238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800123a:	4a16      	ldr	r2, [pc, #88]	@ (8001294 <HAL_QSPI_MspInit+0x80>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001240:	6513      	str	r3, [r2, #80]	@ 0x50
 8001242:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <HAL_QSPI_MspInit+0x80>)
 8001244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_QSPI_MspInit+0x80>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a10      	ldr	r2, [pc, #64]	@ (8001294 <HAL_QSPI_MspInit+0x80>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_QSPI_MspInit+0x80>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001266:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800126a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	2302      	movs	r3, #2
 800126e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001278:	230a      	movs	r3, #10
 800127a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <HAL_QSPI_MspInit+0x84>)
 8001284:	f000 fcd8 	bl	8001c38 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	a0001000 	.word	0xa0001000
 8001294:	40021000 	.word	0x40021000
 8001298:	48001000 	.word	0x48001000

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a17      	ldr	r2, [pc, #92]	@ (8001318 <HAL_SPI_MspInit+0x7c>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d128      	bne.n	8001310 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c2:	4a16      	ldr	r2, [pc, #88]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	4a10      	ldr	r2, [pc, #64]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_SPI_MspInit+0x80>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80012ee:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80012f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001300:	2306      	movs	r3, #6
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <HAL_SPI_MspInit+0x84>)
 800130c:	f000 fc94 	bl	8001c38 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40003c00 	.word	0x40003c00
 800131c:	40021000 	.word	0x40021000
 8001320:	48000800 	.word	0x48000800

08001324 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0ae      	sub	sp, #184	@ 0xb8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	2288      	movs	r2, #136	@ 0x88
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f003 fd3e 	bl	8004dc6 <memset>
  if(huart->Instance==USART1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a42      	ldr	r2, [pc, #264]	@ (8001458 <HAL_UART_MspInit+0x134>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d13b      	bne.n	80013cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001354:	2301      	movs	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001358:	2300      	movs	r3, #0
 800135a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fff3 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800136c:	f7ff fe66 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001370:	4b3a      	ldr	r3, [pc, #232]	@ (800145c <HAL_UART_MspInit+0x138>)
 8001372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001374:	4a39      	ldr	r2, [pc, #228]	@ (800145c <HAL_UART_MspInit+0x138>)
 8001376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137a:	6613      	str	r3, [r2, #96]	@ 0x60
 800137c:	4b37      	ldr	r3, [pc, #220]	@ (800145c <HAL_UART_MspInit+0x138>)
 800137e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	4b34      	ldr	r3, [pc, #208]	@ (800145c <HAL_UART_MspInit+0x138>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138c:	4a33      	ldr	r2, [pc, #204]	@ (800145c <HAL_UART_MspInit+0x138>)
 800138e:	f043 0302 	orr.w	r3, r3, #2
 8001392:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001394:	4b31      	ldr	r3, [pc, #196]	@ (800145c <HAL_UART_MspInit+0x138>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80013a0:	23c0      	movs	r3, #192	@ 0xc0
 80013a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013b8:	2307      	movs	r3, #7
 80013ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80013c2:	4619      	mov	r1, r3
 80013c4:	4826      	ldr	r0, [pc, #152]	@ (8001460 <HAL_UART_MspInit+0x13c>)
 80013c6:	f000 fc37 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ca:	e040      	b.n	800144e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a24      	ldr	r2, [pc, #144]	@ (8001464 <HAL_UART_MspInit+0x140>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d13b      	bne.n	800144e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013d6:	2304      	movs	r3, #4
 80013d8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013da:	2300      	movs	r3, #0
 80013dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 ffb2 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80013ee:	f7ff fe25 	bl	800103c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <HAL_UART_MspInit+0x138>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f6:	4a19      	ldr	r2, [pc, #100]	@ (800145c <HAL_UART_MspInit+0x138>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <HAL_UART_MspInit+0x138>)
 8001400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <HAL_UART_MspInit+0x138>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	4a13      	ldr	r2, [pc, #76]	@ (800145c <HAL_UART_MspInit+0x138>)
 8001410:	f043 0308 	orr.w	r3, r3, #8
 8001414:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_UART_MspInit+0x138>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001422:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001426:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800143c:	2307      	movs	r3, #7
 800143e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001442:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	@ (8001468 <HAL_UART_MspInit+0x144>)
 800144a:	f000 fbf5 	bl	8001c38 <HAL_GPIO_Init>
}
 800144e:	bf00      	nop
 8001450:	37b8      	adds	r7, #184	@ 0xb8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40013800 	.word	0x40013800
 800145c:	40021000 	.word	0x40021000
 8001460:	48000400 	.word	0x48000400
 8001464:	40004800 	.word	0x40004800
 8001468:	48000c00 	.word	0x48000c00

0800146c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b0ac      	sub	sp, #176	@ 0xb0
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	2288      	movs	r2, #136	@ 0x88
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f003 fc9a 	bl	8004dc6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800149a:	d17c      	bne.n	8001596 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800149c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80014a2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80014a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80014b2:	2318      	movs	r3, #24
 80014b4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014b6:	2307      	movs	r3, #7
 80014b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014be:	2302      	movs	r3, #2
 80014c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80014c2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80014c6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 ff3d 	bl	800334c <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80014d8:	f7ff fdb0 	bl	800103c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 80014de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e0:	4a2f      	ldr	r2, [pc, #188]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014e8:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 80014ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80014f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800150c:	4619      	mov	r1, r3
 800150e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001512:	f000 fb91 	bl	8001c38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001516:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800151a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001530:	230a      	movs	r3, #10
 8001532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001540:	f000 fb7a 	bl	8001c38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 8001546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001548:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 800154a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800154e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001554:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155c:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d114      	bne.n	8001592 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156c:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 800156e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001572:	6593      	str	r3, [r2, #88]	@ 0x58
 8001574:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001580:	f001 f818 	bl	80025b4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001588:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <HAL_PCD_MspInit+0x134>)
 800158a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800158e:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001590:	e001      	b.n	8001596 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001592:	f001 f80f 	bl	80025b4 <HAL_PWREx_EnableVddUSB>
}
 8001596:	bf00      	nop
 8001598:	37b0      	adds	r7, #176	@ 0xb0
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <NMI_Handler+0x4>

080015ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <HardFault_Handler+0x4>

080015b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <MemManage_Handler+0x4>

080015bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <BusFault_Handler+0x4>

080015c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <UsageFault_Handler+0x4>

080015cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015fa:	f000 f8bb 	bl	8001774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}

08001602 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001606:	2020      	movs	r0, #32
 8001608:	f000 fcd8 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800160c:	2040      	movs	r0, #64	@ 0x40
 800160e:	f000 fcd5 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001612:	2080      	movs	r0, #128	@ 0x80
 8001614:	f000 fcd2 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001618:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800161c:	f000 fcce 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001628:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800162c:	f000 fcc6 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001630:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001634:	f000 fcc2 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001638:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800163c:	f000 fcbe 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001640:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001644:	f000 fcba 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001648:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800164c:	f000 fcb6 	bl	8001fbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <SystemInit+0x20>)
 800165a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <SystemInit+0x20>)
 8001660:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001664:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001678:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800167c:	f7ff ffea 	bl	8001654 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001680:	480c      	ldr	r0, [pc, #48]	@ (80016b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001682:	490d      	ldr	r1, [pc, #52]	@ (80016b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <LoopForever+0xe>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001688:	e002      	b.n	8001690 <LoopCopyDataInit>

0800168a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800168a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800168c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168e:	3304      	adds	r3, #4

08001690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001694:	d3f9      	bcc.n	800168a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001698:	4c0a      	ldr	r4, [pc, #40]	@ (80016c4 <LoopForever+0x16>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800169c:	e001      	b.n	80016a2 <LoopFillZerobss>

0800169e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016a0:	3204      	adds	r2, #4

080016a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a4:	d3fb      	bcc.n	800169e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a6:	f003 fb97 	bl	8004dd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016aa:	f7ff f8e1 	bl	8000870 <main>

080016ae <LoopForever>:

LoopForever:
    b LoopForever
 80016ae:	e7fe      	b.n	80016ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016bc:	08004e90 	.word	0x08004e90
  ldr r2, =_sbss
 80016c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016c4:	20000780 	.word	0x20000780

080016c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c8:	e7fe      	b.n	80016c8 <ADC1_2_IRQHandler>

080016ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016d0:	2300      	movs	r3, #0
 80016d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f961 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f80e 	bl	80016fc <HAL_InitTick>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	e001      	b.n	80016f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ec:	f7ff fcac 	bl	8001048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001708:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <HAL_InitTick+0x6c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d023      	beq.n	8001758 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001710:	4b16      	ldr	r3, [pc, #88]	@ (800176c <HAL_InitTick+0x70>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <HAL_InitTick+0x6c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4619      	mov	r1, r3
 800171a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800171e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001722:	fbb2 f3f3 	udiv	r3, r2, r3
 8001726:	4618      	mov	r0, r3
 8001728:	f000 f96d 	bl	8001a06 <HAL_SYSTICK_Config>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10f      	bne.n	8001752 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d809      	bhi.n	800174c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f937 	bl	80019b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001744:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <HAL_InitTick+0x74>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e007      	b.n	800175c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e004      	b.n	800175c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
 8001756:	e001      	b.n	800175c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000008 	.word	0x20000008
 800176c:	20000000 	.word	0x20000000
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_IncTick+0x20>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_IncTick+0x24>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <HAL_IncTick+0x24>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008
 8001798:	20000758 	.word	0x20000758

0800179c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return uwTick;
 80017a0:	4b03      	ldr	r3, [pc, #12]	@ (80017b0 <HAL_GetTick+0x14>)
 80017a2:	681b      	ldr	r3, [r3, #0]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000758 	.word	0x20000758

080017b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017bc:	f7ff ffee 	bl	800179c <HAL_GetTick>
 80017c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017cc:	d005      	beq.n	80017da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017ce:	4b0a      	ldr	r3, [pc, #40]	@ (80017f8 <HAL_Delay+0x44>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017da:	bf00      	nop
 80017dc:	f7ff ffde 	bl	800179c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d8f7      	bhi.n	80017dc <HAL_Delay+0x28>
  {
  }
}
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000008 	.word	0x20000008

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	@ (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	@ (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	@ (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	@ 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff3e 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff8e 	bl	80018f0 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff31 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0ac      	b.n	8001b8c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f8b2 	bl	8001ba0 <DFSDM_GetChannelFromInstance>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a55      	ldr	r2, [pc, #340]	@ (8001b94 <HAL_DFSDM_ChannelInit+0x174>)
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e09f      	b.n	8001b8c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fb1f 	bl	8001090 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a52:	4b51      	ldr	r3, [pc, #324]	@ (8001b98 <HAL_DFSDM_ChannelInit+0x178>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	4a4f      	ldr	r2, [pc, #316]	@ (8001b98 <HAL_DFSDM_ChannelInit+0x178>)
 8001a5a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a5c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b98 <HAL_DFSDM_ChannelInit+0x178>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d125      	bne.n	8001ab0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a64:	4b4d      	ldr	r3, [pc, #308]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a4c      	ldr	r2, [pc, #304]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8001a6e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a70:	4b4a      	ldr	r3, [pc, #296]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4948      	ldr	r1, [pc, #288]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a7e:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a46      	ldr	r2, [pc, #280]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a84:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8001a88:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	791b      	ldrb	r3, [r3, #4]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d108      	bne.n	8001aa4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a92:	4b42      	ldr	r3, [pc, #264]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	493f      	ldr	r1, [pc, #252]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8001b9c <HAL_DFSDM_ChannelInit+0x17c>)
 8001aaa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001aae:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8001abe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6819      	ldr	r1, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ace:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001ad4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 020f 	bic.w	r2, r2, #15
 8001aec:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8001b14:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6899      	ldr	r1, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	3b01      	subs	r3, #1
 8001b26:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f002 0207 	and.w	r2, r2, #7
 8001b40:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b6c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f810 	bl	8001ba0 <DFSDM_GetChannelFromInstance>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4904      	ldr	r1, [pc, #16]	@ (8001b94 <HAL_DFSDM_ChannelInit+0x174>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000760 	.word	0x20000760
 8001b98:	2000075c 	.word	0x2000075c
 8001b9c:	40016000 	.word	0x40016000

08001ba0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a1c      	ldr	r2, [pc, #112]	@ (8001c1c <DFSDM_GetChannelFromInstance+0x7c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d102      	bne.n	8001bb6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	e02b      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a19      	ldr	r2, [pc, #100]	@ (8001c20 <DFSDM_GetChannelFromInstance+0x80>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d102      	bne.n	8001bc4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	e024      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a17      	ldr	r2, [pc, #92]	@ (8001c24 <DFSDM_GetChannelFromInstance+0x84>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d102      	bne.n	8001bd2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e01d      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <DFSDM_GetChannelFromInstance+0x88>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d102      	bne.n	8001be0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e016      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <DFSDM_GetChannelFromInstance+0x8c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d102      	bne.n	8001bee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001be8:	2305      	movs	r3, #5
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e00f      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c30 <DFSDM_GetChannelFromInstance+0x90>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d102      	bne.n	8001bfc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e008      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <DFSDM_GetChannelFromInstance+0x94>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d102      	bne.n	8001c0a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001c04:	2307      	movs	r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e001      	b.n	8001c0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40016000 	.word	0x40016000
 8001c20:	40016020 	.word	0x40016020
 8001c24:	40016040 	.word	0x40016040
 8001c28:	40016080 	.word	0x40016080
 8001c2c:	400160a0 	.word	0x400160a0
 8001c30:	400160c0 	.word	0x400160c0
 8001c34:	400160e0 	.word	0x400160e0

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c46:	e17f      	b.n	8001f48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa01 f303 	lsl.w	r3, r1, r3
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8171 	beq.w	8001f42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d005      	beq.n	8001c78 <HAL_GPIO_Init+0x40>
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d130      	bne.n	8001cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cae:	2201      	movs	r2, #1
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	091b      	lsrs	r3, r3, #4
 8001cc4:	f003 0201 	and.w	r2, r3, #1
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d118      	bne.n	8001d18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cec:	2201      	movs	r2, #1
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	f003 0201 	and.w	r2, r3, #1
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d017      	beq.n	8001d54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d123      	bne.n	8001da8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	691a      	ldr	r2, [r3, #16]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	08da      	lsrs	r2, r3, #3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3208      	adds	r2, #8
 8001da2:	6939      	ldr	r1, [r7, #16]
 8001da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0203 	and.w	r2, r3, #3
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 80ac 	beq.w	8001f42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	4b5f      	ldr	r3, [pc, #380]	@ (8001f68 <HAL_GPIO_Init+0x330>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dee:	4a5e      	ldr	r2, [pc, #376]	@ (8001f68 <HAL_GPIO_Init+0x330>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001df6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f68 <HAL_GPIO_Init+0x330>)
 8001df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e02:	4a5a      	ldr	r2, [pc, #360]	@ (8001f6c <HAL_GPIO_Init+0x334>)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	3302      	adds	r3, #2
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e2c:	d025      	beq.n	8001e7a <HAL_GPIO_Init+0x242>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a4f      	ldr	r2, [pc, #316]	@ (8001f70 <HAL_GPIO_Init+0x338>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d01f      	beq.n	8001e76 <HAL_GPIO_Init+0x23e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a4e      	ldr	r2, [pc, #312]	@ (8001f74 <HAL_GPIO_Init+0x33c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d019      	beq.n	8001e72 <HAL_GPIO_Init+0x23a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4d      	ldr	r2, [pc, #308]	@ (8001f78 <HAL_GPIO_Init+0x340>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d013      	beq.n	8001e6e <HAL_GPIO_Init+0x236>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4c      	ldr	r2, [pc, #304]	@ (8001f7c <HAL_GPIO_Init+0x344>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d00d      	beq.n	8001e6a <HAL_GPIO_Init+0x232>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4b      	ldr	r2, [pc, #300]	@ (8001f80 <HAL_GPIO_Init+0x348>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d007      	beq.n	8001e66 <HAL_GPIO_Init+0x22e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4a      	ldr	r2, [pc, #296]	@ (8001f84 <HAL_GPIO_Init+0x34c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_GPIO_Init+0x22a>
 8001e5e:	2306      	movs	r3, #6
 8001e60:	e00c      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e62:	2307      	movs	r3, #7
 8001e64:	e00a      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e66:	2305      	movs	r3, #5
 8001e68:	e008      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e004      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_Init+0x244>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	f002 0203 	and.w	r2, r2, #3
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	4093      	lsls	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e8c:	4937      	ldr	r1, [pc, #220]	@ (8001f6c <HAL_GPIO_Init+0x334>)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ebe:	4a32      	ldr	r2, [pc, #200]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ec4:	4b30      	ldr	r3, [pc, #192]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ee8:	4a27      	ldr	r2, [pc, #156]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eee:	4b26      	ldr	r3, [pc, #152]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f12:	4a1d      	ldr	r2, [pc, #116]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	4013      	ands	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f3c:	4a12      	ldr	r2, [pc, #72]	@ (8001f88 <HAL_GPIO_Init+0x350>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	3301      	adds	r3, #1
 8001f46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f47f ae78 	bne.w	8001c48 <HAL_GPIO_Init+0x10>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010000 	.word	0x40010000
 8001f70:	48000400 	.word	0x48000400
 8001f74:	48000800 	.word	0x48000800
 8001f78:	48000c00 	.word	0x48000c00
 8001f7c:	48001000 	.word	0x48001000
 8001f80:	48001400 	.word	0x48001400
 8001f84:	48001800 	.word	0x48001800
 8001f88:	40010400 	.word	0x40010400

08001f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f9c:	787b      	ldrb	r3, [r7, #1]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fa2:	887a      	ldrh	r2, [r7, #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fc6:	4b08      	ldr	r3, [pc, #32]	@ (8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd2:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
 8001fd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 f806 	bl	8001fec <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40010400 	.word	0x40010400

08001fec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e08d      	b.n	8002130 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d106      	bne.n	800202e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f7ff f895 	bl	8001158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2224      	movs	r2, #36	@ 0x24
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002052:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689a      	ldr	r2, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002062:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	e006      	b.n	800208a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002088:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d108      	bne.n	80020a4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	e007      	b.n	80020b4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020c6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68da      	ldr	r2, [r3, #12]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69d9      	ldr	r1, [r3, #28]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1a      	ldr	r2, [r3, #32]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b20      	cmp	r3, #32
 800214c:	d138      	bne.n	80021c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002158:	2302      	movs	r3, #2
 800215a:	e032      	b.n	80021c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2224      	movs	r2, #36	@ 0x24
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800218a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	e000      	b.n	80021c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
  }
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d139      	bne.n	8002258 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e033      	b.n	800225a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2224      	movs	r2, #36	@ 0x24
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002220:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b086      	sub	sp, #24
 800226a:	af02      	add	r7, sp, #8
 800226c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e101      	b.n	800247c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d106      	bne.n	8002292 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff f8ed 	bl	800146c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f002 fb0f 	bl	80048c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7c1a      	ldrb	r2, [r3, #16]
 80022b2:	f88d 2000 	strb.w	r2, [sp]
 80022b6:	3304      	adds	r3, #4
 80022b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022ba:	f002 fad8 	bl	800486e <USB_CoreInit>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0d5      	b.n	800247c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 fb07 	bl	80048ea <USB_SetCurrentMode>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e0c6      	b.n	800247c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
 80022f2:	e04a      	b.n	800238a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3315      	adds	r3, #21
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	3314      	adds	r3, #20
 8002318:	7bfa      	ldrb	r2, [r7, #15]
 800231a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	b298      	uxth	r0, r3
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4413      	add	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	332e      	adds	r3, #46	@ 0x2e
 8002330:	4602      	mov	r2, r0
 8002332:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3318      	adds	r3, #24
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	331c      	adds	r3, #28
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	3320      	adds	r3, #32
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	3324      	adds	r3, #36	@ 0x24
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	3301      	adds	r3, #1
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	791b      	ldrb	r3, [r3, #4]
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	429a      	cmp	r2, r3
 8002392:	d3af      	bcc.n	80022f4 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	2300      	movs	r3, #0
 8002396:	73fb      	strb	r3, [r7, #15]
 8002398:	e044      	b.n	8002424 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	4613      	mov	r3, r2
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	440b      	add	r3, r1
 80023a8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	3301      	adds	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	791b      	ldrb	r3, [r3, #4]
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	429a      	cmp	r2, r3
 800242c:	d3b5      	bcc.n	800239a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	7c1a      	ldrb	r2, [r3, #16]
 8002436:	f88d 2000 	strb.w	r2, [sp]
 800243a:	3304      	adds	r3, #4
 800243c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800243e:	f002 faa1 	bl	8004984 <USB_DevInit>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d005      	beq.n	8002454 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e013      	b.n	800247c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	7b1b      	ldrb	r3, [r3, #12]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f80a 	bl	8002484 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f002 fc46 	bl	8004d06 <USB_DevDisconnect>

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3710      	adds	r7, #16
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b6:	f043 0303 	orr.w	r3, r3, #3
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a04      	ldr	r2, [pc, #16]	@ (80024e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024da:	6013      	str	r3, [r2, #0]
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40007000 	.word	0x40007000

080024ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024f0:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <HAL_PWREx_GetVoltageRange+0x18>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40007000 	.word	0x40007000

08002508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002516:	d130      	bne.n	800257a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002518:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002524:	d038      	beq.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002526:	4b20      	ldr	r3, [pc, #128]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800252e:	4a1e      	ldr	r2, [pc, #120]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002530:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002534:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002536:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2232      	movs	r2, #50	@ 0x32
 800253c:	fb02 f303 	mul.w	r3, r2, r3
 8002540:	4a1b      	ldr	r2, [pc, #108]	@ (80025b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0c9b      	lsrs	r3, r3, #18
 8002548:	3301      	adds	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800254c:	e002      	b.n	8002554 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	3b01      	subs	r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002560:	d102      	bne.n	8002568 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f2      	bne.n	800254e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002574:	d110      	bne.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e00f      	b.n	800259a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002586:	d007      	beq.n	8002598 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002590:	4a05      	ldr	r2, [pc, #20]	@ (80025a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002596:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40007000 	.word	0x40007000
 80025ac:	20000000 	.word	0x20000000
 80025b0:	431bde83 	.word	0x431bde83

080025b4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80025be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025c2:	6053      	str	r3, [r2, #4]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40007000 	.word	0x40007000

080025d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af02      	add	r7, sp, #8
 80025da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff f8de 	bl	800179c <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e063      	b.n	80026b4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7fe fe07 	bl	8001214 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002606:	f241 3188 	movw	r1, #5000	@ 0x1388
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f858 	bl	80026c0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	3b01      	subs	r3, #1
 8002620:	021a      	lsls	r2, r3, #8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	2120      	movs	r1, #32
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f850 	bl	80026dc <QSPI_WaitFlagStateUntilTimeout>
 800263c:	4603      	mov	r3, r0
 800263e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002640:	7afb      	ldrb	r3, [r7, #11]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d131      	bne.n	80026aa <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002650:	f023 0310 	bic.w	r3, r3, #16
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	6852      	ldr	r2, [r2, #4]
 8002658:	0611      	lsls	r1, r2, #24
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	68d2      	ldr	r2, [r2, #12]
 800265e:	4311      	orrs	r1, r2
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	430b      	orrs	r3, r1
 8002666:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4b13      	ldr	r3, [pc, #76]	@ (80026bc <HAL_QSPI_Init+0xe8>)
 8002670:	4013      	ands	r3, r2
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6912      	ldr	r2, [r2, #16]
 8002676:	0411      	lsls	r1, r2, #16
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6952      	ldr	r2, [r2, #20]
 800267c:	4311      	orrs	r1, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6992      	ldr	r2, [r2, #24]
 8002682:	4311      	orrs	r1, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	430b      	orrs	r3, r1
 800268a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 80026b2:	7afb      	ldrb	r3, [r7, #11]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	ffe0f8fe 	.word	0xffe0f8fe

080026c0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80026ec:	e01a      	b.n	8002724 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d016      	beq.n	8002724 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7ff f851 	bl	800179c <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10b      	bne.n	8002724 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2204      	movs	r2, #4
 8002710:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e00e      	b.n	8002742 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689a      	ldr	r2, [r3, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	bf14      	ite	ne
 8002732:	2301      	movne	r3, #1
 8002734:	2300      	moveq	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	429a      	cmp	r2, r3
 800273e:	d1d6      	bne.n	80026ee <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e3ca      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275e:	4b97      	ldr	r3, [pc, #604]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002768:	4b94      	ldr	r3, [pc, #592]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 80e4 	beq.w	8002948 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <HAL_RCC_OscConfig+0x4a>
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	f040 808b 	bne.w	80028a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	2b01      	cmp	r3, #1
 8002792:	f040 8087 	bne.w	80028a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002796:	4b89      	ldr	r3, [pc, #548]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x62>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e3a2      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a1a      	ldr	r2, [r3, #32]
 80027b2:	4b82      	ldr	r3, [pc, #520]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_RCC_OscConfig+0x7c>
 80027be:	4b7f      	ldr	r3, [pc, #508]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027c6:	e005      	b.n	80027d4 <HAL_RCC_OscConfig+0x88>
 80027c8:	4b7c      	ldr	r3, [pc, #496]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80027ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d223      	bcs.n	8002820 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fd55 	bl	800328c <RCC_SetFlashLatencyFromMSIRange>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e383      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ec:	4b73      	ldr	r3, [pc, #460]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a72      	ldr	r2, [pc, #456]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80027f2:	f043 0308 	orr.w	r3, r3, #8
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b70      	ldr	r3, [pc, #448]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	496d      	ldr	r1, [pc, #436]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800280a:	4b6c      	ldr	r3, [pc, #432]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	4968      	ldr	r1, [pc, #416]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
 800281e:	e025      	b.n	800286c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002820:	4b66      	ldr	r3, [pc, #408]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a65      	ldr	r2, [pc, #404]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002826:	f043 0308 	orr.w	r3, r3, #8
 800282a:	6013      	str	r3, [r2, #0]
 800282c:	4b63      	ldr	r3, [pc, #396]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4960      	ldr	r1, [pc, #384]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283e:	4b5f      	ldr	r3, [pc, #380]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	021b      	lsls	r3, r3, #8
 800284c:	495b      	ldr	r1, [pc, #364]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4618      	mov	r0, r3
 800285e:	f000 fd15 	bl	800328c <RCC_SetFlashLatencyFromMSIRange>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e343      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800286c:	f000 fc4a 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 8002870:	4602      	mov	r2, r0
 8002872:	4b52      	ldr	r3, [pc, #328]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	4950      	ldr	r1, [pc, #320]	@ (80029c0 <HAL_RCC_OscConfig+0x274>)
 800287e:	5ccb      	ldrb	r3, [r1, r3]
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
 8002888:	4a4e      	ldr	r2, [pc, #312]	@ (80029c4 <HAL_RCC_OscConfig+0x278>)
 800288a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800288c:	4b4e      	ldr	r3, [pc, #312]	@ (80029c8 <HAL_RCC_OscConfig+0x27c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe ff33 	bl	80016fc <HAL_InitTick>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d052      	beq.n	8002946 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	e327      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d032      	beq.n	8002912 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028ac:	4b43      	ldr	r3, [pc, #268]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a42      	ldr	r2, [pc, #264]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028b8:	f7fe ff70 	bl	800179c <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028c0:	f7fe ff6c 	bl	800179c <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e310      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028d2:	4b3a      	ldr	r3, [pc, #232]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028de:	4b37      	ldr	r3, [pc, #220]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a36      	ldr	r2, [pc, #216]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	6013      	str	r3, [r2, #0]
 80028ea:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4931      	ldr	r1, [pc, #196]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028fc:	4b2f      	ldr	r3, [pc, #188]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	492c      	ldr	r1, [pc, #176]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
 8002910:	e01a      	b.n	8002948 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002912:	4b2a      	ldr	r3, [pc, #168]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a29      	ldr	r2, [pc, #164]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800291e:	f7fe ff3d 	bl	800179c <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002926:	f7fe ff39 	bl	800179c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e2dd      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002938:	4b20      	ldr	r3, [pc, #128]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x1da>
 8002944:	e000      	b.n	8002948 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002946:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	d074      	beq.n	8002a3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b08      	cmp	r3, #8
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x21a>
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b0c      	cmp	r3, #12
 800295e:	d10e      	bne.n	800297e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b03      	cmp	r3, #3
 8002964:	d10b      	bne.n	800297e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002966:	4b15      	ldr	r3, [pc, #84]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d064      	beq.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d160      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e2ba      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002986:	d106      	bne.n	8002996 <HAL_RCC_OscConfig+0x24a>
 8002988:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a0b      	ldr	r2, [pc, #44]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 800298e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	e026      	b.n	80029e4 <HAL_RCC_OscConfig+0x298>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800299e:	d115      	bne.n	80029cc <HAL_RCC_OscConfig+0x280>
 80029a0:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a05      	ldr	r2, [pc, #20]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80029a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b03      	ldr	r3, [pc, #12]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a02      	ldr	r2, [pc, #8]	@ (80029bc <HAL_RCC_OscConfig+0x270>)
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	e014      	b.n	80029e4 <HAL_RCC_OscConfig+0x298>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08004e38 	.word	0x08004e38
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004
 80029cc:	4ba0      	ldr	r3, [pc, #640]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a9f      	ldr	r2, [pc, #636]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b9d      	ldr	r3, [pc, #628]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a9c      	ldr	r2, [pc, #624]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe fed6 	bl	800179c <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fed2 	bl	800179c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	@ 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e276      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a06:	4b92      	ldr	r3, [pc, #584]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x2a8>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fec2 	bl	800179c <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe febe 	bl	800179c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	@ 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e262      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a2e:	4b88      	ldr	r3, [pc, #544]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x2d0>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d060      	beq.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d005      	beq.n	8002a5c <HAL_RCC_OscConfig+0x310>
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d119      	bne.n	8002a8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d116      	bne.n	8002a8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a5c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_OscConfig+0x328>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e23f      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a74:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	061b      	lsls	r3, r3, #24
 8002a82:	4973      	ldr	r1, [pc, #460]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a88:	e040      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d023      	beq.n	8002ada <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a92:	4b6f      	ldr	r3, [pc, #444]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a6e      	ldr	r2, [pc, #440]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fe7d 	bl	800179c <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa6:	f7fe fe79 	bl	800179c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e21d      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab8:	4b65      	ldr	r3, [pc, #404]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac4:	4b62      	ldr	r3, [pc, #392]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	061b      	lsls	r3, r3, #24
 8002ad2:	495f      	ldr	r1, [pc, #380]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	604b      	str	r3, [r1, #4]
 8002ad8:	e018      	b.n	8002b0c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ada:	4b5d      	ldr	r3, [pc, #372]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a5c      	ldr	r2, [pc, #368]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002ae0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ae4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fe59 	bl	800179c <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aee:	f7fe fe55 	bl	800179c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e1f9      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b00:	4b53      	ldr	r3, [pc, #332]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1f0      	bne.n	8002aee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0308 	and.w	r3, r3, #8
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d03c      	beq.n	8002b92 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01c      	beq.n	8002b5a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b20:	4b4b      	ldr	r3, [pc, #300]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b26:	4a4a      	ldr	r2, [pc, #296]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b30:	f7fe fe34 	bl	800179c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b38:	f7fe fe30 	bl	800179c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1d4      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b4a:	4b41      	ldr	r3, [pc, #260]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ef      	beq.n	8002b38 <HAL_RCC_OscConfig+0x3ec>
 8002b58:	e01b      	b.n	8002b92 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b60:	4a3b      	ldr	r2, [pc, #236]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b62:	f023 0301 	bic.w	r3, r3, #1
 8002b66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7fe fe17 	bl	800179c <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b72:	f7fe fe13 	bl	800179c <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e1b7      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b84:	4b32      	ldr	r3, [pc, #200]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1ef      	bne.n	8002b72 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 80a6 	beq.w	8002cec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10d      	bne.n	8002bcc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb0:	4b27      	ldr	r3, [pc, #156]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	4a26      	ldr	r2, [pc, #152]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bbc:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bcc:	4b21      	ldr	r3, [pc, #132]	@ (8002c54 <HAL_RCC_OscConfig+0x508>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d118      	bne.n	8002c0a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <HAL_RCC_OscConfig+0x508>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c54 <HAL_RCC_OscConfig+0x508>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be4:	f7fe fdda 	bl	800179c <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bec:	f7fe fdd6 	bl	800179c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e17a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_RCC_OscConfig+0x508>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d108      	bne.n	8002c24 <HAL_RCC_OscConfig+0x4d8>
 8002c12:	4b0f      	ldr	r3, [pc, #60]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c18:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c22:	e029      	b.n	8002c78 <HAL_RCC_OscConfig+0x52c>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d115      	bne.n	8002c58 <HAL_RCC_OscConfig+0x50c>
 8002c2c:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c32:	4a07      	ldr	r2, [pc, #28]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c3c:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c42:	4a03      	ldr	r2, [pc, #12]	@ (8002c50 <HAL_RCC_OscConfig+0x504>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c4c:	e014      	b.n	8002c78 <HAL_RCC_OscConfig+0x52c>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40007000 	.word	0x40007000
 8002c58:	4b9c      	ldr	r3, [pc, #624]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c5e:	4a9b      	ldr	r2, [pc, #620]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c68:	4b98      	ldr	r3, [pc, #608]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c6e:	4a97      	ldr	r2, [pc, #604]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002c70:	f023 0304 	bic.w	r3, r3, #4
 8002c74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d016      	beq.n	8002cae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c80:	f7fe fd8c 	bl	800179c <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c86:	e00a      	b.n	8002c9e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fe fd88 	bl	800179c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e12a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c9e:	4b8b      	ldr	r3, [pc, #556]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ed      	beq.n	8002c88 <HAL_RCC_OscConfig+0x53c>
 8002cac:	e015      	b.n	8002cda <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe fd75 	bl	800179c <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb6:	f7fe fd71 	bl	800179c <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e113      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ccc:	4b7f      	ldr	r3, [pc, #508]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ed      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cda:	7ffb      	ldrb	r3, [r7, #31]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce0:	4b7a      	ldr	r3, [pc, #488]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce4:	4a79      	ldr	r2, [pc, #484]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80fe 	beq.w	8002ef2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	f040 80d0 	bne.w	8002ea0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d00:	4b72      	ldr	r3, [pc, #456]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0203 	and.w	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d130      	bne.n	8002d76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d127      	bne.n	8002d76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d30:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d11f      	bne.n	8002d76 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d40:	2a07      	cmp	r2, #7
 8002d42:	bf14      	ite	ne
 8002d44:	2201      	movne	r2, #1
 8002d46:	2200      	moveq	r2, #0
 8002d48:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d113      	bne.n	8002d76 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d109      	bne.n	8002d76 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	085b      	lsrs	r3, r3, #1
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d06e      	beq.n	8002e54 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d069      	beq.n	8002e50 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d105      	bne.n	8002d94 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d88:	4b50      	ldr	r3, [pc, #320]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0ad      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d98:	4b4c      	ldr	r3, [pc, #304]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002da2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002da4:	f7fe fcfa 	bl	800179c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe fcf6 	bl	800179c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e09a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dca:	4b40      	ldr	r3, [pc, #256]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	4b40      	ldr	r3, [pc, #256]	@ (8002ed0 <HAL_RCC_OscConfig+0x784>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002dda:	3a01      	subs	r2, #1
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	4311      	orrs	r1, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002de4:	0212      	lsls	r2, r2, #8
 8002de6:	4311      	orrs	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002dec:	0852      	lsrs	r2, r2, #1
 8002dee:	3a01      	subs	r2, #1
 8002df0:	0552      	lsls	r2, r2, #21
 8002df2:	4311      	orrs	r1, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002df8:	0852      	lsrs	r2, r2, #1
 8002dfa:	3a01      	subs	r2, #1
 8002dfc:	0652      	lsls	r2, r2, #25
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e04:	0912      	lsrs	r2, r2, #4
 8002e06:	0452      	lsls	r2, r2, #17
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	4930      	ldr	r1, [pc, #192]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e10:	4b2e      	ldr	r3, [pc, #184]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a2d      	ldr	r2, [pc, #180]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a2a      	ldr	r2, [pc, #168]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e28:	f7fe fcb8 	bl	800179c <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e30:	f7fe fcb4 	bl	800179c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e058      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e42:	4b22      	ldr	r3, [pc, #136]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e4e:	e050      	b.n	8002ef2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e04f      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d148      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e60:	4b1a      	ldr	r3, [pc, #104]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a19      	ldr	r2, [pc, #100]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e6c:	4b17      	ldr	r3, [pc, #92]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	4a16      	ldr	r2, [pc, #88]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e76:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e78:	f7fe fc90 	bl	800179c <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e80:	f7fe fc8c 	bl	800179c <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e030      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e92:	4b0e      	ldr	r3, [pc, #56]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x734>
 8002e9e:	e028      	b.n	8002ef2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b0c      	cmp	r3, #12
 8002ea4:	d023      	beq.n	8002eee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea6:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a08      	ldr	r2, [pc, #32]	@ (8002ecc <HAL_RCC_OscConfig+0x780>)
 8002eac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7fe fc73 	bl	800179c <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eb8:	e00c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eba:	f7fe fc6f 	bl	800179c <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d905      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e013      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <HAL_RCC_OscConfig+0x7b0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1ec      	bne.n	8002eba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ee0:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <HAL_RCC_OscConfig+0x7b0>)
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	4905      	ldr	r1, [pc, #20]	@ (8002efc <HAL_RCC_OscConfig+0x7b0>)
 8002ee6:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <HAL_RCC_OscConfig+0x7b4>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	60cb      	str	r3, [r1, #12]
 8002eec:	e001      	b.n	8002ef2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40021000 	.word	0x40021000
 8002f00:	feeefffc 	.word	0xfeeefffc

08002f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0e7      	b.n	80030e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f18:	4b75      	ldr	r3, [pc, #468]	@ (80030f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d910      	bls.n	8002f48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b72      	ldr	r3, [pc, #456]	@ (80030f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 0207 	bic.w	r2, r3, #7
 8002f2e:	4970      	ldr	r1, [pc, #448]	@ (80030f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f36:	4b6e      	ldr	r3, [pc, #440]	@ (80030f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	683a      	ldr	r2, [r7, #0]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d001      	beq.n	8002f48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0cf      	b.n	80030e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d010      	beq.n	8002f76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	4b66      	ldr	r3, [pc, #408]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d908      	bls.n	8002f76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f64:	4b63      	ldr	r3, [pc, #396]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4960      	ldr	r1, [pc, #384]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d04c      	beq.n	800301c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d107      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8a:	4b5a      	ldr	r3, [pc, #360]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d121      	bne.n	8002fda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0a6      	b.n	80030e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa2:	4b54      	ldr	r3, [pc, #336]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d115      	bne.n	8002fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e09a      	b.n	80030e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fba:	4b4e      	ldr	r3, [pc, #312]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e08e      	b.n	80030e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fca:	4b4a      	ldr	r3, [pc, #296]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e086      	b.n	80030e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fda:	4b46      	ldr	r3, [pc, #280]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f023 0203 	bic.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4943      	ldr	r1, [pc, #268]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fec:	f7fe fbd6 	bl	800179c <HAL_GetTick>
 8002ff0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff4:	f7fe fbd2 	bl	800179c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e06e      	b.n	80030e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	4b3a      	ldr	r3, [pc, #232]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 020c 	and.w	r2, r3, #12
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	429a      	cmp	r2, r3
 800301a:	d1eb      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d010      	beq.n	800304a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	4b31      	ldr	r3, [pc, #196]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003034:	429a      	cmp	r2, r3
 8003036:	d208      	bcs.n	800304a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003038:	4b2e      	ldr	r3, [pc, #184]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	492b      	ldr	r1, [pc, #172]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800304a:	4b29      	ldr	r3, [pc, #164]	@ (80030f0 <HAL_RCC_ClockConfig+0x1ec>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d210      	bcs.n	800307a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003058:	4b25      	ldr	r3, [pc, #148]	@ (80030f0 <HAL_RCC_ClockConfig+0x1ec>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f023 0207 	bic.w	r2, r3, #7
 8003060:	4923      	ldr	r1, [pc, #140]	@ (80030f0 <HAL_RCC_ClockConfig+0x1ec>)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003068:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <HAL_RCC_ClockConfig+0x1ec>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d001      	beq.n	800307a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e036      	b.n	80030e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d008      	beq.n	8003098 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003086:	4b1b      	ldr	r3, [pc, #108]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	4918      	ldr	r1, [pc, #96]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d009      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a4:	4b13      	ldr	r3, [pc, #76]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4910      	ldr	r1, [pc, #64]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030b8:	f000 f824 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 80030bc:	4602      	mov	r2, r0
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <HAL_RCC_ClockConfig+0x1f0>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	490b      	ldr	r1, [pc, #44]	@ (80030f8 <HAL_RCC_ClockConfig+0x1f4>)
 80030ca:	5ccb      	ldrb	r3, [r1, r3]
 80030cc:	f003 031f 	and.w	r3, r3, #31
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
 80030d4:	4a09      	ldr	r2, [pc, #36]	@ (80030fc <HAL_RCC_ClockConfig+0x1f8>)
 80030d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <HAL_RCC_ClockConfig+0x1fc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe fb0d 	bl	80016fc <HAL_InitTick>
 80030e2:	4603      	mov	r3, r0
 80030e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80030e6:	7afb      	ldrb	r3, [r7, #11]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40021000 	.word	0x40021000
 80030f8:	08004e38 	.word	0x08004e38
 80030fc:	20000000 	.word	0x20000000
 8003100:	20000004 	.word	0x20000004

08003104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	@ 0x24
 8003108:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	2300      	movs	r3, #0
 8003110:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003112:	4b3e      	ldr	r3, [pc, #248]	@ (800320c <HAL_RCC_GetSysClockFreq+0x108>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
 800311a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800311c:	4b3b      	ldr	r3, [pc, #236]	@ (800320c <HAL_RCC_GetSysClockFreq+0x108>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_GetSysClockFreq+0x34>
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	2b0c      	cmp	r3, #12
 8003130:	d121      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d11e      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003138:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_GetSysClockFreq+0x108>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d107      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003144:	4b31      	ldr	r3, [pc, #196]	@ (800320c <HAL_RCC_GetSysClockFreq+0x108>)
 8003146:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	e005      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003154:	4b2d      	ldr	r3, [pc, #180]	@ (800320c <HAL_RCC_GetSysClockFreq+0x108>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003160:	4a2b      	ldr	r2, [pc, #172]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003168:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10d      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003174:	e00a      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d102      	bne.n	8003182 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800317c:	4b25      	ldr	r3, [pc, #148]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x110>)
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	e004      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d101      	bne.n	800318c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003188:	4b23      	ldr	r3, [pc, #140]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x114>)
 800318a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d134      	bne.n	80031fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003192:	4b1e      	ldr	r3, [pc, #120]	@ (800320c <HAL_RCC_GetSysClockFreq+0x108>)
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d003      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0xa6>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d003      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0xac>
 80031a8:	e005      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x110>)
 80031ac:	617b      	str	r3, [r7, #20]
      break;
 80031ae:	e005      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031b0:	4b19      	ldr	r3, [pc, #100]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x114>)
 80031b2:	617b      	str	r3, [r7, #20]
      break;
 80031b4:	e002      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	617b      	str	r3, [r7, #20]
      break;
 80031ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031bc:	4b13      	ldr	r3, [pc, #76]	@ (800320c <HAL_RCC_GetSysClockFreq+0x108>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	3301      	adds	r3, #1
 80031c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031ca:	4b10      	ldr	r3, [pc, #64]	@ (800320c <HAL_RCC_GetSysClockFreq+0x108>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	fb03 f202 	mul.w	r2, r3, r2
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031e2:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <HAL_RCC_GetSysClockFreq+0x108>)
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	0e5b      	lsrs	r3, r3, #25
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	3301      	adds	r3, #1
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031fc:	69bb      	ldr	r3, [r7, #24]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3724      	adds	r7, #36	@ 0x24
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	08004e50 	.word	0x08004e50
 8003214:	00f42400 	.word	0x00f42400
 8003218:	007a1200 	.word	0x007a1200

0800321c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003220:	4b03      	ldr	r3, [pc, #12]	@ (8003230 <HAL_RCC_GetHCLKFreq+0x14>)
 8003222:	681b      	ldr	r3, [r3, #0]
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000000 	.word	0x20000000

08003234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003238:	f7ff fff0 	bl	800321c <HAL_RCC_GetHCLKFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b06      	ldr	r3, [pc, #24]	@ (8003258 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	4904      	ldr	r1, [pc, #16]	@ (800325c <HAL_RCC_GetPCLK1Freq+0x28>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	08004e48 	.word	0x08004e48

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003264:	f7ff ffda 	bl	800321c <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <HAL_RCC_GetPCLK2Freq+0x24>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0adb      	lsrs	r3, r3, #11
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4904      	ldr	r1, [pc, #16]	@ (8003288 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000
 8003288:	08004e48 	.word	0x08004e48

0800328c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003298:	4b2a      	ldr	r3, [pc, #168]	@ (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032a4:	f7ff f922 	bl	80024ec <HAL_PWREx_GetVoltageRange>
 80032a8:	6178      	str	r0, [r7, #20]
 80032aa:	e014      	b.n	80032d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032ac:	4b25      	ldr	r3, [pc, #148]	@ (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b0:	4a24      	ldr	r2, [pc, #144]	@ (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b8:	4b22      	ldr	r3, [pc, #136]	@ (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032c4:	f7ff f912 	bl	80024ec <HAL_PWREx_GetVoltageRange>
 80032c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003344 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032dc:	d10b      	bne.n	80032f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b80      	cmp	r3, #128	@ 0x80
 80032e2:	d919      	bls.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80032e8:	d902      	bls.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032ea:	2302      	movs	r3, #2
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	e013      	b.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032f0:	2301      	movs	r3, #1
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	e010      	b.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b80      	cmp	r3, #128	@ 0x80
 80032fa:	d902      	bls.n	8003302 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032fc:	2303      	movs	r3, #3
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	e00a      	b.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b80      	cmp	r3, #128	@ 0x80
 8003306:	d102      	bne.n	800330e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003308:	2302      	movs	r3, #2
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	e004      	b.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b70      	cmp	r3, #112	@ 0x70
 8003312:	d101      	bne.n	8003318 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003314:	2301      	movs	r3, #1
 8003316:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003318:	4b0b      	ldr	r3, [pc, #44]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f023 0207 	bic.w	r2, r3, #7
 8003320:	4909      	ldr	r1, [pc, #36]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003328:	4b07      	ldr	r3, [pc, #28]	@ (8003348 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	429a      	cmp	r2, r3
 8003334:	d001      	beq.n	800333a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40021000 	.word	0x40021000
 8003348:	40022000 	.word	0x40022000

0800334c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003354:	2300      	movs	r3, #0
 8003356:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003358:	2300      	movs	r3, #0
 800335a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003364:	2b00      	cmp	r3, #0
 8003366:	d041      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800336c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003370:	d02a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003372:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003376:	d824      	bhi.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003378:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800337c:	d008      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800337e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003382:	d81e      	bhi.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003388:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800338c:	d010      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800338e:	e018      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003390:	4b86      	ldr	r3, [pc, #536]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	4a85      	ldr	r2, [pc, #532]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800339c:	e015      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3304      	adds	r3, #4
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 facb 	bl	8003940 <RCCEx_PLLSAI1_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ae:	e00c      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3320      	adds	r3, #32
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fbb6 	bl	8003b28 <RCCEx_PLLSAI2_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033c0:	e003      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	74fb      	strb	r3, [r7, #19]
      break;
 80033c6:	e000      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033d0:	4b76      	ldr	r3, [pc, #472]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033de:	4973      	ldr	r1, [pc, #460]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033e6:	e001      	b.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	7cfb      	ldrb	r3, [r7, #19]
 80033ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d041      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033fc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003400:	d02a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003402:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003406:	d824      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003408:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800340c:	d008      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800340e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003412:	d81e      	bhi.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003418:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800341c:	d010      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800341e:	e018      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003420:	4b62      	ldr	r3, [pc, #392]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a61      	ldr	r2, [pc, #388]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800342a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800342c:	e015      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3304      	adds	r3, #4
 8003432:	2100      	movs	r1, #0
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fa83 	bl	8003940 <RCCEx_PLLSAI1_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800343e:	e00c      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3320      	adds	r3, #32
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fb6e 	bl	8003b28 <RCCEx_PLLSAI2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003450:	e003      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	74fb      	strb	r3, [r7, #19]
      break;
 8003456:	e000      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800345a:	7cfb      	ldrb	r3, [r7, #19]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003460:	4b52      	ldr	r3, [pc, #328]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003466:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800346e:	494f      	ldr	r1, [pc, #316]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003476:	e001      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80a0 	beq.w	80035ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800348a:	2300      	movs	r3, #0
 800348c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800348e:	4b47      	ldr	r3, [pc, #284]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800349e:	2300      	movs	r3, #0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00d      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a4:	4b41      	ldr	r3, [pc, #260]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	4a40      	ldr	r2, [pc, #256]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b0:	4b3e      	ldr	r3, [pc, #248]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034bc:	2301      	movs	r3, #1
 80034be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034c0:	4b3b      	ldr	r3, [pc, #236]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a3a      	ldr	r2, [pc, #232]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034cc:	f7fe f966 	bl	800179c <HAL_GetTick>
 80034d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034d2:	e009      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7fe f962 	bl	800179c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d902      	bls.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	74fb      	strb	r3, [r7, #19]
        break;
 80034e6:	e005      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034e8:	4b31      	ldr	r3, [pc, #196]	@ (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0ef      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034f4:	7cfb      	ldrb	r3, [r7, #19]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d15c      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034fa:	4b2c      	ldr	r3, [pc, #176]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003504:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01f      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	429a      	cmp	r2, r3
 8003516:	d019      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003518:	4b24      	ldr	r3, [pc, #144]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003522:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003524:	4b21      	ldr	r3, [pc, #132]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	4a20      	ldr	r2, [pc, #128]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003534:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353a:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003544:	4a19      	ldr	r2, [pc, #100]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003556:	f7fe f921 	bl	800179c <HAL_GetTick>
 800355a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355c:	e00b      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355e:	f7fe f91d 	bl	800179c <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356c:	4293      	cmp	r3, r2
 800356e:	d902      	bls.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	74fb      	strb	r3, [r7, #19]
            break;
 8003574:	e006      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ec      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10c      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800358a:	4b08      	ldr	r3, [pc, #32]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003590:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800359a:	4904      	ldr	r1, [pc, #16]	@ (80035ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035a2:	e009      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	74bb      	strb	r3, [r7, #18]
 80035a8:	e006      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b8:	7c7b      	ldrb	r3, [r7, #17]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d105      	bne.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035be:	4b9e      	ldr	r3, [pc, #632]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c2:	4a9d      	ldr	r2, [pc, #628]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035d6:	4b98      	ldr	r3, [pc, #608]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	f023 0203 	bic.w	r2, r3, #3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e4:	4994      	ldr	r1, [pc, #592]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fe:	f023 020c 	bic.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003606:	498c      	ldr	r1, [pc, #560]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800361a:	4b87      	ldr	r3, [pc, #540]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003620:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003628:	4983      	ldr	r1, [pc, #524]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800363c:	4b7e      	ldr	r3, [pc, #504]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	497b      	ldr	r1, [pc, #492]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800365e:	4b76      	ldr	r3, [pc, #472]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003664:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800366c:	4972      	ldr	r1, [pc, #456]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003680:	4b6d      	ldr	r3, [pc, #436]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003686:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368e:	496a      	ldr	r1, [pc, #424]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036a2:	4b65      	ldr	r3, [pc, #404]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b0:	4961      	ldr	r1, [pc, #388]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036c4:	4b5c      	ldr	r3, [pc, #368]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d2:	4959      	ldr	r1, [pc, #356]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036e6:	4b54      	ldr	r3, [pc, #336]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f4:	4950      	ldr	r1, [pc, #320]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003708:	4b4b      	ldr	r3, [pc, #300]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003716:	4948      	ldr	r1, [pc, #288]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800372a:	4b43      	ldr	r3, [pc, #268]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003730:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	493f      	ldr	r1, [pc, #252]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d028      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800374c:	4b3a      	ldr	r3, [pc, #232]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003752:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800375a:	4937      	ldr	r1, [pc, #220]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003766:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800376a:	d106      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800376c:	4b32      	ldr	r3, [pc, #200]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4a31      	ldr	r2, [pc, #196]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003776:	60d3      	str	r3, [r2, #12]
 8003778:	e011      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800377e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003782:	d10c      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3304      	adds	r3, #4
 8003788:	2101      	movs	r1, #1
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f8d8 	bl	8003940 <RCCEx_PLLSAI1_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800379a:	7cfb      	ldrb	r3, [r7, #19]
 800379c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d028      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037aa:	4b23      	ldr	r3, [pc, #140]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b8:	491f      	ldr	r1, [pc, #124]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037c8:	d106      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037d4:	60d3      	str	r3, [r2, #12]
 80037d6:	e011      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037e0:	d10c      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	2101      	movs	r1, #1
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f8a9 	bl	8003940 <RCCEx_PLLSAI1_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037f8:	7cfb      	ldrb	r3, [r7, #19]
 80037fa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d02b      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003808:	4b0b      	ldr	r3, [pc, #44]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800380e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003816:	4908      	ldr	r1, [pc, #32]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003822:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003826:	d109      	bne.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003828:	4b03      	ldr	r3, [pc, #12]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	4a02      	ldr	r2, [pc, #8]	@ (8003838 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003832:	60d3      	str	r3, [r2, #12]
 8003834:	e014      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003840:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003844:	d10c      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3304      	adds	r3, #4
 800384a:	2101      	movs	r1, #1
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f877 	bl	8003940 <RCCEx_PLLSAI1_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003856:	7cfb      	ldrb	r3, [r7, #19]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800385c:	7cfb      	ldrb	r3, [r7, #19]
 800385e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d02f      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800386c:	4b2b      	ldr	r3, [pc, #172]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003872:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800387a:	4928      	ldr	r1, [pc, #160]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003886:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800388a:	d10d      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	2102      	movs	r1, #2
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f854 	bl	8003940 <RCCEx_PLLSAI1_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d014      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038a2:	7cfb      	ldrb	r3, [r7, #19]
 80038a4:	74bb      	strb	r3, [r7, #18]
 80038a6:	e011      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3320      	adds	r3, #32
 80038b6:	2102      	movs	r1, #2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f935 	bl	8003b28 <RCCEx_PLLSAI2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038d8:	4b10      	ldr	r3, [pc, #64]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038e6:	490d      	ldr	r1, [pc, #52]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038fa:	4b08      	ldr	r3, [pc, #32]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800390a:	4904      	ldr	r1, [pc, #16]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003912:	7cbb      	ldrb	r3, [r7, #18]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40021000 	.word	0x40021000

08003920 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003924:	4b05      	ldr	r3, [pc, #20]	@ (800393c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a04      	ldr	r2, [pc, #16]	@ (800393c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6013      	str	r3, [r2, #0]
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000

08003940 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800394e:	4b75      	ldr	r3, [pc, #468]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d018      	beq.n	800398c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800395a:	4b72      	ldr	r3, [pc, #456]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0203 	and.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d10d      	bne.n	8003986 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
       ||
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003972:	4b6c      	ldr	r3, [pc, #432]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
       ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d047      	beq.n	8003a16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
 800398a:	e044      	b.n	8003a16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d018      	beq.n	80039c6 <RCCEx_PLLSAI1_Config+0x86>
 8003994:	2b03      	cmp	r3, #3
 8003996:	d825      	bhi.n	80039e4 <RCCEx_PLLSAI1_Config+0xa4>
 8003998:	2b01      	cmp	r3, #1
 800399a:	d002      	beq.n	80039a2 <RCCEx_PLLSAI1_Config+0x62>
 800399c:	2b02      	cmp	r3, #2
 800399e:	d009      	beq.n	80039b4 <RCCEx_PLLSAI1_Config+0x74>
 80039a0:	e020      	b.n	80039e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039a2:	4b60      	ldr	r3, [pc, #384]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d11d      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b2:	e01a      	b.n	80039ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039b4:	4b5b      	ldr	r3, [pc, #364]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d116      	bne.n	80039ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039c4:	e013      	b.n	80039ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039c6:	4b57      	ldr	r3, [pc, #348]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10f      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039d2:	4b54      	ldr	r3, [pc, #336]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039e2:	e006      	b.n	80039f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      break;
 80039e8:	e004      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10d      	bne.n	8003a16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	4944      	ldr	r1, [pc, #272]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d17d      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a1c:	4b41      	ldr	r3, [pc, #260]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a40      	ldr	r2, [pc, #256]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a28:	f7fd feb8 	bl	800179c <HAL_GetTick>
 8003a2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a2e:	e009      	b.n	8003a44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a30:	f7fd feb4 	bl	800179c <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d902      	bls.n	8003a44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	73fb      	strb	r3, [r7, #15]
        break;
 8003a42:	e005      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a44:	4b37      	ldr	r3, [pc, #220]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ef      	bne.n	8003a30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d160      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d111      	bne.n	8003a80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a5c:	4b31      	ldr	r3, [pc, #196]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6892      	ldr	r2, [r2, #8]
 8003a6c:	0211      	lsls	r1, r2, #8
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	68d2      	ldr	r2, [r2, #12]
 8003a72:	0912      	lsrs	r2, r2, #4
 8003a74:	0452      	lsls	r2, r2, #17
 8003a76:	430a      	orrs	r2, r1
 8003a78:	492a      	ldr	r1, [pc, #168]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	610b      	str	r3, [r1, #16]
 8003a7e:	e027      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d112      	bne.n	8003aac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a86:	4b27      	ldr	r3, [pc, #156]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a8e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6892      	ldr	r2, [r2, #8]
 8003a96:	0211      	lsls	r1, r2, #8
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6912      	ldr	r2, [r2, #16]
 8003a9c:	0852      	lsrs	r2, r2, #1
 8003a9e:	3a01      	subs	r2, #1
 8003aa0:	0552      	lsls	r2, r2, #21
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	491f      	ldr	r1, [pc, #124]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	610b      	str	r3, [r1, #16]
 8003aaa:	e011      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003aac:	4b1d      	ldr	r3, [pc, #116]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ab4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6892      	ldr	r2, [r2, #8]
 8003abc:	0211      	lsls	r1, r2, #8
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6952      	ldr	r2, [r2, #20]
 8003ac2:	0852      	lsrs	r2, r2, #1
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	0652      	lsls	r2, r2, #25
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	4916      	ldr	r1, [pc, #88]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ad0:	4b14      	ldr	r3, [pc, #80]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ad6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ada:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fd fe5e 	bl	800179c <HAL_GetTick>
 8003ae0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ae2:	e009      	b.n	8003af8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ae4:	f7fd fe5a 	bl	800179c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d902      	bls.n	8003af8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	73fb      	strb	r3, [r7, #15]
          break;
 8003af6:	e005      	b.n	8003b04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003af8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ef      	beq.n	8003ae4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d106      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b0a:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	4904      	ldr	r1, [pc, #16]	@ (8003b24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40021000 	.word	0x40021000

08003b28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b36:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d018      	beq.n	8003b74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b42:	4b67      	ldr	r3, [pc, #412]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0203 	and.w	r2, r3, #3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d10d      	bne.n	8003b6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
       ||
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b5a:	4b61      	ldr	r3, [pc, #388]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
       ||
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d047      	beq.n	8003bfe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e044      	b.n	8003bfe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d018      	beq.n	8003bae <RCCEx_PLLSAI2_Config+0x86>
 8003b7c:	2b03      	cmp	r3, #3
 8003b7e:	d825      	bhi.n	8003bcc <RCCEx_PLLSAI2_Config+0xa4>
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d002      	beq.n	8003b8a <RCCEx_PLLSAI2_Config+0x62>
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d009      	beq.n	8003b9c <RCCEx_PLLSAI2_Config+0x74>
 8003b88:	e020      	b.n	8003bcc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b8a:	4b55      	ldr	r3, [pc, #340]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11d      	bne.n	8003bd2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b9a:	e01a      	b.n	8003bd2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b9c:	4b50      	ldr	r3, [pc, #320]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d116      	bne.n	8003bd6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bac:	e013      	b.n	8003bd6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003bae:	4b4c      	ldr	r3, [pc, #304]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10f      	bne.n	8003bda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bba:	4b49      	ldr	r3, [pc, #292]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003bca:	e006      	b.n	8003bda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd0:	e004      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bd2:	bf00      	nop
 8003bd4:	e002      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bd6:	bf00      	nop
 8003bd8:	e000      	b.n	8003bdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bda:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10d      	bne.n	8003bfe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003be2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	4939      	ldr	r1, [pc, #228]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bfe:	7bfb      	ldrb	r3, [r7, #15]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d167      	bne.n	8003cd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c04:	4b36      	ldr	r3, [pc, #216]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a35      	ldr	r2, [pc, #212]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c10:	f7fd fdc4 	bl	800179c <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c16:	e009      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c18:	f7fd fdc0 	bl	800179c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d902      	bls.n	8003c2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	73fb      	strb	r3, [r7, #15]
        break;
 8003c2a:	e005      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ef      	bne.n	8003c18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d14a      	bne.n	8003cd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d111      	bne.n	8003c68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c44:	4b26      	ldr	r3, [pc, #152]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6892      	ldr	r2, [r2, #8]
 8003c54:	0211      	lsls	r1, r2, #8
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	68d2      	ldr	r2, [r2, #12]
 8003c5a:	0912      	lsrs	r2, r2, #4
 8003c5c:	0452      	lsls	r2, r2, #17
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	491f      	ldr	r1, [pc, #124]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	614b      	str	r3, [r1, #20]
 8003c66:	e011      	b.n	8003c8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c68:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003c70:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6892      	ldr	r2, [r2, #8]
 8003c78:	0211      	lsls	r1, r2, #8
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6912      	ldr	r2, [r2, #16]
 8003c7e:	0852      	lsrs	r2, r2, #1
 8003c80:	3a01      	subs	r2, #1
 8003c82:	0652      	lsls	r2, r2, #25
 8003c84:	430a      	orrs	r2, r1
 8003c86:	4916      	ldr	r1, [pc, #88]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a13      	ldr	r2, [pc, #76]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c98:	f7fd fd80 	bl	800179c <HAL_GetTick>
 8003c9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c9e:	e009      	b.n	8003cb4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ca0:	f7fd fd7c 	bl	800179c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d902      	bls.n	8003cb4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	73fb      	strb	r3, [r7, #15]
          break;
 8003cb2:	e005      	b.n	8003cc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0ef      	beq.n	8003ca0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d106      	bne.n	8003cd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cc6:	4b06      	ldr	r3, [pc, #24]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4904      	ldr	r1, [pc, #16]	@ (8003ce0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000

08003ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e095      	b.n	8003e22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d06:	d009      	beq.n	8003d1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	61da      	str	r2, [r3, #28]
 8003d0e:	e005      	b.n	8003d1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd fab0 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d5c:	d902      	bls.n	8003d64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e002      	b.n	8003d6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003d72:	d007      	beq.n	8003d84 <HAL_SPI_Init+0xa0>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d7c:	d002      	beq.n	8003d84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	431a      	orrs	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003db2:	431a      	orrs	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc6:	ea42 0103 	orr.w	r1, r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	0c1b      	lsrs	r3, r3, #16
 8003de0:	f003 0204 	and.w	r2, r3, #4
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	431a      	orrs	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e00:	ea42 0103 	orr.w	r1, r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e040      	b.n	8003ebe <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d106      	bne.n	8003e52 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7fd fa69 	bl	8001324 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2224      	movs	r2, #36	@ 0x24
 8003e56:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0201 	bic.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fae1 	bl	8004438 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f826 	bl	8003ec8 <UART_SetConfig>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e01b      	b.n	8003ebe <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ea4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fb60 	bl	800457c <UART_CheckIdleState>
 8003ebc:	4603      	mov	r3, r0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ecc:	b08a      	sub	sp, #40	@ 0x28
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689a      	ldr	r2, [r3, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4ba4      	ldr	r3, [pc, #656]	@ (8004188 <UART_SetConfig+0x2c0>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a99      	ldr	r2, [pc, #612]	@ (800418c <UART_SetConfig+0x2c4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d004      	beq.n	8003f34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f30:	4313      	orrs	r3, r2
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a90      	ldr	r2, [pc, #576]	@ (8004190 <UART_SetConfig+0x2c8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d126      	bne.n	8003fa0 <UART_SetConfig+0xd8>
 8003f52:	4b90      	ldr	r3, [pc, #576]	@ (8004194 <UART_SetConfig+0x2cc>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d81b      	bhi.n	8003f98 <UART_SetConfig+0xd0>
 8003f60:	a201      	add	r2, pc, #4	@ (adr r2, 8003f68 <UART_SetConfig+0xa0>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f79 	.word	0x08003f79
 8003f6c:	08003f89 	.word	0x08003f89
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f91 	.word	0x08003f91
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f7e:	e116      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003f80:	2302      	movs	r3, #2
 8003f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f86:	e112      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f8e:	e10e      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003f90:	2308      	movs	r3, #8
 8003f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f96:	e10a      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003f98:	2310      	movs	r3, #16
 8003f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f9e:	e106      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7c      	ldr	r2, [pc, #496]	@ (8004198 <UART_SetConfig+0x2d0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d138      	bne.n	800401c <UART_SetConfig+0x154>
 8003faa:	4b7a      	ldr	r3, [pc, #488]	@ (8004194 <UART_SetConfig+0x2cc>)
 8003fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b0c      	cmp	r3, #12
 8003fb6:	d82d      	bhi.n	8004014 <UART_SetConfig+0x14c>
 8003fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc0 <UART_SetConfig+0xf8>)
 8003fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbe:	bf00      	nop
 8003fc0:	08003ff5 	.word	0x08003ff5
 8003fc4:	08004015 	.word	0x08004015
 8003fc8:	08004015 	.word	0x08004015
 8003fcc:	08004015 	.word	0x08004015
 8003fd0:	08004005 	.word	0x08004005
 8003fd4:	08004015 	.word	0x08004015
 8003fd8:	08004015 	.word	0x08004015
 8003fdc:	08004015 	.word	0x08004015
 8003fe0:	08003ffd 	.word	0x08003ffd
 8003fe4:	08004015 	.word	0x08004015
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	08004015 	.word	0x08004015
 8003ff0:	0800400d 	.word	0x0800400d
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ffa:	e0d8      	b.n	80041ae <UART_SetConfig+0x2e6>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004002:	e0d4      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004004:	2304      	movs	r3, #4
 8004006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800400a:	e0d0      	b.n	80041ae <UART_SetConfig+0x2e6>
 800400c:	2308      	movs	r3, #8
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004012:	e0cc      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004014:	2310      	movs	r3, #16
 8004016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800401a:	e0c8      	b.n	80041ae <UART_SetConfig+0x2e6>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5e      	ldr	r2, [pc, #376]	@ (800419c <UART_SetConfig+0x2d4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d125      	bne.n	8004072 <UART_SetConfig+0x1aa>
 8004026:	4b5b      	ldr	r3, [pc, #364]	@ (8004194 <UART_SetConfig+0x2cc>)
 8004028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004030:	2b30      	cmp	r3, #48	@ 0x30
 8004032:	d016      	beq.n	8004062 <UART_SetConfig+0x19a>
 8004034:	2b30      	cmp	r3, #48	@ 0x30
 8004036:	d818      	bhi.n	800406a <UART_SetConfig+0x1a2>
 8004038:	2b20      	cmp	r3, #32
 800403a:	d00a      	beq.n	8004052 <UART_SetConfig+0x18a>
 800403c:	2b20      	cmp	r3, #32
 800403e:	d814      	bhi.n	800406a <UART_SetConfig+0x1a2>
 8004040:	2b00      	cmp	r3, #0
 8004042:	d002      	beq.n	800404a <UART_SetConfig+0x182>
 8004044:	2b10      	cmp	r3, #16
 8004046:	d008      	beq.n	800405a <UART_SetConfig+0x192>
 8004048:	e00f      	b.n	800406a <UART_SetConfig+0x1a2>
 800404a:	2300      	movs	r3, #0
 800404c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004050:	e0ad      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004052:	2302      	movs	r3, #2
 8004054:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004058:	e0a9      	b.n	80041ae <UART_SetConfig+0x2e6>
 800405a:	2304      	movs	r3, #4
 800405c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004060:	e0a5      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004062:	2308      	movs	r3, #8
 8004064:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004068:	e0a1      	b.n	80041ae <UART_SetConfig+0x2e6>
 800406a:	2310      	movs	r3, #16
 800406c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004070:	e09d      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a4a      	ldr	r2, [pc, #296]	@ (80041a0 <UART_SetConfig+0x2d8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d125      	bne.n	80040c8 <UART_SetConfig+0x200>
 800407c:	4b45      	ldr	r3, [pc, #276]	@ (8004194 <UART_SetConfig+0x2cc>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004082:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004086:	2bc0      	cmp	r3, #192	@ 0xc0
 8004088:	d016      	beq.n	80040b8 <UART_SetConfig+0x1f0>
 800408a:	2bc0      	cmp	r3, #192	@ 0xc0
 800408c:	d818      	bhi.n	80040c0 <UART_SetConfig+0x1f8>
 800408e:	2b80      	cmp	r3, #128	@ 0x80
 8004090:	d00a      	beq.n	80040a8 <UART_SetConfig+0x1e0>
 8004092:	2b80      	cmp	r3, #128	@ 0x80
 8004094:	d814      	bhi.n	80040c0 <UART_SetConfig+0x1f8>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <UART_SetConfig+0x1d8>
 800409a:	2b40      	cmp	r3, #64	@ 0x40
 800409c:	d008      	beq.n	80040b0 <UART_SetConfig+0x1e8>
 800409e:	e00f      	b.n	80040c0 <UART_SetConfig+0x1f8>
 80040a0:	2300      	movs	r3, #0
 80040a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a6:	e082      	b.n	80041ae <UART_SetConfig+0x2e6>
 80040a8:	2302      	movs	r3, #2
 80040aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ae:	e07e      	b.n	80041ae <UART_SetConfig+0x2e6>
 80040b0:	2304      	movs	r3, #4
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b6:	e07a      	b.n	80041ae <UART_SetConfig+0x2e6>
 80040b8:	2308      	movs	r3, #8
 80040ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040be:	e076      	b.n	80041ae <UART_SetConfig+0x2e6>
 80040c0:	2310      	movs	r3, #16
 80040c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040c6:	e072      	b.n	80041ae <UART_SetConfig+0x2e6>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a35      	ldr	r2, [pc, #212]	@ (80041a4 <UART_SetConfig+0x2dc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d12a      	bne.n	8004128 <UART_SetConfig+0x260>
 80040d2:	4b30      	ldr	r3, [pc, #192]	@ (8004194 <UART_SetConfig+0x2cc>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e0:	d01a      	beq.n	8004118 <UART_SetConfig+0x250>
 80040e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040e6:	d81b      	bhi.n	8004120 <UART_SetConfig+0x258>
 80040e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040ec:	d00c      	beq.n	8004108 <UART_SetConfig+0x240>
 80040ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040f2:	d815      	bhi.n	8004120 <UART_SetConfig+0x258>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <UART_SetConfig+0x238>
 80040f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040fc:	d008      	beq.n	8004110 <UART_SetConfig+0x248>
 80040fe:	e00f      	b.n	8004120 <UART_SetConfig+0x258>
 8004100:	2300      	movs	r3, #0
 8004102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004106:	e052      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004108:	2302      	movs	r3, #2
 800410a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410e:	e04e      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004110:	2304      	movs	r3, #4
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004116:	e04a      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004118:	2308      	movs	r3, #8
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800411e:	e046      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004120:	2310      	movs	r3, #16
 8004122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004126:	e042      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a17      	ldr	r2, [pc, #92]	@ (800418c <UART_SetConfig+0x2c4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d13a      	bne.n	80041a8 <UART_SetConfig+0x2e0>
 8004132:	4b18      	ldr	r3, [pc, #96]	@ (8004194 <UART_SetConfig+0x2cc>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004138:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800413c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004140:	d01a      	beq.n	8004178 <UART_SetConfig+0x2b0>
 8004142:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004146:	d81b      	bhi.n	8004180 <UART_SetConfig+0x2b8>
 8004148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800414c:	d00c      	beq.n	8004168 <UART_SetConfig+0x2a0>
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004152:	d815      	bhi.n	8004180 <UART_SetConfig+0x2b8>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <UART_SetConfig+0x298>
 8004158:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800415c:	d008      	beq.n	8004170 <UART_SetConfig+0x2a8>
 800415e:	e00f      	b.n	8004180 <UART_SetConfig+0x2b8>
 8004160:	2300      	movs	r3, #0
 8004162:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004166:	e022      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004168:	2302      	movs	r3, #2
 800416a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416e:	e01e      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004170:	2304      	movs	r3, #4
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004176:	e01a      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004178:	2308      	movs	r3, #8
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800417e:	e016      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004180:	2310      	movs	r3, #16
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004186:	e012      	b.n	80041ae <UART_SetConfig+0x2e6>
 8004188:	efff69f3 	.word	0xefff69f3
 800418c:	40008000 	.word	0x40008000
 8004190:	40013800 	.word	0x40013800
 8004194:	40021000 	.word	0x40021000
 8004198:	40004400 	.word	0x40004400
 800419c:	40004800 	.word	0x40004800
 80041a0:	40004c00 	.word	0x40004c00
 80041a4:	40005000 	.word	0x40005000
 80041a8:	2310      	movs	r3, #16
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a9f      	ldr	r2, [pc, #636]	@ (8004430 <UART_SetConfig+0x568>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d17a      	bne.n	80042ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d824      	bhi.n	800420a <UART_SetConfig+0x342>
 80041c0:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <UART_SetConfig+0x300>)
 80041c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c6:	bf00      	nop
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	0800420b 	.word	0x0800420b
 80041d0:	080041f5 	.word	0x080041f5
 80041d4:	0800420b 	.word	0x0800420b
 80041d8:	080041fb 	.word	0x080041fb
 80041dc:	0800420b 	.word	0x0800420b
 80041e0:	0800420b 	.word	0x0800420b
 80041e4:	0800420b 	.word	0x0800420b
 80041e8:	08004203 	.word	0x08004203
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7ff f822 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 80041f0:	61f8      	str	r0, [r7, #28]
        break;
 80041f2:	e010      	b.n	8004216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004434 <UART_SetConfig+0x56c>)
 80041f6:	61fb      	str	r3, [r7, #28]
        break;
 80041f8:	e00d      	b.n	8004216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fa:	f7fe ff83 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 80041fe:	61f8      	str	r0, [r7, #28]
        break;
 8004200:	e009      	b.n	8004216 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004202:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004206:	61fb      	str	r3, [r7, #28]
        break;
 8004208:	e005      	b.n	8004216 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004214:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80fb 	beq.w	8004414 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	4413      	add	r3, r2
 8004228:	69fa      	ldr	r2, [r7, #28]
 800422a:	429a      	cmp	r2, r3
 800422c:	d305      	bcc.n	800423a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004234:	69fa      	ldr	r2, [r7, #28]
 8004236:	429a      	cmp	r2, r3
 8004238:	d903      	bls.n	8004242 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004240:	e0e8      	b.n	8004414 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	2200      	movs	r2, #0
 8004246:	461c      	mov	r4, r3
 8004248:	4615      	mov	r5, r2
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	022b      	lsls	r3, r5, #8
 8004254:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004258:	0222      	lsls	r2, r4, #8
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	6849      	ldr	r1, [r1, #4]
 800425e:	0849      	lsrs	r1, r1, #1
 8004260:	2000      	movs	r0, #0
 8004262:	4688      	mov	r8, r1
 8004264:	4681      	mov	r9, r0
 8004266:	eb12 0a08 	adds.w	sl, r2, r8
 800426a:	eb43 0b09 	adc.w	fp, r3, r9
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	607a      	str	r2, [r7, #4]
 8004278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800427c:	4650      	mov	r0, sl
 800427e:	4659      	mov	r1, fp
 8004280:	f7fb ffa2 	bl	80001c8 <__aeabi_uldivmod>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4613      	mov	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004292:	d308      	bcc.n	80042a6 <UART_SetConfig+0x3de>
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800429a:	d204      	bcs.n	80042a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	60da      	str	r2, [r3, #12]
 80042a4:	e0b6      	b.n	8004414 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042ac:	e0b2      	b.n	8004414 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042b6:	d15e      	bne.n	8004376 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80042b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d828      	bhi.n	8004312 <UART_SetConfig+0x44a>
 80042c0:	a201      	add	r2, pc, #4	@ (adr r2, 80042c8 <UART_SetConfig+0x400>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042ed 	.word	0x080042ed
 80042cc:	080042f5 	.word	0x080042f5
 80042d0:	080042fd 	.word	0x080042fd
 80042d4:	08004313 	.word	0x08004313
 80042d8:	08004303 	.word	0x08004303
 80042dc:	08004313 	.word	0x08004313
 80042e0:	08004313 	.word	0x08004313
 80042e4:	08004313 	.word	0x08004313
 80042e8:	0800430b 	.word	0x0800430b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042ec:	f7fe ffa2 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 80042f0:	61f8      	str	r0, [r7, #28]
        break;
 80042f2:	e014      	b.n	800431e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f4:	f7fe ffb4 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 80042f8:	61f8      	str	r0, [r7, #28]
        break;
 80042fa:	e010      	b.n	800431e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042fc:	4b4d      	ldr	r3, [pc, #308]	@ (8004434 <UART_SetConfig+0x56c>)
 80042fe:	61fb      	str	r3, [r7, #28]
        break;
 8004300:	e00d      	b.n	800431e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004302:	f7fe feff 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 8004306:	61f8      	str	r0, [r7, #28]
        break;
 8004308:	e009      	b.n	800431e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800430e:	61fb      	str	r3, [r7, #28]
        break;
 8004310:	e005      	b.n	800431e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004312:	2300      	movs	r3, #0
 8004314:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800431c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d077      	beq.n	8004414 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	005a      	lsls	r2, r3, #1
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	441a      	add	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	2b0f      	cmp	r3, #15
 800433e:	d916      	bls.n	800436e <UART_SetConfig+0x4a6>
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004346:	d212      	bcs.n	800436e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f023 030f 	bic.w	r3, r3, #15
 8004350:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	085b      	lsrs	r3, r3, #1
 8004356:	b29b      	uxth	r3, r3
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	b29a      	uxth	r2, r3
 800435e:	8afb      	ldrh	r3, [r7, #22]
 8004360:	4313      	orrs	r3, r2
 8004362:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	8afa      	ldrh	r2, [r7, #22]
 800436a:	60da      	str	r2, [r3, #12]
 800436c:	e052      	b.n	8004414 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004374:	e04e      	b.n	8004414 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004376:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800437a:	2b08      	cmp	r3, #8
 800437c:	d827      	bhi.n	80043ce <UART_SetConfig+0x506>
 800437e:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <UART_SetConfig+0x4bc>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043a9 	.word	0x080043a9
 8004388:	080043b1 	.word	0x080043b1
 800438c:	080043b9 	.word	0x080043b9
 8004390:	080043cf 	.word	0x080043cf
 8004394:	080043bf 	.word	0x080043bf
 8004398:	080043cf 	.word	0x080043cf
 800439c:	080043cf 	.word	0x080043cf
 80043a0:	080043cf 	.word	0x080043cf
 80043a4:	080043c7 	.word	0x080043c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043a8:	f7fe ff44 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 80043ac:	61f8      	str	r0, [r7, #28]
        break;
 80043ae:	e014      	b.n	80043da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043b0:	f7fe ff56 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 80043b4:	61f8      	str	r0, [r7, #28]
        break;
 80043b6:	e010      	b.n	80043da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004434 <UART_SetConfig+0x56c>)
 80043ba:	61fb      	str	r3, [r7, #28]
        break;
 80043bc:	e00d      	b.n	80043da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043be:	f7fe fea1 	bl	8003104 <HAL_RCC_GetSysClockFreq>
 80043c2:	61f8      	str	r0, [r7, #28]
        break;
 80043c4:	e009      	b.n	80043da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ca:	61fb      	str	r3, [r7, #28]
        break;
 80043cc:	e005      	b.n	80043da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80043ce:	2300      	movs	r3, #0
 80043d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043d8:	bf00      	nop
    }

    if (pclk != 0U)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d019      	beq.n	8004414 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	085a      	lsrs	r2, r3, #1
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	441a      	add	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	2b0f      	cmp	r3, #15
 80043f8:	d909      	bls.n	800440e <UART_SetConfig+0x546>
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004400:	d205      	bcs.n	800440e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60da      	str	r2, [r3, #12]
 800440c:	e002      	b.n	8004414 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004420:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004424:	4618      	mov	r0, r3
 8004426:	3728      	adds	r7, #40	@ 0x28
 8004428:	46bd      	mov	sp, r7
 800442a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800442e:	bf00      	nop
 8004430:	40008000 	.word	0x40008000
 8004434:	00f42400 	.word	0x00f42400

08004438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	f003 0304 	and.w	r3, r3, #4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	f003 0310 	and.w	r3, r3, #16
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01a      	beq.n	800454e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004536:	d10a      	bne.n	800454e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	605a      	str	r2, [r3, #4]
  }
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b098      	sub	sp, #96	@ 0x60
 8004580:	af02      	add	r7, sp, #8
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800458c:	f7fd f906 	bl	800179c <HAL_GetTick>
 8004590:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b08      	cmp	r3, #8
 800459e:	d12e      	bne.n	80045fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045a8:	2200      	movs	r2, #0
 80045aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f88c 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d021      	beq.n	80045fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	461a      	mov	r2, r3
 80045d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e6      	bne.n	80045ba <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e062      	b.n	80046c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b04      	cmp	r3, #4
 800460a:	d149      	bne.n	80046a0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800460c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004614:	2200      	movs	r2, #0
 8004616:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f856 	bl	80046cc <UART_WaitOnFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d03c      	beq.n	80046a0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	623b      	str	r3, [r7, #32]
   return(result);
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800463a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004644:	633b      	str	r3, [r7, #48]	@ 0x30
 8004646:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800464a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e6      	bne.n	8004626 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3308      	adds	r3, #8
 800465e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	60fb      	str	r3, [r7, #12]
   return(result);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3308      	adds	r3, #8
 8004676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004678:	61fa      	str	r2, [r7, #28]
 800467a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	69b9      	ldr	r1, [r7, #24]
 800467e:	69fa      	ldr	r2, [r7, #28]
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	617b      	str	r3, [r7, #20]
   return(result);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e5      	bne.n	8004658 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e011      	b.n	80046c4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3758      	adds	r7, #88	@ 0x58
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	4613      	mov	r3, r2
 80046da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046dc:	e04f      	b.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d04b      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fd f859 	bl	800179c <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <UART_WaitOnFlagUntilTimeout+0x30>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e04e      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d037      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	2b80      	cmp	r3, #128	@ 0x80
 8004712:	d034      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2b40      	cmp	r3, #64	@ 0x40
 8004718:	d031      	beq.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b08      	cmp	r3, #8
 8004726:	d110      	bne.n	800474a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2208      	movs	r2, #8
 800472e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f838 	bl	80047a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2208      	movs	r2, #8
 800473a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e029      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004754:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004758:	d111      	bne.n	800477e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004762:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f81e 	bl	80047a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e00f      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	461a      	mov	r2, r3
 8004796:	79fb      	ldrb	r3, [r7, #7]
 8004798:	429a      	cmp	r2, r3
 800479a:	d0a0      	beq.n	80046de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b095      	sub	sp, #84	@ 0x54
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047b6:	e853 3f00 	ldrex	r3, [r3]
 80047ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80047ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047d4:	e841 2300 	strex	r3, r2, [r1]
 80047d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1e6      	bne.n	80047ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	f023 0301 	bic.w	r3, r3, #1
 80047f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3308      	adds	r3, #8
 80047fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004818:	2b01      	cmp	r3, #1
 800481a:	d118      	bne.n	800484e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	60bb      	str	r3, [r7, #8]
   return(result);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f023 0310 	bic.w	r3, r3, #16
 8004830:	647b      	str	r3, [r7, #68]	@ 0x44
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	461a      	mov	r2, r3
 8004838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	6979      	ldr	r1, [r7, #20]
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	613b      	str	r3, [r7, #16]
   return(result);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e6      	bne.n	800481c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004862:	bf00      	nop
 8004864:	3754      	adds	r7, #84	@ 0x54
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800486e:	b084      	sub	sp, #16
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	f107 001c 	add.w	r0, r7, #28
 800487c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fa69 	bl	8004d64 <USB_CoreReset>
 8004892:	4603      	mov	r3, r0
 8004894:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8004896:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80048aa:	e005      	b.n	80048b8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048c4:	b004      	add	sp, #16
 80048c6:	4770      	bx	lr

080048c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 0201 	bic.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d115      	bne.n	8004938 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004918:	200a      	movs	r0, #10
 800491a:	f7fc ff4b 	bl	80017b4 <HAL_Delay>
      ms += 10U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	330a      	adds	r3, #10
 8004922:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fa0f 	bl	8004d48 <USB_GetMode>
 800492a:	4603      	mov	r3, r0
 800492c:	2b01      	cmp	r3, #1
 800492e:	d01e      	beq.n	800496e <USB_SetCurrentMode+0x84>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2bc7      	cmp	r3, #199	@ 0xc7
 8004934:	d9f0      	bls.n	8004918 <USB_SetCurrentMode+0x2e>
 8004936:	e01a      	b.n	800496e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d115      	bne.n	800496a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800494a:	200a      	movs	r0, #10
 800494c:	f7fc ff32 	bl	80017b4 <HAL_Delay>
      ms += 10U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	330a      	adds	r3, #10
 8004954:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f9f6 	bl	8004d48 <USB_GetMode>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <USB_SetCurrentMode+0x84>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2bc7      	cmp	r3, #199	@ 0xc7
 8004966:	d9f0      	bls.n	800494a <USB_SetCurrentMode+0x60>
 8004968:	e001      	b.n	800496e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e005      	b.n	800497a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2bc8      	cmp	r3, #200	@ 0xc8
 8004972:	d101      	bne.n	8004978 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004984:	b084      	sub	sp, #16
 8004986:	b580      	push	{r7, lr}
 8004988:	b086      	sub	sp, #24
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004992:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800499e:	2300      	movs	r3, #0
 80049a0:	613b      	str	r3, [r7, #16]
 80049a2:	e009      	b.n	80049b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3340      	adds	r3, #64	@ 0x40
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	2200      	movs	r2, #0
 80049b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	3301      	adds	r3, #1
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b0e      	cmp	r3, #14
 80049bc:	d9f2      	bls.n	80049a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d11c      	bne.n	8004a00 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
 80049fe:	e005      	b.n	8004a0c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a04:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a12:	461a      	mov	r2, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a18:	2103      	movs	r1, #3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f95a 	bl	8004cd4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a20:	2110      	movs	r1, #16
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f8f6 	bl	8004c14 <USB_FlushTxFifo>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 f920 	bl	8004c78 <USB_FlushRxFifo>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a48:	461a      	mov	r2, r3
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a54:	461a      	mov	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a60:	461a      	mov	r2, r3
 8004a62:	2300      	movs	r3, #0
 8004a64:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a66:	2300      	movs	r3, #0
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	e043      	b.n	8004af4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a82:	d118      	bne.n	8004ab6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a96:	461a      	mov	r2, r3
 8004a98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e013      	b.n	8004ac8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aac:	461a      	mov	r2, r3
 8004aae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	e008      	b.n	8004ac8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004aec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3301      	adds	r3, #1
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004af8:	461a      	mov	r2, r3
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d3b5      	bcc.n	8004a6c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	e043      	b.n	8004b8e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	015a      	lsls	r2, r3, #5
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b1c:	d118      	bne.n	8004b50 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b30:	461a      	mov	r2, r3
 8004b32:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	e013      	b.n	8004b62 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	015a      	lsls	r2, r3, #5
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4413      	add	r3, r2
 8004b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b46:	461a      	mov	r2, r3
 8004b48:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	e008      	b.n	8004b62 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	2300      	movs	r3, #0
 8004b60:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b80:	461a      	mov	r2, r3
 8004b82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b92:	461a      	mov	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d3b5      	bcc.n	8004b06 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004bba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	f043 0210 	orr.w	r2, r3, #16
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699a      	ldr	r2, [r3, #24]
 8004bcc:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <USB_DevInit+0x28c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bd4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f043 0208 	orr.w	r2, r3, #8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004be8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bf8:	f043 0304 	orr.w	r3, r3, #4
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c0c:	b004      	add	sp, #16
 8004c0e:	4770      	bx	lr
 8004c10:	803c3800 	.word	0x803c3800

08004c14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3301      	adds	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c2e:	d901      	bls.n	8004c34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e01b      	b.n	8004c6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	daf2      	bge.n	8004c22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	019b      	lsls	r3, r3, #6
 8004c44:	f043 0220 	orr.w	r2, r3, #32
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c58:	d901      	bls.n	8004c5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e006      	b.n	8004c6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d0f0      	beq.n	8004c4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	3301      	adds	r3, #1
 8004c88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c90:	d901      	bls.n	8004c96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e018      	b.n	8004cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	daf2      	bge.n	8004c84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3301      	adds	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cb4:	d901      	bls.n	8004cba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e006      	b.n	8004cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b10      	cmp	r3, #16
 8004cc4:	d0f0      	beq.n	8004ca8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	68f9      	ldr	r1, [r7, #12]
 8004cf0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d20:	f023 0303 	bic.w	r3, r3, #3
 8004d24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d34:	f043 0302 	orr.w	r3, r3, #2
 8004d38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	f003 0301 	and.w	r3, r3, #1
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	3301      	adds	r3, #1
 8004d74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d7c:	d901      	bls.n	8004d82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e01b      	b.n	8004dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	daf2      	bge.n	8004d70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f043 0201 	orr.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004da6:	d901      	bls.n	8004dac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e006      	b.n	8004dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d0f0      	beq.n	8004d9a <USB_CoreReset+0x36>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <memset>:
 8004dc6:	4402      	add	r2, r0
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d100      	bne.n	8004dd0 <memset+0xa>
 8004dce:	4770      	bx	lr
 8004dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd4:	e7f9      	b.n	8004dca <memset+0x4>
	...

08004dd8 <__libc_init_array>:
 8004dd8:	b570      	push	{r4, r5, r6, lr}
 8004dda:	4d0d      	ldr	r5, [pc, #52]	@ (8004e10 <__libc_init_array+0x38>)
 8004ddc:	4c0d      	ldr	r4, [pc, #52]	@ (8004e14 <__libc_init_array+0x3c>)
 8004dde:	1b64      	subs	r4, r4, r5
 8004de0:	10a4      	asrs	r4, r4, #2
 8004de2:	2600      	movs	r6, #0
 8004de4:	42a6      	cmp	r6, r4
 8004de6:	d109      	bne.n	8004dfc <__libc_init_array+0x24>
 8004de8:	4d0b      	ldr	r5, [pc, #44]	@ (8004e18 <__libc_init_array+0x40>)
 8004dea:	4c0c      	ldr	r4, [pc, #48]	@ (8004e1c <__libc_init_array+0x44>)
 8004dec:	f000 f818 	bl	8004e20 <_init>
 8004df0:	1b64      	subs	r4, r4, r5
 8004df2:	10a4      	asrs	r4, r4, #2
 8004df4:	2600      	movs	r6, #0
 8004df6:	42a6      	cmp	r6, r4
 8004df8:	d105      	bne.n	8004e06 <__libc_init_array+0x2e>
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}
 8004dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e00:	4798      	blx	r3
 8004e02:	3601      	adds	r6, #1
 8004e04:	e7ee      	b.n	8004de4 <__libc_init_array+0xc>
 8004e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0a:	4798      	blx	r3
 8004e0c:	3601      	adds	r6, #1
 8004e0e:	e7f2      	b.n	8004df6 <__libc_init_array+0x1e>
 8004e10:	08004e88 	.word	0x08004e88
 8004e14:	08004e88 	.word	0x08004e88
 8004e18:	08004e88 	.word	0x08004e88
 8004e1c:	08004e8c 	.word	0x08004e8c

08004e20 <_init>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr

08004e2c <_fini>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr
