
Practica3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08003964  08003964  00004964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039fc  080039fc  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080039fc  080039fc  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039fc  080039fc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039fc  080039fc  000049fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a00  08003a00  00004a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a04  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08003a10  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08003a10  000050b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a151  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  0000f18d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00010fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a1  00000000  00000000  000119b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dd1  00000000  00000000  00012159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c65e  00000000  00000000  00036f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0965  00000000  00000000  00043588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123eed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002774  00000000  00000000  00123f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001266a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800394c 	.word	0x0800394c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800394c 	.word	0x0800394c

080001c8 <HTS221_UpdateCalibration>:

#define HTS_T1_OUT_LSB 0x3E
#define HTS_T1_OUT_MSB 0x3F


void HTS221_UpdateCalibration(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af04      	add	r7, sp, #16
	uint8_t buffer;
	uint8_t tempMSB;


	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H0_rH_x2, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 80001ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80001d2:	9302      	str	r3, [sp, #8]
 80001d4:	2301      	movs	r3, #1
 80001d6:	9301      	str	r3, [sp, #4]
 80001d8:	1dfb      	adds	r3, r7, #7
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	2301      	movs	r3, #1
 80001de:	2230      	movs	r2, #48	@ 0x30
 80001e0:	21be      	movs	r1, #190	@ 0xbe
 80001e2:	48ad      	ldr	r0, [pc, #692]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 80001e4:	f001 fc2a 	bl	8001a3c <HAL_I2C_Mem_Read>
	hts_cal.H0_rH_x2 = buffer / 2.0f;
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	ee07 3a90 	vmov	s15, r3
 80001ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80001f2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80001f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80001fa:	4ba8      	ldr	r3, [pc, #672]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 80001fc:	edc3 7a00 	vstr	s15, [r3]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H1_rH_x2, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000200:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000204:	9302      	str	r3, [sp, #8]
 8000206:	2301      	movs	r3, #1
 8000208:	9301      	str	r3, [sp, #4]
 800020a:	1dfb      	adds	r3, r7, #7
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2301      	movs	r3, #1
 8000210:	2231      	movs	r2, #49	@ 0x31
 8000212:	21be      	movs	r1, #190	@ 0xbe
 8000214:	48a0      	ldr	r0, [pc, #640]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 8000216:	f001 fc11 	bl	8001a3c <HAL_I2C_Mem_Read>
	hts_cal.H1_rH_x2 = buffer / 2.0f;
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	ee07 3a90 	vmov	s15, r3
 8000220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000224:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800022c:	4b9b      	ldr	r3, [pc, #620]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 800022e:	edc3 7a01 	vstr	s15, [r3, #4]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_T0_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 8000232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000236:	9302      	str	r3, [sp, #8]
 8000238:	2301      	movs	r3, #1
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	1dbb      	adds	r3, r7, #6
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2301      	movs	r3, #1
 8000242:	2235      	movs	r2, #53	@ 0x35
 8000244:	21be      	movs	r1, #190	@ 0xbe
 8000246:	4894      	ldr	r0, [pc, #592]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 8000248:	f001 fbf8 	bl	8001a3c <HAL_I2C_Mem_Read>

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T0_degC_x8, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 800024c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000250:	9302      	str	r3, [sp, #8]
 8000252:	2301      	movs	r3, #1
 8000254:	9301      	str	r3, [sp, #4]
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	9300      	str	r3, [sp, #0]
 800025a:	2301      	movs	r3, #1
 800025c:	2232      	movs	r2, #50	@ 0x32
 800025e:	21be      	movs	r1, #190	@ 0xbe
 8000260:	488d      	ldr	r0, [pc, #564]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 8000262:	f001 fbeb 	bl	8001a3c <HAL_I2C_Mem_Read>
	hts_cal.T0_degC_x8 = (((tempMSB & 0x03) <<8) |  buffer) / 8.0f ;
 8000266:	79bb      	ldrb	r3, [r7, #6]
 8000268:	021b      	lsls	r3, r3, #8
 800026a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	4313      	orrs	r3, r2
 8000272:	ee07 3a90 	vmov	s15, r3
 8000276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800027a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800027e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000282:	4b86      	ldr	r3, [pc, #536]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000284:	edc3 7a02 	vstr	s15, [r3, #8]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_degC_x8, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000288:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800028c:	9302      	str	r3, [sp, #8]
 800028e:	2301      	movs	r3, #1
 8000290:	9301      	str	r3, [sp, #4]
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	9300      	str	r3, [sp, #0]
 8000296:	2301      	movs	r3, #1
 8000298:	2233      	movs	r2, #51	@ 0x33
 800029a:	21be      	movs	r1, #190	@ 0xbe
 800029c:	487e      	ldr	r0, [pc, #504]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 800029e:	f001 fbcd 	bl	8001a3c <HAL_I2C_Mem_Read>
	hts_cal.T1_degC_x8 =  (((tempMSB & 0x0C) <<6) |  buffer) / 8.0f ;
 80002a2:	79bb      	ldrb	r3, [r7, #6]
 80002a4:	019b      	lsls	r3, r3, #6
 80002a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80002aa:	79fa      	ldrb	r2, [r7, #7]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	ee07 3a90 	vmov	s15, r3
 80002b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002b6:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 80002ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80002be:	4b77      	ldr	r3, [pc, #476]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 80002c0:	edc3 7a03 	vstr	s15, [r3, #12]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H0_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 80002c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002c8:	9302      	str	r3, [sp, #8]
 80002ca:	2301      	movs	r3, #1
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	2301      	movs	r3, #1
 80002d4:	2236      	movs	r2, #54	@ 0x36
 80002d6:	21be      	movs	r1, #190	@ 0xbe
 80002d8:	486f      	ldr	r0, [pc, #444]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 80002da:	f001 fbaf 	bl	8001a3c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H0_T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 80002de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2301      	movs	r3, #1
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	1dbb      	adds	r3, r7, #6
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2301      	movs	r3, #1
 80002ee:	2237      	movs	r2, #55	@ 0x37
 80002f0:	21be      	movs	r1, #190	@ 0xbe
 80002f2:	4869      	ldr	r0, [pc, #420]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 80002f4:	f001 fba2 	bl	8001a3c <HAL_I2C_Mem_Read>
	hts_cal.H0_T0_OUT = (tempMSB <<8) |  buffer;
 80002f8:	79bb      	ldrb	r3, [r7, #6]
 80002fa:	021b      	lsls	r3, r3, #8
 80002fc:	b21a      	sxth	r2, r3
 80002fe:	79fb      	ldrb	r3, [r7, #7]
 8000300:	b21b      	sxth	r3, r3
 8000302:	4313      	orrs	r3, r2
 8000304:	b21a      	sxth	r2, r3
 8000306:	4b65      	ldr	r3, [pc, #404]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000308:	821a      	strh	r2, [r3, #16]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H1_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 800030a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800030e:	9302      	str	r3, [sp, #8]
 8000310:	2301      	movs	r3, #1
 8000312:	9301      	str	r3, [sp, #4]
 8000314:	1dfb      	adds	r3, r7, #7
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	2301      	movs	r3, #1
 800031a:	223a      	movs	r2, #58	@ 0x3a
 800031c:	21be      	movs	r1, #190	@ 0xbe
 800031e:	485e      	ldr	r0, [pc, #376]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 8000320:	f001 fb8c 	bl	8001a3c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_H1_T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 8000324:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000328:	9302      	str	r3, [sp, #8]
 800032a:	2301      	movs	r3, #1
 800032c:	9301      	str	r3, [sp, #4]
 800032e:	1dbb      	adds	r3, r7, #6
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	2301      	movs	r3, #1
 8000334:	223b      	movs	r2, #59	@ 0x3b
 8000336:	21be      	movs	r1, #190	@ 0xbe
 8000338:	4857      	ldr	r0, [pc, #348]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 800033a:	f001 fb7f 	bl	8001a3c <HAL_I2C_Mem_Read>
	hts_cal.H1_T0_OUT = (tempMSB <<8) |  buffer;
 800033e:	79bb      	ldrb	r3, [r7, #6]
 8000340:	021b      	lsls	r3, r3, #8
 8000342:	b21a      	sxth	r2, r3
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	b21b      	sxth	r3, r3
 8000348:	4313      	orrs	r3, r2
 800034a:	b21a      	sxth	r2, r3
 800034c:	4b53      	ldr	r3, [pc, #332]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 800034e:	825a      	strh	r2, [r3, #18]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T0_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000350:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000354:	9302      	str	r3, [sp, #8]
 8000356:	2301      	movs	r3, #1
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	1dfb      	adds	r3, r7, #7
 800035c:	9300      	str	r3, [sp, #0]
 800035e:	2301      	movs	r3, #1
 8000360:	223c      	movs	r2, #60	@ 0x3c
 8000362:	21be      	movs	r1, #190	@ 0xbe
 8000364:	484c      	ldr	r0, [pc, #304]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 8000366:	f001 fb69 	bl	8001a3c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T0_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 800036a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800036e:	9302      	str	r3, [sp, #8]
 8000370:	2301      	movs	r3, #1
 8000372:	9301      	str	r3, [sp, #4]
 8000374:	1dbb      	adds	r3, r7, #6
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2301      	movs	r3, #1
 800037a:	223d      	movs	r2, #61	@ 0x3d
 800037c:	21be      	movs	r1, #190	@ 0xbe
 800037e:	4846      	ldr	r0, [pc, #280]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 8000380:	f001 fb5c 	bl	8001a3c <HAL_I2C_Mem_Read>
	hts_cal.T0_OUT = (tempMSB <<8) |  buffer;
 8000384:	79bb      	ldrb	r3, [r7, #6]
 8000386:	021b      	lsls	r3, r3, #8
 8000388:	b21a      	sxth	r2, r3
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	b21b      	sxth	r3, r3
 800038e:	4313      	orrs	r3, r2
 8000390:	b21a      	sxth	r2, r3
 8000392:	4b42      	ldr	r3, [pc, #264]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000394:	829a      	strh	r2, [r3, #20]

	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_OUT_LSB, I2C_MEMADD_SIZE_8BIT, &buffer, 1, 1000);
 8000396:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800039a:	9302      	str	r3, [sp, #8]
 800039c:	2301      	movs	r3, #1
 800039e:	9301      	str	r3, [sp, #4]
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	9300      	str	r3, [sp, #0]
 80003a4:	2301      	movs	r3, #1
 80003a6:	223e      	movs	r2, #62	@ 0x3e
 80003a8:	21be      	movs	r1, #190	@ 0xbe
 80003aa:	483b      	ldr	r0, [pc, #236]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 80003ac:	f001 fb46 	bl	8001a3c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, I2C_TH, HTS_T1_OUT_MSB, I2C_MEMADD_SIZE_8BIT, &tempMSB, 1, 1000);
 80003b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003b4:	9302      	str	r3, [sp, #8]
 80003b6:	2301      	movs	r3, #1
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	1dbb      	adds	r3, r7, #6
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	2301      	movs	r3, #1
 80003c0:	223f      	movs	r2, #63	@ 0x3f
 80003c2:	21be      	movs	r1, #190	@ 0xbe
 80003c4:	4834      	ldr	r0, [pc, #208]	@ (8000498 <HTS221_UpdateCalibration+0x2d0>)
 80003c6:	f001 fb39 	bl	8001a3c <HAL_I2C_Mem_Read>
	hts_cal.T1_OUT = (tempMSB <<8) |  buffer;
 80003ca:	79bb      	ldrb	r3, [r7, #6]
 80003cc:	021b      	lsls	r3, r3, #8
 80003ce:	b21a      	sxth	r2, r3
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	b21b      	sxth	r3, r3
 80003d4:	4313      	orrs	r3, r2
 80003d6:	b21a      	sxth	r2, r3
 80003d8:	4b30      	ldr	r3, [pc, #192]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 80003da:	82da      	strh	r2, [r3, #22]


	hts_cal.ha = (hts_cal.H1_rH_x2 - hts_cal.H0_rH_x2) / (hts_cal.H1_T0_OUT - hts_cal.H0_T0_OUT);
 80003dc:	4b2f      	ldr	r3, [pc, #188]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 80003de:	ed93 7a01 	vldr	s14, [r3, #4]
 80003e2:	4b2e      	ldr	r3, [pc, #184]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 80003e4:	edd3 7a00 	vldr	s15, [r3]
 80003e8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80003ec:	4b2b      	ldr	r3, [pc, #172]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 80003ee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b29      	ldr	r3, [pc, #164]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 80003f6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80003fa:	1ad3      	subs	r3, r2, r3
 80003fc:	ee07 3a90 	vmov	s15, r3
 8000400:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000408:	4b24      	ldr	r3, [pc, #144]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 800040a:	edc3 7a06 	vstr	s15, [r3, #24]

	hts_cal.hb = hts_cal.H0_rH_x2 - hts_cal.ha*hts_cal.H0_T0_OUT;
 800040e:	4b23      	ldr	r3, [pc, #140]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000410:	ed93 7a00 	vldr	s14, [r3]
 8000414:	4b21      	ldr	r3, [pc, #132]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000416:	edd3 6a06 	vldr	s13, [r3, #24]
 800041a:	4b20      	ldr	r3, [pc, #128]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 800041c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000420:	ee07 3a90 	vmov	s15, r3
 8000424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000428:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800042c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000430:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000432:	edc3 7a07 	vstr	s15, [r3, #28]

	hts_cal.ta = (hts_cal.T1_degC_x8 - hts_cal.T0_degC_x8) / (hts_cal.T1_OUT - hts_cal.T0_OUT);
 8000436:	4b19      	ldr	r3, [pc, #100]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000438:	ed93 7a03 	vldr	s14, [r3, #12]
 800043c:	4b17      	ldr	r3, [pc, #92]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 800043e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000442:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000448:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800044c:	461a      	mov	r2, r3
 800044e:	4b13      	ldr	r3, [pc, #76]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000450:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	ee07 3a90 	vmov	s15, r3
 800045a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800045e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000462:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000464:	edc3 7a08 	vstr	s15, [r3, #32]

	hts_cal.tb = hts_cal.T0_degC_x8 - hts_cal.ha*hts_cal.T0_OUT;
 8000468:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 800046a:	ed93 7a02 	vldr	s14, [r3, #8]
 800046e:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000470:	edd3 6a06 	vldr	s13, [r3, #24]
 8000474:	4b09      	ldr	r3, [pc, #36]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 8000476:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800047a:	ee07 3a90 	vmov	s15, r3
 800047e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800048a:	4b04      	ldr	r3, [pc, #16]	@ (800049c <HTS221_UpdateCalibration+0x2d4>)
 800048c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	2000005c 	.word	0x2000005c
 800049c:	20000028 	.word	0x20000028

080004a0 <HTS221_Init>:

void HTS221_Init(){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af04      	add	r7, sp, #16
	uint8_t buffer[1];
	buffer[0] = 0x87;
 80004a6:	2387      	movs	r3, #135	@ 0x87
 80004a8:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c2, 0xBE, 0x20, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 80004aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ae:	9302      	str	r3, [sp, #8]
 80004b0:	2301      	movs	r3, #1
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	9300      	str	r3, [sp, #0]
 80004b8:	2301      	movs	r3, #1
 80004ba:	2220      	movs	r2, #32
 80004bc:	21be      	movs	r1, #190	@ 0xbe
 80004be:	4804      	ldr	r0, [pc, #16]	@ (80004d0 <HTS221_Init+0x30>)
 80004c0:	f001 f9a8 	bl	8001814 <HAL_I2C_Mem_Write>
	HTS221_UpdateCalibration();
 80004c4:	f7ff fe80 	bl	80001c8 <HTS221_UpdateCalibration>
}
 80004c8:	bf00      	nop
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000005c 	.word	0x2000005c

080004d4 <HTS221_Read>:

THSample HTS221_Read(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	@ 0x30
 80004d8:	af04      	add	r7, sp, #16
	THSample ths;
	uint8_t buffer[4];
	HAL_I2C_Mem_Read(&hi2c2, 0xBE, 0x80|0x28, I2C_MEMADD_SIZE_8BIT, buffer, 4, 1000);
 80004da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004de:	9302      	str	r3, [sp, #8]
 80004e0:	2304      	movs	r3, #4
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	f107 0308 	add.w	r3, r7, #8
 80004e8:	9300      	str	r3, [sp, #0]
 80004ea:	2301      	movs	r3, #1
 80004ec:	22a8      	movs	r2, #168	@ 0xa8
 80004ee:	21be      	movs	r1, #190	@ 0xbe
 80004f0:	4824      	ldr	r0, [pc, #144]	@ (8000584 <HTS221_Read+0xb0>)
 80004f2:	f001 faa3 	bl	8001a3c <HAL_I2C_Mem_Read>

	int16_t hum_raw;
	int16_t temp_raw;

	hum_raw = buffer[1]<<8|buffer[0];
 80004f6:	7a7b      	ldrb	r3, [r7, #9]
 80004f8:	021b      	lsls	r3, r3, #8
 80004fa:	b21a      	sxth	r2, r3
 80004fc:	7a3b      	ldrb	r3, [r7, #8]
 80004fe:	b21b      	sxth	r3, r3
 8000500:	4313      	orrs	r3, r2
 8000502:	83fb      	strh	r3, [r7, #30]
	temp_raw = buffer[3]<<8|buffer[2];
 8000504:	7afb      	ldrb	r3, [r7, #11]
 8000506:	021b      	lsls	r3, r3, #8
 8000508:	b21a      	sxth	r2, r3
 800050a:	7abb      	ldrb	r3, [r7, #10]
 800050c:	b21b      	sxth	r3, r3
 800050e:	4313      	orrs	r3, r2
 8000510:	83bb      	strh	r3, [r7, #28]

	ths.hum = hts_cal.ha * hum_raw + hts_cal.hb;
 8000512:	4b1d      	ldr	r3, [pc, #116]	@ (8000588 <HTS221_Read+0xb4>)
 8000514:	ed93 7a06 	vldr	s14, [r3, #24]
 8000518:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800051c:	ee07 3a90 	vmov	s15, r3
 8000520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000524:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000528:	4b17      	ldr	r3, [pc, #92]	@ (8000588 <HTS221_Read+0xb4>)
 800052a:	edd3 7a07 	vldr	s15, [r3, #28]
 800052e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000532:	edc7 7a04 	vstr	s15, [r7, #16]
	ths.temp = hts_cal.ta * temp_raw + hts_cal.tb;
 8000536:	4b14      	ldr	r3, [pc, #80]	@ (8000588 <HTS221_Read+0xb4>)
 8000538:	ed93 7a08 	vldr	s14, [r3, #32]
 800053c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000540:	ee07 3a90 	vmov	s15, r3
 8000544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800054c:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <HTS221_Read+0xb4>)
 800054e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000552:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000556:	edc7 7a03 	vstr	s15, [r7, #12]

	return ths;
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	f107 020c 	add.w	r2, r7, #12
 8000562:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000566:	e883 0003 	stmia.w	r3, {r0, r1}
 800056a:	697a      	ldr	r2, [r7, #20]
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	ee07 2a10 	vmov	s14, r2
 8000572:	ee07 3a90 	vmov	s15, r3
}
 8000576:	eeb0 0a47 	vmov.f32	s0, s14
 800057a:	eef0 0a67 	vmov.f32	s1, s15
 800057e:	3720      	adds	r7, #32
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000005c 	.word	0x2000005c
 8000588:	20000028 	.word	0x20000028

0800058c <LPS22_Init>:

#include "stm32l4xx_hal.h" //Libreria HAL para Read/Write
extern I2C_HandleTypeDef hi2c2; //Handle del puerto I2C

void LPS22_Init(){
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af04      	add	r7, sp, #16

	uint8_t buffer[1];

	buffer[0] = 0x42;
 8000592:	2342      	movs	r3, #66	@ 0x42
 8000594:	713b      	strb	r3, [r7, #4]

	HAL_I2C_Mem_Write(&hi2c2, 0xBA, 0x10, I2C_MEMADD_SIZE_8BIT, buffer, 1, 1000);
 8000596:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800059a:	9302      	str	r3, [sp, #8]
 800059c:	2301      	movs	r3, #1
 800059e:	9301      	str	r3, [sp, #4]
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	9300      	str	r3, [sp, #0]
 80005a4:	2301      	movs	r3, #1
 80005a6:	2210      	movs	r2, #16
 80005a8:	21ba      	movs	r1, #186	@ 0xba
 80005aa:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <LPS22_Init+0x2c>)
 80005ac:	f001 f932 	bl	8001814 <HAL_I2C_Mem_Write>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2000005c 	.word	0x2000005c

080005bc <LPS22_ReadPress>:

float LPS22_ReadPress(){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af04      	add	r7, sp, #16
	float press;

	uint8_t buffer[3]; //El sensor guarda la presión en 3 posiciones de memoria, por eso el buffer mas grande (se necesitan 24 bits)

	HAL_I2C_Mem_Read(&hi2c2, 0xBA, 0x28, I2C_MEMADD_SIZE_8BIT, buffer, 3, 1000); //Lectura de 3 registros seguidos
 80005c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c6:	9302      	str	r3, [sp, #8]
 80005c8:	2303      	movs	r3, #3
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	2301      	movs	r3, #1
 80005d2:	2228      	movs	r2, #40	@ 0x28
 80005d4:	21ba      	movs	r1, #186	@ 0xba
 80005d6:	480f      	ldr	r0, [pc, #60]	@ (8000614 <LPS22_ReadPress+0x58>)
 80005d8:	f001 fa30 	bl	8001a3c <HAL_I2C_Mem_Read>

	uint32_t press_raw = (buffer[2]<<16 | buffer[1]<<8) | buffer[0]; //mascara para volcar la lectura en una sola variable
 80005dc:	79bb      	ldrb	r3, [r7, #6]
 80005de:	041a      	lsls	r2, r3, #16
 80005e0:	797b      	ldrb	r3, [r7, #5]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	4313      	orrs	r3, r2
 80005e6:	793a      	ldrb	r2, [r7, #4]
 80005e8:	4313      	orrs	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]

	press = press_raw/4096.0f; //El valor de la división va dado por el fabricante del sensor en la datasheet
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	ee07 3a90 	vmov	s15, r3
 80005f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80005f6:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000618 <LPS22_ReadPress+0x5c>
 80005fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005fe:	edc7 7a02 	vstr	s15, [r7, #8]

	return press;
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	ee07 3a90 	vmov	s15, r3
}
 8000608:	eeb0 0a67 	vmov.f32	s0, s15
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	2000005c 	.word	0x2000005c
 8000618:	45800000 	.word	0x45800000

0800061c <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800062a:	f001 f83f 	bl	80016ac <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fd88 	bl	8001144 <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f001 f835 	bl	80016ac <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 fd7e 	bl	8001144 <HAL_Delay>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}

0800064c <lcd_reset>:

void lcd_reset(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2104      	movs	r1, #4
 8000654:	4820      	ldr	r0, [pc, #128]	@ (80006d8 <lcd_reset+0x8c>)
 8000656:	f001 f829 	bl	80016ac <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2110      	movs	r1, #16
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f001 f823 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2108      	movs	r1, #8
 800066a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066e:	f001 f81d 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2110      	movs	r1, #16
 8000676:	4818      	ldr	r0, [pc, #96]	@ (80006d8 <lcd_reset+0x8c>)
 8000678:	f001 f818 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2102      	movs	r1, #2
 8000680:	4815      	ldr	r0, [pc, #84]	@ (80006d8 <lcd_reset+0x8c>)
 8000682:	f001 f813 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800068c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000690:	f001 f80c 	bl	80016ac <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000694:	2201      	movs	r2, #1
 8000696:	2108      	movs	r1, #8
 8000698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069c:	f001 f806 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	480c      	ldr	r0, [pc, #48]	@ (80006d8 <lcd_reset+0x8c>)
 80006a6:	f001 f801 	bl	80016ac <HAL_GPIO_WritePin>
    lcd_clock();
 80006aa:	f7ff ffb7 	bl	800061c <lcd_clock>
    lcd_clock();
 80006ae:	f7ff ffb5 	bl	800061c <lcd_clock>
    lcd_clock();
 80006b2:	f7ff ffb3 	bl	800061c <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2108      	movs	r1, #8
 80006ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006be:	f000 fff5 	bl	80016ac <HAL_GPIO_WritePin>
    lcd_clock();
 80006c2:	f7ff ffab 	bl	800061c <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2104      	movs	r1, #4
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ce:	f000 ffed 	bl	80016ac <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	48000400 	.word	0x48000400

080006dc <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	091b      	lsrs	r3, r3, #4
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d006      	beq.n	8000708 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2108      	movs	r1, #8
 80006fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000702:	f000 ffd3 	bl	80016ac <HAL_GPIO_WritePin>
 8000706:	e005      	b.n	8000714 <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2108      	movs	r1, #8
 800070c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000710:	f000 ffcc 	bl	80016ac <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	095b      	lsrs	r3, r3, #5
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	2b00      	cmp	r3, #0
 8000720:	d005      	beq.n	800072e <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000722:	2201      	movs	r2, #1
 8000724:	2110      	movs	r1, #16
 8000726:	4847      	ldr	r0, [pc, #284]	@ (8000844 <lcd_write+0x168>)
 8000728:	f000 ffc0 	bl	80016ac <HAL_GPIO_WritePin>
 800072c:	e004      	b.n	8000738 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2110      	movs	r1, #16
 8000732:	4844      	ldr	r0, [pc, #272]	@ (8000844 <lcd_write+0x168>)
 8000734:	f000 ffba 	bl	80016ac <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	099b      	lsrs	r3, r3, #6
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d005      	beq.n	8000752 <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	483e      	ldr	r0, [pc, #248]	@ (8000844 <lcd_write+0x168>)
 800074c:	f000 ffae 	bl	80016ac <HAL_GPIO_WritePin>
 8000750:	e004      	b.n	800075c <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2102      	movs	r1, #2
 8000756:	483b      	ldr	r0, [pc, #236]	@ (8000844 <lcd_write+0x168>)
 8000758:	f000 ffa8 	bl	80016ac <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	09db      	lsrs	r3, r3, #7
 8000760:	b2db      	uxtb	r3, r3
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	2b00      	cmp	r3, #0
 8000768:	d006      	beq.n	8000778 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 800076a:	2201      	movs	r2, #1
 800076c:	2110      	movs	r1, #16
 800076e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000772:	f000 ff9b 	bl	80016ac <HAL_GPIO_WritePin>
 8000776:	e005      	b.n	8000784 <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2110      	movs	r1, #16
 800077c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000780:	f000 ff94 	bl	80016ac <HAL_GPIO_WritePin>

    if(rs)
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d005      	beq.n	8000796 <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 800078a:	2201      	movs	r2, #1
 800078c:	2104      	movs	r1, #4
 800078e:	482d      	ldr	r0, [pc, #180]	@ (8000844 <lcd_write+0x168>)
 8000790:	f000 ff8c 	bl	80016ac <HAL_GPIO_WritePin>
 8000794:	e004      	b.n	80007a0 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	2104      	movs	r1, #4
 800079a:	482a      	ldr	r0, [pc, #168]	@ (8000844 <lcd_write+0x168>)
 800079c:	f000 ff86 	bl	80016ac <HAL_GPIO_WritePin>

    lcd_clock();
 80007a0:	f7ff ff3c 	bl	800061c <lcd_clock>

    // Write first nibble

    if(byte & 1)
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d006      	beq.n	80007bc <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2108      	movs	r1, #8
 80007b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b6:	f000 ff79 	bl	80016ac <HAL_GPIO_WritePin>
 80007ba:	e005      	b.n	80007c8 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80007bc:	2200      	movs	r2, #0
 80007be:	2108      	movs	r1, #8
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c4:	f000 ff72 	bl	80016ac <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	085b      	lsrs	r3, r3, #1
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d005      	beq.n	80007e2 <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2110      	movs	r1, #16
 80007da:	481a      	ldr	r0, [pc, #104]	@ (8000844 <lcd_write+0x168>)
 80007dc:	f000 ff66 	bl	80016ac <HAL_GPIO_WritePin>
 80007e0:	e004      	b.n	80007ec <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2110      	movs	r1, #16
 80007e6:	4817      	ldr	r0, [pc, #92]	@ (8000844 <lcd_write+0x168>)
 80007e8:	f000 ff60 	bl	80016ac <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	089b      	lsrs	r3, r3, #2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d005      	beq.n	8000806 <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2102      	movs	r1, #2
 80007fe:	4811      	ldr	r0, [pc, #68]	@ (8000844 <lcd_write+0x168>)
 8000800:	f000 ff54 	bl	80016ac <HAL_GPIO_WritePin>
 8000804:	e004      	b.n	8000810 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2102      	movs	r1, #2
 800080a:	480e      	ldr	r0, [pc, #56]	@ (8000844 <lcd_write+0x168>)
 800080c:	f000 ff4e 	bl	80016ac <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	08db      	lsrs	r3, r3, #3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	2b00      	cmp	r3, #0
 800081c:	d006      	beq.n	800082c <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	2110      	movs	r1, #16
 8000822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000826:	f000 ff41 	bl	80016ac <HAL_GPIO_WritePin>
 800082a:	e005      	b.n	8000838 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2110      	movs	r1, #16
 8000830:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000834:	f000 ff3a 	bl	80016ac <HAL_GPIO_WritePin>

    lcd_clock();
 8000838:	f7ff fef0 	bl	800061c <lcd_clock>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	48000400 	.word	0x48000400

08000848 <lcd_clear>:

void lcd_clear(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 800084c:	2100      	movs	r1, #0
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ff44 	bl	80006dc <lcd_write>
    _lcd_char = 0;
 8000854:	4b03      	ldr	r3, [pc, #12]	@ (8000864 <lcd_clear+0x1c>)
 8000856:	2200      	movs	r2, #0
 8000858:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 800085a:	4b03      	ldr	r3, [pc, #12]	@ (8000868 <lcd_clear+0x20>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000058 	.word	0x20000058
 8000868:	20000059 	.word	0x20000059

0800086c <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
 8000876:	460b      	mov	r3, r1
 8000878:	71bb      	strb	r3, [r7, #6]
 800087a:	4613      	mov	r3, r2
 800087c:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	b25b      	sxtb	r3, r3
 8000884:	f043 0308 	orr.w	r3, r3, #8
 8000888:	b25a      	sxtb	r2, r3
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	b25b      	sxtb	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b25a      	sxtb	r2, r3
 8000894:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000898:	4313      	orrs	r3, r2
 800089a:	b25b      	sxtb	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff1b 	bl	80006dc <lcd_write>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff0a 	bl	80006dc <lcd_write>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 80008d8:	2300      	movs	r3, #0
 80008da:	73fb      	strb	r3, [r7, #15]
 80008dc:	e055      	b.n	800098a <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 80008de:	4b30      	ldr	r3, [pc, #192]	@ (80009a0 <lcd_print+0xd0>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d01c      	beq.n	8000920 <lcd_print+0x50>
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b0a      	cmp	r3, #10
 80008f0:	d116      	bne.n	8000920 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 80008f2:	4b2c      	ldr	r3, [pc, #176]	@ (80009a4 <lcd_print+0xd4>)
 80008f4:	781a      	ldrb	r2, [r3, #0]
 80008f6:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <lcd_print+0xd0>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d242      	bcs.n	8000984 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80008fe:	4b2a      	ldr	r3, [pc, #168]	@ (80009a8 <lcd_print+0xd8>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	4b28      	ldr	r3, [pc, #160]	@ (80009a4 <lcd_print+0xd4>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	1c59      	adds	r1, r3, #1
 8000908:	b2c8      	uxtb	r0, r1
 800090a:	4926      	ldr	r1, [pc, #152]	@ (80009a4 <lcd_print+0xd4>)
 800090c:	7008      	strb	r0, [r1, #0]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ffcb 	bl	80008ae <lcd_display_address>
                _lcd_char = 0;
 8000918:	4b24      	ldr	r3, [pc, #144]	@ (80009ac <lcd_print+0xdc>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 800091e:	e031      	b.n	8000984 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 8000920:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <lcd_print+0xe0>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d01b      	beq.n	8000960 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 8000928:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <lcd_print+0xdc>)
 800092a:	781a      	ldrb	r2, [r3, #0]
 800092c:	4b20      	ldr	r3, [pc, #128]	@ (80009b0 <lcd_print+0xe0>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	429a      	cmp	r2, r3
 8000932:	d115      	bne.n	8000960 <lcd_print+0x90>
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <lcd_print+0xd4>)
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <lcd_print+0xd0>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	429a      	cmp	r2, r3
 800093e:	d20f      	bcs.n	8000960 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 8000940:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <lcd_print+0xd8>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <lcd_print+0xd4>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	1c59      	adds	r1, r3, #1
 800094a:	b2c8      	uxtb	r0, r1
 800094c:	4915      	ldr	r1, [pc, #84]	@ (80009a4 <lcd_print+0xd4>)
 800094e:	7008      	strb	r0, [r1, #0]
 8000950:	4413      	add	r3, r2
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffaa 	bl	80008ae <lcd_display_address>
                    _lcd_char = 0;
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <lcd_print+0xdc>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2101      	movs	r1, #1
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff feb6 	bl	80006dc <lcd_write>
            if(lcd_chars) _lcd_char++;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <lcd_print+0xe0>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d005      	beq.n	8000984 <lcd_print+0xb4>
 8000978:	4b0c      	ldr	r3, [pc, #48]	@ (80009ac <lcd_print+0xdc>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <lcd_print+0xdc>)
 8000982:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	3301      	adds	r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1a3      	bne.n	80008de <lcd_print+0xe>
        }
    }
}
 8000996:	bf00      	nop
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000051 	.word	0x20000051
 80009a4:	20000059 	.word	0x20000059
 80009a8:	20000054 	.word	0x20000054
 80009ac:	20000058 	.word	0x20000058
 80009b0:	20000050 	.word	0x20000050

080009b4 <writeIntegerToLCD>:

void writeIntegerToLCD(int integer)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	//	Break down the original number into the thousands, hundreds, tens,
	//	and ones places and then immediately write that value to the LCD
	unsigned char thousands = integer / 1000;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a32      	ldr	r2, [pc, #200]	@ (8000a88 <writeIntegerToLCD+0xd4>)
 80009c0:	fb82 1203 	smull	r1, r2, r2, r3
 80009c4:	1192      	asrs	r2, r2, #6
 80009c6:	17db      	asrs	r3, r3, #31
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	73fb      	strb	r3, [r7, #15]
	lcd_write( thousands + 0x30,1);
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3330      	adds	r3, #48	@ 0x30
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	2101      	movs	r1, #1
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe81 	bl	80006dc <lcd_write>

	unsigned char hundreds = (integer - thousands*1000) / 100;
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	4a2b      	ldr	r2, [pc, #172]	@ (8000a8c <writeIntegerToLCD+0xd8>)
 80009de:	fb03 f202 	mul.w	r2, r3, r2
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4413      	add	r3, r2
 80009e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000a90 <writeIntegerToLCD+0xdc>)
 80009e8:	fb82 1203 	smull	r1, r2, r2, r3
 80009ec:	1152      	asrs	r2, r2, #5
 80009ee:	17db      	asrs	r3, r3, #31
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	73bb      	strb	r3, [r7, #14]
	lcd_write( hundreds + 0x30,1);
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
 80009f6:	3330      	adds	r3, #48	@ 0x30
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2101      	movs	r1, #1
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fe6d 	bl	80006dc <lcd_write>

	unsigned char tens = (integer - thousands*1000 - hundreds*100 ) / 10;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <writeIntegerToLCD+0xd8>)
 8000a06:	fb03 f202 	mul.w	r2, r3, r2
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	441a      	add	r2, r3
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8000a14:	fb01 f303 	mul.w	r3, r1, r3
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8000a94 <writeIntegerToLCD+0xe0>)
 8000a1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a20:	1092      	asrs	r2, r2, #2
 8000a22:	17db      	asrs	r3, r3, #31
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	737b      	strb	r3, [r7, #13]
	lcd_write( tens + 0x30,1);
 8000a28:	7b7b      	ldrb	r3, [r7, #13]
 8000a2a:	3330      	adds	r3, #48	@ 0x30
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2101      	movs	r1, #1
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fe53 	bl	80006dc <lcd_write>

	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	0052      	lsls	r2, r2, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	7bbb      	ldrb	r3, [r7, #14]
 8000a44:	4619      	mov	r1, r3
 8000a46:	0089      	lsls	r1, r1, #2
 8000a48:	4419      	add	r1, r3
 8000a4a:	00c9      	lsls	r1, r1, #3
 8000a4c:	1acb      	subs	r3, r1, r3
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	4413      	add	r3, r2
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4413      	add	r3, r2
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	7b7b      	ldrb	r3, [r7, #13]
 8000a60:	4619      	mov	r1, r3
 8000a62:	0149      	lsls	r1, r1, #5
 8000a64:	1ac9      	subs	r1, r1, r3
 8000a66:	0089      	lsls	r1, r1, #2
 8000a68:	1acb      	subs	r3, r1, r3
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4413      	add	r3, r2
 8000a70:	733b      	strb	r3, [r7, #12]
	lcd_write( ones + 0x30,1);
 8000a72:	7b3b      	ldrb	r3, [r7, #12]
 8000a74:	3330      	adds	r3, #48	@ 0x30
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff fe2e 	bl	80006dc <lcd_write>
}
 8000a80:	bf00      	nop
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	10624dd3 	.word	0x10624dd3
 8000a8c:	fffffc18 	.word	0xfffffc18
 8000a90:	51eb851f 	.word	0x51eb851f
 8000a94:	66666667 	.word	0x66666667

08000a98 <moveToXY>:

void moveToXY(unsigned char row, unsigned char column)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	011a      	lsls	r2, r3, #4
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	4413      	add	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	dc0a      	bgt.n	8000ace <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fe08 	bl	80006dc <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 8000acc:	e059      	b.n	8000b82 <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	dd17      	ble.n	8000b04 <moveToXY+0x6c>
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	2b1f      	cmp	r3, #31
 8000ad8:	dc14      	bgt.n	8000b04 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	425a      	negs	r2, r3
 8000ade:	f003 030f 	and.w	r3, r3, #15
 8000ae2:	f002 020f 	and.w	r2, r2, #15
 8000ae6:	bf58      	it	pl
 8000ae8:	4253      	negpl	r3, r2
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	3340      	adds	r3, #64	@ 0x40
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fded 	bl	80006dc <lcd_write>
 8000b02:	e03e      	b.n	8000b82 <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2b28      	cmp	r3, #40	@ 0x28
 8000b08:	dd1b      	ble.n	8000b42 <moveToXY+0xaa>
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8000b0e:	dc18      	bgt.n	8000b42 <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <moveToXY+0xf4>)
 8000b14:	fb83 1302 	smull	r1, r3, r3, r2
 8000b18:	1119      	asrs	r1, r3, #4
 8000b1a:	17d3      	asrs	r3, r2, #31
 8000b1c:	1ac9      	subs	r1, r1, r3
 8000b1e:	460b      	mov	r3, r1
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	440b      	add	r3, r1
 8000b24:	00db      	lsls	r3, r3, #3
 8000b26:	1ad1      	subs	r1, r2, r3
 8000b28:	b2cb      	uxtb	r3, r1
 8000b2a:	3314      	adds	r3, #20
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	b25b      	sxtb	r3, r3
 8000b30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fdce 	bl	80006dc <lcd_write>
 8000b40:	e01f      	b.n	8000b82 <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	2b13      	cmp	r3, #19
 8000b46:	dd1c      	ble.n	8000b82 <moveToXY+0xea>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b27      	cmp	r3, #39	@ 0x27
 8000b4c:	dc19      	bgt.n	8000b82 <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <moveToXY+0xf8>)
 8000b52:	fb83 1302 	smull	r1, r3, r3, r2
 8000b56:	4413      	add	r3, r2
 8000b58:	1159      	asrs	r1, r3, #5
 8000b5a:	17d3      	asrs	r3, r2, #31
 8000b5c:	1ac9      	subs	r1, r1, r3
 8000b5e:	460b      	mov	r3, r1
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	1a5b      	subs	r3, r3, r1
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	1ad1      	subs	r1, r2, r3
 8000b68:	b2cb      	uxtb	r3, r1
 8000b6a:	3354      	adds	r3, #84	@ 0x54
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	b25b      	sxtb	r3, r3
 8000b70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b74:	b25b      	sxtb	r3, r3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fdae 	bl	80006dc <lcd_write>
}
 8000b80:	e7ff      	b.n	8000b82 <moveToXY+0xea>
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	66666667 	.word	0x66666667
 8000b90:	88888889 	.word	0x88888889

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b9a:	f000 fa5e 	bl	800105a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9e:	f000 f881 	bl	8000ca4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ba2:	f000 f911 	bl	8000dc8 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000ba6:	f000 f8cf 	bl	8000d48 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  lcd_reset();
 8000baa:	f7ff fd4f 	bl	800064c <lcd_reset>
  lcd_display_settings(1, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f7ff fe5a 	bl	800086c <lcd_display_settings>
  lcd_clear();
 8000bb8:	f7ff fe46 	bl	8000848 <lcd_clear>
  LPS22_Init();
 8000bbc:	f7ff fce6 	bl	800058c <LPS22_Init>
  HTS221_Init();
 8000bc0:	f7ff fc6e 	bl	80004a0 <HTS221_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	THSample ths;
	ths = HTS221_Read();
 8000bc4:	f7ff fc86 	bl	80004d4 <HTS221_Read>
 8000bc8:	eeb0 7a40 	vmov.f32	s14, s0
 8000bcc:	eef0 7a60 	vmov.f32	s15, s1
 8000bd0:	ed87 7a01 	vstr	s14, [r7, #4]
 8000bd4:	edc7 7a02 	vstr	s15, [r7, #8]
	float press;
	press = LPS22_ReadPress();
 8000bd8:	f7ff fcf0 	bl	80005bc <LPS22_ReadPress>
 8000bdc:	ed87 0a03 	vstr	s0, [r7, #12]

	lcd_print("La presion es de:");
 8000be0:	4829      	ldr	r0, [pc, #164]	@ (8000c88 <main+0xf4>)
 8000be2:	f7ff fe75 	bl	80008d0 <lcd_print>
	moveToXY(1, 0);
 8000be6:	2100      	movs	r1, #0
 8000be8:	2001      	movs	r0, #1
 8000bea:	f7ff ff55 	bl	8000a98 <moveToXY>
	writeIntegerToLCD(press);
 8000bee:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bf6:	ee17 0a90 	vmov	r0, s15
 8000bfa:	f7ff fedb 	bl	80009b4 <writeIntegerToLCD>
	lcd_print("hPA");
 8000bfe:	4823      	ldr	r0, [pc, #140]	@ (8000c8c <main+0xf8>)
 8000c00:	f7ff fe66 	bl	80008d0 <lcd_print>
	HAL_Delay(5000);
 8000c04:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c08:	f000 fa9c 	bl	8001144 <HAL_Delay>
	lcd_clear();
 8000c0c:	f7ff fe1c 	bl	8000848 <lcd_clear>
	lcd_print("La humedad es de:");
 8000c10:	481f      	ldr	r0, [pc, #124]	@ (8000c90 <main+0xfc>)
 8000c12:	f7ff fe5d 	bl	80008d0 <lcd_print>
	moveToXY(1, 0);
 8000c16:	2100      	movs	r1, #0
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff ff3d 	bl	8000a98 <moveToXY>
	writeIntegerToLCD(ths.hum);
 8000c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c26:	ee17 0a90 	vmov	r0, s15
 8000c2a:	f7ff fec3 	bl	80009b4 <writeIntegerToLCD>
	lcd_print("%");
 8000c2e:	4819      	ldr	r0, [pc, #100]	@ (8000c94 <main+0x100>)
 8000c30:	f7ff fe4e 	bl	80008d0 <lcd_print>
	HAL_Delay(5000);
 8000c34:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c38:	f000 fa84 	bl	8001144 <HAL_Delay>
	lcd_clear();
 8000c3c:	f7ff fe04 	bl	8000848 <lcd_clear>
	lcd_print("La temperatura es de:");
 8000c40:	4815      	ldr	r0, [pc, #84]	@ (8000c98 <main+0x104>)
 8000c42:	f7ff fe45 	bl	80008d0 <lcd_print>
	moveToXY(1, 0);
 8000c46:	2100      	movs	r1, #0
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff25 	bl	8000a98 <moveToXY>
	writeIntegerToLCD(ths.temp);
 8000c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c56:	ee17 0a90 	vmov	r0, s15
 8000c5a:	f7ff feab 	bl	80009b4 <writeIntegerToLCD>
	lcd_print("C");
 8000c5e:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <main+0x108>)
 8000c60:	f7ff fe36 	bl	80008d0 <lcd_print>
	HAL_Delay(10000);
 8000c64:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000c68:	f000 fa6c 	bl	8001144 <HAL_Delay>
	lcd_clear();
 8000c6c:	f7ff fdec 	bl	8000848 <lcd_clear>
	lcd_print("Borrando...");
 8000c70:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <main+0x10c>)
 8000c72:	f7ff fe2d 	bl	80008d0 <lcd_print>
	HAL_Delay(400);
 8000c76:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000c7a:	f000 fa63 	bl	8001144 <HAL_Delay>
	lcd_clear();
 8000c7e:	f7ff fde3 	bl	8000848 <lcd_clear>
  {
 8000c82:	bf00      	nop
 8000c84:	e79e      	b.n	8000bc4 <main+0x30>
 8000c86:	bf00      	nop
 8000c88:	08003964 	.word	0x08003964
 8000c8c:	08003978 	.word	0x08003978
 8000c90:	0800397c 	.word	0x0800397c
 8000c94:	08003990 	.word	0x08003990
 8000c98:	08003994 	.word	0x08003994
 8000c9c:	080039ac 	.word	0x080039ac
 8000ca0:	080039b0 	.word	0x080039b0

08000ca4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b096      	sub	sp, #88	@ 0x58
 8000ca8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	2244      	movs	r2, #68	@ 0x44
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 fe1e 	bl	80038f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cc6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cca:	f001 fb39 	bl	8002340 <HAL_PWREx_ControlVoltageScaling>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000cd4:	f000 f8ce 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ce4:	2360      	movs	r3, #96	@ 0x60
 8000ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000cec:	2301      	movs	r3, #1
 8000cee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000cf4:	2328      	movs	r3, #40	@ 0x28
 8000cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f001 fb6f 	bl	80023ec <HAL_RCC_OscConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d14:	f000 f8ae 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	230f      	movs	r3, #15
 8000d1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	2104      	movs	r1, #4
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 ff37 	bl	8002ba4 <HAL_RCC_ClockConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d3c:	f000 f89a 	bl	8000e74 <Error_Handler>
  }
}
 8000d40:	bf00      	nop
 8000d42:	3758      	adds	r7, #88	@ 0x58
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <MX_I2C2_Init+0x78>)
 8000d50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d54:	4a1b      	ldr	r2, [pc, #108]	@ (8000dc4 <MX_I2C2_Init+0x7c>)
 8000d56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d58:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d5e:	4b17      	ldr	r3, [pc, #92]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d70:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d82:	480e      	ldr	r0, [pc, #56]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d84:	f000 fcaa 	bl	80016dc <HAL_I2C_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d8e:	f000 f871 	bl	8000e74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4809      	ldr	r0, [pc, #36]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000d96:	f001 fa2d 	bl	80021f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000da0:	f000 f868 	bl	8000e74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000da4:	2100      	movs	r1, #0
 8000da6:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <MX_I2C2_Init+0x74>)
 8000da8:	f001 fa6f 	bl	800228a <HAL_I2CEx_ConfigDigitalFilter>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000db2:	f000 f85f 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	2000005c 	.word	0x2000005c
 8000dc0:	40005800 	.word	0x40005800
 8000dc4:	10d19ce4 	.word	0x10d19ce4

08000dc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <MX_GPIO_Init+0xa4>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de2:	4a22      	ldr	r2, [pc, #136]	@ (8000e6c <MX_GPIO_Init+0xa4>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dea:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <MX_GPIO_Init+0xa4>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <MX_GPIO_Init+0xa4>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000e6c <MX_GPIO_Init+0xa4>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e02:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <MX_GPIO_Init+0xa4>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|E_LCD_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f248 011c 	movw	r1, #32796	@ 0x801c
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e18:	f000 fc48 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|D5_LCD_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2116      	movs	r1, #22
 8000e20:	4813      	ldr	r0, [pc, #76]	@ (8000e70 <MX_GPIO_Init+0xa8>)
 8000e22:	f000 fc43 	bl	80016ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|E_LCD_Pin;
 8000e26:	f248 031c 	movw	r3, #32796	@ 0x801c
 8000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e42:	f000 fa89 	bl	8001358 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin D5_LCD_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|D5_LCD_Pin;
 8000e46:	2316      	movs	r3, #22
 8000e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4804      	ldr	r0, [pc, #16]	@ (8000e70 <MX_GPIO_Init+0xa8>)
 8000e5e:	f000 fa7b 	bl	8001358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e62:	bf00      	nop
 8000e64:	3720      	adds	r7, #32
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48000400 	.word	0x48000400

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <Error_Handler+0x8>

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea2:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b0ac      	sub	sp, #176	@ 0xb0
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2288      	movs	r2, #136	@ 0x88
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fd03 	bl	80038f4 <memset>
  if(hi2c->Instance==I2C2)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a21      	ldr	r2, [pc, #132]	@ (8000f78 <HAL_I2C_MspInit+0xb0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d13b      	bne.n	8000f70 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ef8:	2380      	movs	r3, #128	@ 0x80
 8000efa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 f839 	bl	8002f7c <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f10:	f7ff ffb0 	bl	8000e74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <HAL_I2C_MspInit+0xb4>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f18:	4a18      	ldr	r2, [pc, #96]	@ (8000f7c <HAL_I2C_MspInit+0xb4>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f20:	4b16      	ldr	r3, [pc, #88]	@ (8000f7c <HAL_I2C_MspInit+0xb4>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f2c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f34:	2312      	movs	r3, #18
 8000f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f46:	2304      	movs	r3, #4
 8000f48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f50:	4619      	mov	r1, r3
 8000f52:	480b      	ldr	r0, [pc, #44]	@ (8000f80 <HAL_I2C_MspInit+0xb8>)
 8000f54:	f000 fa00 	bl	8001358 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <HAL_I2C_MspInit+0xb4>)
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5c:	4a07      	ldr	r2, [pc, #28]	@ (8000f7c <HAL_I2C_MspInit+0xb4>)
 8000f5e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f64:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <HAL_I2C_MspInit+0xb4>)
 8000f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f68:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000f70:	bf00      	nop
 8000f72:	37b0      	adds	r7, #176	@ 0xb0
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40005800 	.word	0x40005800
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	48000400 	.word	0x48000400

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <NMI_Handler+0x4>

08000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f000 f893 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <SystemInit+0x20>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fee:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <SystemInit+0x20>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001040 <LoopForever+0x2>
 800100c:	f7ff ffea 	bl	8000fe4 <SystemInit>
 8001010:	480c      	ldr	r0, [pc, #48]	@ (8001044 <LoopForever+0x6>)
 8001012:	490d      	ldr	r1, [pc, #52]	@ (8001048 <LoopForever+0xa>)
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <LoopForever+0xe>)
 8001016:	2300      	movs	r3, #0
 8001018:	e002      	b.n	8001020 <LoopCopyDataInit>

0800101a <CopyDataInit>:
 800101a:	58d4      	ldr	r4, [r2, r3]
 800101c:	50c4      	str	r4, [r0, r3]
 800101e:	3304      	adds	r3, #4

08001020 <LoopCopyDataInit>:
 8001020:	18c4      	adds	r4, r0, r3
 8001022:	428c      	cmp	r4, r1
 8001024:	d3f9      	bcc.n	800101a <CopyDataInit>
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <LoopForever+0x12>)
 8001028:	4c0a      	ldr	r4, [pc, #40]	@ (8001054 <LoopForever+0x16>)
 800102a:	2300      	movs	r3, #0
 800102c:	e001      	b.n	8001032 <LoopFillZerobss>

0800102e <FillZerobss>:
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	3204      	adds	r2, #4

08001032 <LoopFillZerobss>:
 8001032:	42a2      	cmp	r2, r4
 8001034:	d3fb      	bcc.n	800102e <FillZerobss>
 8001036:	f002 fc65 	bl	8003904 <__libc_init_array>
 800103a:	f7ff fdab 	bl	8000b94 <main>

0800103e <LoopForever>:
 800103e:	e7fe      	b.n	800103e <LoopForever>
 8001040:	20018000 	.word	0x20018000
 8001044:	20000000 	.word	0x20000000
 8001048:	2000000c 	.word	0x2000000c
 800104c:	08003a04 	.word	0x08003a04
 8001050:	2000000c 	.word	0x2000000c
 8001054:	200000b4 	.word	0x200000b4

08001058 <ADC1_2_IRQHandler>:
 8001058:	e7fe      	b.n	8001058 <ADC1_2_IRQHandler>

0800105a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f000 f943 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f80e 	bl	800108c <HAL_InitTick>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e001      	b.n	8001080 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800107c:	f7ff ff00 	bl	8000e80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001080:	79fb      	ldrb	r3, [r7, #7]
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001098:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <HAL_InitTick+0x6c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d023      	beq.n	80010e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <HAL_InitTick+0x70>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_InitTick+0x6c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f941 	bl	800133e <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10f      	bne.n	80010e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d809      	bhi.n	80010dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010d0:	f000 f919 	bl	8001306 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <HAL_InitTick+0x74>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e007      	b.n	80010ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e004      	b.n	80010ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e001      	b.n	80010ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	@ (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008
 8001128:	200000b0 	.word	0x200000b0

0800112c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;
 8001130:	4b03      	ldr	r3, [pc, #12]	@ (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200000b0 	.word	0x200000b0

08001144 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800114c:	f7ff ffee 	bl	800112c <HAL_GetTick>
 8001150:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800115c:	d005      	beq.n	800116a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <HAL_Delay+0x44>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4413      	add	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116a:	bf00      	nop
 800116c:	f7ff ffde 	bl	800112c <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	429a      	cmp	r2, r3
 800117a:	d8f7      	bhi.n	800116c <HAL_Delay+0x28>
  {
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	@ (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	@ (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	@ 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	@ 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012d0:	f7ff ff8e 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff47 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff5c 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff8e 	bl	8001244 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5d 	bl	80011f0 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ffb0 	bl	80012ac <SysTick_Config>
 800134c:	4603      	mov	r3, r0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001366:	e17f      	b.n	8001668 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	2101      	movs	r1, #1
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	fa01 f303 	lsl.w	r3, r1, r3
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 8171 	beq.w	8001662 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d005      	beq.n	8001398 <HAL_GPIO_Init+0x40>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d130      	bne.n	80013fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	2203      	movs	r2, #3
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ce:	2201      	movs	r2, #1
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa02 f303 	lsl.w	r3, r2, r3
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 0201 	and.w	r2, r3, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b03      	cmp	r3, #3
 8001404:	d118      	bne.n	8001438 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800140a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800140c:	2201      	movs	r2, #1
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	08db      	lsrs	r3, r3, #3
 8001422:	f003 0201 	and.w	r2, r3, #1
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b03      	cmp	r3, #3
 8001442:	d017      	beq.n	8001474 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d123      	bne.n	80014c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	08da      	lsrs	r2, r3, #3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3208      	adds	r2, #8
 8001488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	220f      	movs	r2, #15
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	691a      	ldr	r2, [r3, #16]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	08da      	lsrs	r2, r3, #3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	3208      	adds	r2, #8
 80014c2:	6939      	ldr	r1, [r7, #16]
 80014c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	2203      	movs	r2, #3
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0203 	and.w	r2, r3, #3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80ac 	beq.w	8001662 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150a:	4b5f      	ldr	r3, [pc, #380]	@ (8001688 <HAL_GPIO_Init+0x330>)
 800150c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150e:	4a5e      	ldr	r2, [pc, #376]	@ (8001688 <HAL_GPIO_Init+0x330>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6613      	str	r3, [r2, #96]	@ 0x60
 8001516:	4b5c      	ldr	r3, [pc, #368]	@ (8001688 <HAL_GPIO_Init+0x330>)
 8001518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001522:	4a5a      	ldr	r2, [pc, #360]	@ (800168c <HAL_GPIO_Init+0x334>)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	3302      	adds	r3, #2
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800154c:	d025      	beq.n	800159a <HAL_GPIO_Init+0x242>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4f      	ldr	r2, [pc, #316]	@ (8001690 <HAL_GPIO_Init+0x338>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d01f      	beq.n	8001596 <HAL_GPIO_Init+0x23e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4e      	ldr	r2, [pc, #312]	@ (8001694 <HAL_GPIO_Init+0x33c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d019      	beq.n	8001592 <HAL_GPIO_Init+0x23a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4d      	ldr	r2, [pc, #308]	@ (8001698 <HAL_GPIO_Init+0x340>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d013      	beq.n	800158e <HAL_GPIO_Init+0x236>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4c      	ldr	r2, [pc, #304]	@ (800169c <HAL_GPIO_Init+0x344>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00d      	beq.n	800158a <HAL_GPIO_Init+0x232>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4b      	ldr	r2, [pc, #300]	@ (80016a0 <HAL_GPIO_Init+0x348>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d007      	beq.n	8001586 <HAL_GPIO_Init+0x22e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4a      	ldr	r2, [pc, #296]	@ (80016a4 <HAL_GPIO_Init+0x34c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d101      	bne.n	8001582 <HAL_GPIO_Init+0x22a>
 800157e:	2306      	movs	r3, #6
 8001580:	e00c      	b.n	800159c <HAL_GPIO_Init+0x244>
 8001582:	2307      	movs	r3, #7
 8001584:	e00a      	b.n	800159c <HAL_GPIO_Init+0x244>
 8001586:	2305      	movs	r3, #5
 8001588:	e008      	b.n	800159c <HAL_GPIO_Init+0x244>
 800158a:	2304      	movs	r3, #4
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x244>
 800158e:	2303      	movs	r3, #3
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x244>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x244>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x244>
 800159a:	2300      	movs	r3, #0
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4093      	lsls	r3, r2
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ac:	4937      	ldr	r1, [pc, #220]	@ (800168c <HAL_GPIO_Init+0x334>)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ba:	4b3b      	ldr	r3, [pc, #236]	@ (80016a8 <HAL_GPIO_Init+0x350>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4013      	ands	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015de:	4a32      	ldr	r2, [pc, #200]	@ (80016a8 <HAL_GPIO_Init+0x350>)
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015e4:	4b30      	ldr	r3, [pc, #192]	@ (80016a8 <HAL_GPIO_Init+0x350>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001608:	4a27      	ldr	r2, [pc, #156]	@ (80016a8 <HAL_GPIO_Init+0x350>)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800160e:	4b26      	ldr	r3, [pc, #152]	@ (80016a8 <HAL_GPIO_Init+0x350>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43db      	mvns	r3, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001632:	4a1d      	ldr	r2, [pc, #116]	@ (80016a8 <HAL_GPIO_Init+0x350>)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <HAL_GPIO_Init+0x350>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43db      	mvns	r3, r3
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	4013      	ands	r3, r2
 8001646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800165c:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <HAL_GPIO_Init+0x350>)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	3301      	adds	r3, #1
 8001666:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	f47f ae78 	bne.w	8001368 <HAL_GPIO_Init+0x10>
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000
 8001690:	48000400 	.word	0x48000400
 8001694:	48000800 	.word	0x48000800
 8001698:	48000c00 	.word	0x48000c00
 800169c:	48001000 	.word	0x48001000
 80016a0:	48001400 	.word	0x48001400
 80016a4:	48001800 	.word	0x48001800
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
 80016b8:	4613      	mov	r3, r2
 80016ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016bc:	787b      	ldrb	r3, [r7, #1]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e08d      	b.n	800180a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fbe0 	bl	8000ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2224      	movs	r2, #36	@ 0x24
 800170c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800172c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800173c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	e006      	b.n	8001764 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001762:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d108      	bne.n	800177e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	e007      	b.n	800178e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800179c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	430a      	orrs	r2, r1
 80017ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69d9      	ldr	r1, [r3, #28]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1a      	ldr	r2, [r3, #32]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f042 0201 	orr.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2220      	movs	r2, #32
 80017f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af02      	add	r7, sp, #8
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	4608      	mov	r0, r1
 800181e:	4611      	mov	r1, r2
 8001820:	461a      	mov	r2, r3
 8001822:	4603      	mov	r3, r0
 8001824:	817b      	strh	r3, [r7, #10]
 8001826:	460b      	mov	r3, r1
 8001828:	813b      	strh	r3, [r7, #8]
 800182a:	4613      	mov	r3, r2
 800182c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b20      	cmp	r3, #32
 8001838:	f040 80f9 	bne.w	8001a2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_I2C_Mem_Write+0x34>
 8001842:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800184e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0ed      	b.n	8001a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_I2C_Mem_Write+0x4e>
 800185e:	2302      	movs	r3, #2
 8001860:	e0e6      	b.n	8001a30 <HAL_I2C_Mem_Write+0x21c>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800186a:	f7ff fc5f 	bl	800112c <HAL_GetTick>
 800186e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2319      	movs	r3, #25
 8001876:	2201      	movs	r2, #1
 8001878:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 fac3 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0d1      	b.n	8001a30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2221      	movs	r2, #33	@ 0x21
 8001890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2240      	movs	r2, #64	@ 0x40
 8001898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a3a      	ldr	r2, [r7, #32]
 80018a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80018ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018b4:	88f8      	ldrh	r0, [r7, #6]
 80018b6:	893a      	ldrh	r2, [r7, #8]
 80018b8:	8979      	ldrh	r1, [r7, #10]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	4603      	mov	r3, r0
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 f9d3 	bl	8001c70 <I2C_RequestMemoryWrite>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e0a9      	b.n	8001a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	2bff      	cmp	r3, #255	@ 0xff
 80018e4:	d90e      	bls.n	8001904 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	22ff      	movs	r2, #255	@ 0xff
 80018ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	8979      	ldrh	r1, [r7, #10]
 80018f4:	2300      	movs	r3, #0
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 fc47 	bl	8002190 <I2C_TransferConfig>
 8001902:	e00f      	b.n	8001924 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001912:	b2da      	uxtb	r2, r3
 8001914:	8979      	ldrh	r1, [r7, #10]
 8001916:	2300      	movs	r3, #0
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 fc36 	bl	8002190 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 fac6 	bl	8001eba <I2C_WaitOnTXISFlagUntilTimeout>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e07b      	b.n	8001a30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001952:	b29b      	uxth	r3, r3
 8001954:	3b01      	subs	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001960:	3b01      	subs	r3, #1
 8001962:	b29a      	uxth	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800196c:	b29b      	uxth	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d034      	beq.n	80019dc <HAL_I2C_Mem_Write+0x1c8>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001976:	2b00      	cmp	r3, #0
 8001978:	d130      	bne.n	80019dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001980:	2200      	movs	r2, #0
 8001982:	2180      	movs	r1, #128	@ 0x80
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 fa3f 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e04d      	b.n	8001a30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001998:	b29b      	uxth	r3, r3
 800199a:	2bff      	cmp	r3, #255	@ 0xff
 800199c:	d90e      	bls.n	80019bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	22ff      	movs	r2, #255	@ 0xff
 80019a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	8979      	ldrh	r1, [r7, #10]
 80019ac:	2300      	movs	r3, #0
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 fbeb 	bl	8002190 <I2C_TransferConfig>
 80019ba:	e00f      	b.n	80019dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	8979      	ldrh	r1, [r7, #10]
 80019ce:	2300      	movs	r3, #0
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 fbda 	bl	8002190 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d19e      	bne.n	8001924 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f000 faac 	bl	8001f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e01a      	b.n	8001a30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2220      	movs	r2, #32
 8001a00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <HAL_I2C_Mem_Write+0x224>)
 8001a0e:	400b      	ands	r3, r1
 8001a10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	e000      	b.n	8001a30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a2e:	2302      	movs	r3, #2
  }
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	fe00e800 	.word	0xfe00e800

08001a3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	817b      	strh	r3, [r7, #10]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	813b      	strh	r3, [r7, #8]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	f040 80fd 	bne.w	8001c5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_I2C_Mem_Read+0x34>
 8001a6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0f1      	b.n	8001c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_I2C_Mem_Read+0x4e>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e0ea      	b.n	8001c60 <HAL_I2C_Mem_Read+0x224>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a92:	f7ff fb4b 	bl	800112c <HAL_GetTick>
 8001a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2319      	movs	r3, #25
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f9af 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0d5      	b.n	8001c60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2222      	movs	r2, #34	@ 0x22
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2240      	movs	r2, #64	@ 0x40
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001adc:	88f8      	ldrh	r0, [r7, #6]
 8001ade:	893a      	ldrh	r2, [r7, #8]
 8001ae0:	8979      	ldrh	r1, [r7, #10]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	4603      	mov	r3, r0
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f913 	bl	8001d18 <I2C_RequestMemoryRead>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0ad      	b.n	8001c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2bff      	cmp	r3, #255	@ 0xff
 8001b0c:	d90e      	bls.n	8001b2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2201      	movs	r2, #1
 8001b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	8979      	ldrh	r1, [r7, #10]
 8001b1c:	4b52      	ldr	r3, [pc, #328]	@ (8001c68 <HAL_I2C_Mem_Read+0x22c>)
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fb33 	bl	8002190 <I2C_TransferConfig>
 8001b2a:	e00f      	b.n	8001b4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	8979      	ldrh	r1, [r7, #10]
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c68 <HAL_I2C_Mem_Read+0x22c>)
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fb22 	bl	8002190 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	2200      	movs	r2, #0
 8001b54:	2104      	movs	r1, #4
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 f956 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e07c      	b.n	8001c60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d034      	beq.n	8001c0c <HAL_I2C_Mem_Read+0x1d0>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d130      	bne.n	8001c0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2180      	movs	r1, #128	@ 0x80
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f927 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e04d      	b.n	8001c60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	2bff      	cmp	r3, #255	@ 0xff
 8001bcc:	d90e      	bls.n	8001bec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	8979      	ldrh	r1, [r7, #10]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fad3 	bl	8002190 <I2C_TransferConfig>
 8001bea:	e00f      	b.n	8001c0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	8979      	ldrh	r1, [r7, #10]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fac2 	bl	8002190 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d19a      	bne.n	8001b4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f994 	bl	8001f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e01a      	b.n	8001c60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2220      	movs	r2, #32
 8001c30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <HAL_I2C_Mem_Read+0x230>)
 8001c3e:	400b      	ands	r3, r1
 8001c40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2220      	movs	r2, #32
 8001c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	e000      	b.n	8001c60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001c5e:	2302      	movs	r3, #2
  }
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	80002400 	.word	0x80002400
 8001c6c:	fe00e800 	.word	0xfe00e800

08001c70 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	4608      	mov	r0, r1
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	817b      	strh	r3, [r7, #10]
 8001c82:	460b      	mov	r3, r1
 8001c84:	813b      	strh	r3, [r7, #8]
 8001c86:	4613      	mov	r3, r2
 8001c88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	8979      	ldrh	r1, [r7, #10]
 8001c90:	4b20      	ldr	r3, [pc, #128]	@ (8001d14 <I2C_RequestMemoryWrite+0xa4>)
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 fa79 	bl	8002190 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	69b9      	ldr	r1, [r7, #24]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f909 	bl	8001eba <I2C_WaitOnTXISFlagUntilTimeout>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e02c      	b.n	8001d0c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cb8:	893b      	ldrh	r3, [r7, #8]
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cc2:	e015      	b.n	8001cf0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cc4:	893b      	ldrh	r3, [r7, #8]
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	69b9      	ldr	r1, [r7, #24]
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f8ef 	bl	8001eba <I2C_WaitOnTXISFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e012      	b.n	8001d0c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ce6:	893b      	ldrh	r3, [r7, #8]
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2180      	movs	r1, #128	@ 0x80
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f884 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e000      	b.n	8001d0c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	80002000 	.word	0x80002000

08001d18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	4608      	mov	r0, r1
 8001d22:	4611      	mov	r1, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	4603      	mov	r3, r0
 8001d28:	817b      	strh	r3, [r7, #10]
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	813b      	strh	r3, [r7, #8]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	8979      	ldrh	r1, [r7, #10]
 8001d38:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <I2C_RequestMemoryRead+0xa4>)
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 fa26 	bl	8002190 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d44:	69fa      	ldr	r2, [r7, #28]
 8001d46:	69b9      	ldr	r1, [r7, #24]
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f8b6 	bl	8001eba <I2C_WaitOnTXISFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e02c      	b.n	8001db2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d105      	bne.n	8001d6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d5e:	893b      	ldrh	r3, [r7, #8]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d68:	e015      	b.n	8001d96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d6a:	893b      	ldrh	r3, [r7, #8]
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d78:	69fa      	ldr	r2, [r7, #28]
 8001d7a:	69b9      	ldr	r1, [r7, #24]
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f89c 	bl	8001eba <I2C_WaitOnTXISFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e012      	b.n	8001db2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d8c:	893b      	ldrh	r3, [r7, #8]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2140      	movs	r1, #64	@ 0x40
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f831 	bl	8001e08 <I2C_WaitOnFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	80002000 	.word	0x80002000

08001dc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d103      	bne.n	8001dde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d007      	beq.n	8001dfc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699a      	ldr	r2, [r3, #24]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f042 0201 	orr.w	r2, r2, #1
 8001dfa:	619a      	str	r2, [r3, #24]
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e18:	e03b      	b.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f000 f8d6 	bl	8001fd0 <I2C_IsErrorOccurred>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e041      	b.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e34:	d02d      	beq.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e36:	f7ff f979 	bl	800112c <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d302      	bcc.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d122      	bne.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	4013      	ands	r3, r2
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d113      	bne.n	8001e92 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f043 0220 	orr.w	r2, r3, #32
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d0b4      	beq.n	8001e1a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ec6:	e033      	b.n	8001f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	68b9      	ldr	r1, [r7, #8]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f87f 	bl	8001fd0 <I2C_IsErrorOccurred>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e031      	b.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ee2:	d025      	beq.n	8001f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ee4:	f7ff f922 	bl	800112c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d302      	bcc.n	8001efa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11a      	bne.n	8001f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d013      	beq.n	8001f30 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e007      	b.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d1c4      	bne.n	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f54:	e02f      	b.n	8001fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f838 	bl	8001fd0 <I2C_IsErrorOccurred>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e02d      	b.n	8001fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6a:	f7ff f8df 	bl	800112c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d302      	bcc.n	8001f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d11a      	bne.n	8001fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b20      	cmp	r3, #32
 8001f8c:	d013      	beq.n	8001fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f92:	f043 0220 	orr.w	r2, r3, #32
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e007      	b.n	8001fc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d1c8      	bne.n	8001f56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
	...

08001fd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	@ 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f003 0310 	and.w	r3, r3, #16
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d068      	beq.n	80020ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2210      	movs	r2, #16
 8002002:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002004:	e049      	b.n	800209a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800200c:	d045      	beq.n	800209a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800200e:	f7ff f88d 	bl	800112c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	429a      	cmp	r2, r3
 800201c:	d302      	bcc.n	8002024 <I2C_IsErrorOccurred+0x54>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d13a      	bne.n	800209a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800202e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002036:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002046:	d121      	bne.n	800208c <I2C_IsErrorOccurred+0xbc>
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800204e:	d01d      	beq.n	800208c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002050:	7cfb      	ldrb	r3, [r7, #19]
 8002052:	2b20      	cmp	r3, #32
 8002054:	d01a      	beq.n	800208c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002064:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002066:	f7ff f861 	bl	800112c <HAL_GetTick>
 800206a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800206c:	e00e      	b.n	800208c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800206e:	f7ff f85d 	bl	800112c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b19      	cmp	r3, #25
 800207a:	d907      	bls.n	800208c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800207c:	6a3b      	ldr	r3, [r7, #32]
 800207e:	f043 0320 	orr.w	r3, r3, #32
 8002082:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800208a:	e006      	b.n	800209a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b20      	cmp	r3, #32
 8002098:	d1e9      	bne.n	800206e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d003      	beq.n	80020b0 <I2C_IsErrorOccurred+0xe0>
 80020a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0aa      	beq.n	8002006 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80020b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d103      	bne.n	80020c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2220      	movs	r2, #32
 80020be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00b      	beq.n	80020f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00b      	beq.n	800211a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002112:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00b      	beq.n	800213c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	f043 0302 	orr.w	r3, r3, #2
 800212a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002134:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800213c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01c      	beq.n	800217e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff fe3b 	bl	8001dc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b0d      	ldr	r3, [pc, #52]	@ (800218c <I2C_IsErrorOccurred+0x1bc>)
 8002156:	400b      	ands	r3, r1
 8002158:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	431a      	orrs	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2220      	movs	r2, #32
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800217e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002182:	4618      	mov	r0, r3
 8002184:	3728      	adds	r7, #40	@ 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	fe00e800 	.word	0xfe00e800

08002190 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	817b      	strh	r3, [r7, #10]
 800219e:	4613      	mov	r3, r2
 80021a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021a2:	897b      	ldrh	r3, [r7, #10]
 80021a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021a8:	7a7b      	ldrb	r3, [r7, #9]
 80021aa:	041b      	lsls	r3, r3, #16
 80021ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021b6:	6a3b      	ldr	r3, [r7, #32]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	0d5b      	lsrs	r3, r3, #21
 80021ca:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80021ce:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <I2C_TransferConfig+0x60>)
 80021d0:	430b      	orrs	r3, r1
 80021d2:	43db      	mvns	r3, r3
 80021d4:	ea02 0103 	and.w	r1, r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	430a      	orrs	r2, r1
 80021e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	03ff63ff 	.word	0x03ff63ff

080021f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b20      	cmp	r3, #32
 8002208:	d138      	bne.n	800227c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002214:	2302      	movs	r3, #2
 8002216:	e032      	b.n	800227e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	@ 0x24
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002246:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6819      	ldr	r1, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2220      	movs	r2, #32
 800226c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e000      	b.n	800227e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800227c:	2302      	movs	r3, #2
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800228a:	b480      	push	{r7}
 800228c:	b085      	sub	sp, #20
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b20      	cmp	r3, #32
 800229e:	d139      	bne.n	8002314 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d101      	bne.n	80022ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e033      	b.n	8002316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2224      	movs	r2, #36	@ 0x24
 80022ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0201 	orr.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2220      	movs	r2, #32
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	e000      	b.n	8002316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002314:	2302      	movs	r3, #2
  }
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <HAL_PWREx_GetVoltageRange+0x18>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40007000 	.word	0x40007000

08002340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800234e:	d130      	bne.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002350:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800235c:	d038      	beq.n	80023d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800235e:	4b20      	ldr	r3, [pc, #128]	@ (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002366:	4a1e      	ldr	r2, [pc, #120]	@ (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002368:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800236c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800236e:	4b1d      	ldr	r3, [pc, #116]	@ (80023e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2232      	movs	r2, #50	@ 0x32
 8002374:	fb02 f303 	mul.w	r3, r2, r3
 8002378:	4a1b      	ldr	r2, [pc, #108]	@ (80023e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0c9b      	lsrs	r3, r3, #18
 8002380:	3301      	adds	r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002384:	e002      	b.n	800238c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	3b01      	subs	r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800238c:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002398:	d102      	bne.n	80023a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f2      	bne.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023a0:	4b0f      	ldr	r3, [pc, #60]	@ (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ac:	d110      	bne.n	80023d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e00f      	b.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023b2:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023be:	d007      	beq.n	80023d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023c0:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023c8:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40007000 	.word	0x40007000
 80023e4:	20000000 	.word	0x20000000
 80023e8:	431bde83 	.word	0x431bde83

080023ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e3ca      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fe:	4b97      	ldr	r3, [pc, #604]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002408:	4b94      	ldr	r3, [pc, #592]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	f000 80e4 	beq.w	80025e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <HAL_RCC_OscConfig+0x4a>
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	2b0c      	cmp	r3, #12
 800242a:	f040 808b 	bne.w	8002544 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b01      	cmp	r3, #1
 8002432:	f040 8087 	bne.w	8002544 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002436:	4b89      	ldr	r3, [pc, #548]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d005      	beq.n	800244e <HAL_RCC_OscConfig+0x62>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e3a2      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1a      	ldr	r2, [r3, #32]
 8002452:	4b82      	ldr	r3, [pc, #520]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d004      	beq.n	8002468 <HAL_RCC_OscConfig+0x7c>
 800245e:	4b7f      	ldr	r3, [pc, #508]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002466:	e005      	b.n	8002474 <HAL_RCC_OscConfig+0x88>
 8002468:	4b7c      	ldr	r3, [pc, #496]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 800246a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002474:	4293      	cmp	r3, r2
 8002476:	d223      	bcs.n	80024c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4618      	mov	r0, r3
 800247e:	f000 fd1d 	bl	8002ebc <RCC_SetFlashLatencyFromMSIRange>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e383      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800248c:	4b73      	ldr	r3, [pc, #460]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a72      	ldr	r2, [pc, #456]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002492:	f043 0308 	orr.w	r3, r3, #8
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b70      	ldr	r3, [pc, #448]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	496d      	ldr	r1, [pc, #436]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024aa:	4b6c      	ldr	r3, [pc, #432]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	4968      	ldr	r1, [pc, #416]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
 80024be:	e025      	b.n	800250c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024c0:	4b66      	ldr	r3, [pc, #408]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a65      	ldr	r2, [pc, #404]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b63      	ldr	r3, [pc, #396]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4960      	ldr	r1, [pc, #384]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024de:	4b5f      	ldr	r3, [pc, #380]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	021b      	lsls	r3, r3, #8
 80024ec:	495b      	ldr	r1, [pc, #364]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d109      	bne.n	800250c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 fcdd 	bl	8002ebc <RCC_SetFlashLatencyFromMSIRange>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e343      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800250c:	f000 fc4a 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002510:	4602      	mov	r2, r0
 8002512:	4b52      	ldr	r3, [pc, #328]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 030f 	and.w	r3, r3, #15
 800251c:	4950      	ldr	r1, [pc, #320]	@ (8002660 <HAL_RCC_OscConfig+0x274>)
 800251e:	5ccb      	ldrb	r3, [r1, r3]
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
 8002528:	4a4e      	ldr	r2, [pc, #312]	@ (8002664 <HAL_RCC_OscConfig+0x278>)
 800252a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800252c:	4b4e      	ldr	r3, [pc, #312]	@ (8002668 <HAL_RCC_OscConfig+0x27c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fdab 	bl	800108c <HAL_InitTick>
 8002536:	4603      	mov	r3, r0
 8002538:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d052      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	e327      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d032      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800254c:	4b43      	ldr	r3, [pc, #268]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a42      	ldr	r2, [pc, #264]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002558:	f7fe fde8 	bl	800112c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002560:	f7fe fde4 	bl	800112c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e310      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002572:	4b3a      	ldr	r3, [pc, #232]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800257e:	4b37      	ldr	r3, [pc, #220]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a36      	ldr	r2, [pc, #216]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002584:	f043 0308 	orr.w	r3, r3, #8
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b34      	ldr	r3, [pc, #208]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	4931      	ldr	r1, [pc, #196]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800259c:	4b2f      	ldr	r3, [pc, #188]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	492c      	ldr	r1, [pc, #176]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e01a      	b.n	80025e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025b2:	4b2a      	ldr	r3, [pc, #168]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a29      	ldr	r2, [pc, #164]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025be:	f7fe fdb5 	bl	800112c <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c6:	f7fe fdb1 	bl	800112c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e2dd      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d8:	4b20      	ldr	r3, [pc, #128]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x1da>
 80025e4:	e000      	b.n	80025e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d074      	beq.n	80026de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d005      	beq.n	8002606 <HAL_RCC_OscConfig+0x21a>
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b0c      	cmp	r3, #12
 80025fe:	d10e      	bne.n	800261e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d10b      	bne.n	800261e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d064      	beq.n	80026dc <HAL_RCC_OscConfig+0x2f0>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d160      	bne.n	80026dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e2ba      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x24a>
 8002628:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0b      	ldr	r2, [pc, #44]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e026      	b.n	8002684 <HAL_RCC_OscConfig+0x298>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800263e:	d115      	bne.n	800266c <HAL_RCC_OscConfig+0x280>
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a05      	ldr	r2, [pc, #20]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002646:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	4b03      	ldr	r3, [pc, #12]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a02      	ldr	r2, [pc, #8]	@ (800265c <HAL_RCC_OscConfig+0x270>)
 8002652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	e014      	b.n	8002684 <HAL_RCC_OscConfig+0x298>
 800265a:	bf00      	nop
 800265c:	40021000 	.word	0x40021000
 8002660:	080039bc 	.word	0x080039bc
 8002664:	20000000 	.word	0x20000000
 8002668:	20000004 	.word	0x20000004
 800266c:	4ba0      	ldr	r3, [pc, #640]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a9f      	ldr	r2, [pc, #636]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	4b9d      	ldr	r3, [pc, #628]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a9c      	ldr	r2, [pc, #624]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 800267e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d013      	beq.n	80026b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7fe fd4e 	bl	800112c <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002694:	f7fe fd4a 	bl	800112c <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b64      	cmp	r3, #100	@ 0x64
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e276      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a6:	4b92      	ldr	r3, [pc, #584]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x2a8>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fd3a 	bl	800112c <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fd36 	bl	800112c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e262      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ce:	4b88      	ldr	r3, [pc, #544]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x2d0>
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d060      	beq.n	80027ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_OscConfig+0x310>
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d119      	bne.n	800272a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d116      	bne.n	800272a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026fc:	4b7c      	ldr	r3, [pc, #496]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d005      	beq.n	8002714 <HAL_RCC_OscConfig+0x328>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d101      	bne.n	8002714 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e23f      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b76      	ldr	r3, [pc, #472]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	061b      	lsls	r3, r3, #24
 8002722:	4973      	ldr	r1, [pc, #460]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002728:	e040      	b.n	80027ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d023      	beq.n	800277a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002732:	4b6f      	ldr	r3, [pc, #444]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a6e      	ldr	r2, [pc, #440]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273e:	f7fe fcf5 	bl	800112c <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002746:	f7fe fcf1 	bl	800112c <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e21d      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002758:	4b65      	ldr	r3, [pc, #404]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002764:	4b62      	ldr	r3, [pc, #392]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	061b      	lsls	r3, r3, #24
 8002772:	495f      	ldr	r1, [pc, #380]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
 8002778:	e018      	b.n	80027ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277a:	4b5d      	ldr	r3, [pc, #372]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5c      	ldr	r2, [pc, #368]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002780:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002786:	f7fe fcd1 	bl	800112c <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278e:	f7fe fccd 	bl	800112c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e1f9      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027a0:	4b53      	ldr	r3, [pc, #332]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d03c      	beq.n	8002832 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01c      	beq.n	80027fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c0:	4b4b      	ldr	r3, [pc, #300]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80027c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027c6:	4a4a      	ldr	r2, [pc, #296]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7fe fcac 	bl	800112c <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d8:	f7fe fca8 	bl	800112c <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e1d4      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ea:	4b41      	ldr	r3, [pc, #260]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80027ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0ef      	beq.n	80027d8 <HAL_RCC_OscConfig+0x3ec>
 80027f8:	e01b      	b.n	8002832 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fa:	4b3d      	ldr	r3, [pc, #244]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80027fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002800:	4a3b      	ldr	r2, [pc, #236]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002802:	f023 0301 	bic.w	r3, r3, #1
 8002806:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7fe fc8f 	bl	800112c <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002812:	f7fe fc8b 	bl	800112c <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e1b7      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002824:	4b32      	ldr	r3, [pc, #200]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002826:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1ef      	bne.n	8002812 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0304 	and.w	r3, r3, #4
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80a6 	beq.w	800298c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002840:	2300      	movs	r3, #0
 8002842:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002844:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10d      	bne.n	800286c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002850:	4b27      	ldr	r3, [pc, #156]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002854:	4a26      	ldr	r2, [pc, #152]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285a:	6593      	str	r3, [r2, #88]	@ 0x58
 800285c:	4b24      	ldr	r3, [pc, #144]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002868:	2301      	movs	r3, #1
 800286a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800286c:	4b21      	ldr	r3, [pc, #132]	@ (80028f4 <HAL_RCC_OscConfig+0x508>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d118      	bne.n	80028aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002878:	4b1e      	ldr	r3, [pc, #120]	@ (80028f4 <HAL_RCC_OscConfig+0x508>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <HAL_RCC_OscConfig+0x508>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002884:	f7fe fc52 	bl	800112c <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7fe fc4e 	bl	800112c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e17a      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289e:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <HAL_RCC_OscConfig+0x508>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d108      	bne.n	80028c4 <HAL_RCC_OscConfig+0x4d8>
 80028b2:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b8:	4a0d      	ldr	r2, [pc, #52]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028c2:	e029      	b.n	8002918 <HAL_RCC_OscConfig+0x52c>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d115      	bne.n	80028f8 <HAL_RCC_OscConfig+0x50c>
 80028cc:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	4a07      	ldr	r2, [pc, #28]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80028d4:	f043 0304 	orr.w	r3, r3, #4
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	4a03      	ldr	r2, [pc, #12]	@ (80028f0 <HAL_RCC_OscConfig+0x504>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ec:	e014      	b.n	8002918 <HAL_RCC_OscConfig+0x52c>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40007000 	.word	0x40007000
 80028f8:	4b9c      	ldr	r3, [pc, #624]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fe:	4a9b      	ldr	r2, [pc, #620]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002908:	4b98      	ldr	r3, [pc, #608]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290e:	4a97      	ldr	r2, [pc, #604]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d016      	beq.n	800294e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fc04 	bl	800112c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002926:	e00a      	b.n	800293e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7fe fc00 	bl	800112c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e12a      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293e:	4b8b      	ldr	r3, [pc, #556]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0ed      	beq.n	8002928 <HAL_RCC_OscConfig+0x53c>
 800294c:	e015      	b.n	800297a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe fbed 	bl	800112c <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe fbe9 	bl	800112c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e113      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800296c:	4b7f      	ldr	r3, [pc, #508]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ed      	bne.n	8002956 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297a:	7ffb      	ldrb	r3, [r7, #31]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b7a      	ldr	r3, [pc, #488]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002984:	4a79      	ldr	r2, [pc, #484]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80fe 	beq.w	8002b92 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299a:	2b02      	cmp	r3, #2
 800299c:	f040 80d0 	bne.w	8002b40 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029a0:	4b72      	ldr	r3, [pc, #456]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 0203 	and.w	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d130      	bne.n	8002a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	3b01      	subs	r3, #1
 80029c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d127      	bne.n	8002a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d11f      	bne.n	8002a16 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029e0:	2a07      	cmp	r2, #7
 80029e2:	bf14      	ite	ne
 80029e4:	2201      	movne	r2, #1
 80029e6:	2200      	moveq	r2, #0
 80029e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d113      	bne.n	8002a16 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f8:	085b      	lsrs	r3, r3, #1
 80029fa:	3b01      	subs	r3, #1
 80029fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d109      	bne.n	8002a16 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d06e      	beq.n	8002af4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	2b0c      	cmp	r3, #12
 8002a1a:	d069      	beq.n	8002af0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a1c:	4b53      	ldr	r3, [pc, #332]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a28:	4b50      	ldr	r3, [pc, #320]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0ad      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a38:	4b4c      	ldr	r3, [pc, #304]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a4b      	ldr	r2, [pc, #300]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a44:	f7fe fb72 	bl	800112c <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fb6e 	bl	800112c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e09a      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5e:	4b43      	ldr	r3, [pc, #268]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a6a:	4b40      	ldr	r3, [pc, #256]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	4b40      	ldr	r3, [pc, #256]	@ (8002b70 <HAL_RCC_OscConfig+0x784>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002a7a:	3a01      	subs	r2, #1
 8002a7c:	0112      	lsls	r2, r2, #4
 8002a7e:	4311      	orrs	r1, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002a84:	0212      	lsls	r2, r2, #8
 8002a86:	4311      	orrs	r1, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a8c:	0852      	lsrs	r2, r2, #1
 8002a8e:	3a01      	subs	r2, #1
 8002a90:	0552      	lsls	r2, r2, #21
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a98:	0852      	lsrs	r2, r2, #1
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	0652      	lsls	r2, r2, #25
 8002a9e:	4311      	orrs	r1, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002aa4:	0912      	lsrs	r2, r2, #4
 8002aa6:	0452      	lsls	r2, r2, #17
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	4930      	ldr	r1, [pc, #192]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002ab6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002abc:	4b2b      	ldr	r3, [pc, #172]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac8:	f7fe fb30 	bl	800112c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fb2c 	bl	800112c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e058      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae2:	4b22      	ldr	r3, [pc, #136]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aee:	e050      	b.n	8002b92 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e04f      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d148      	bne.n	8002b92 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b00:	4b1a      	ldr	r3, [pc, #104]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a19      	ldr	r2, [pc, #100]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002b06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b0c:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4a16      	ldr	r2, [pc, #88]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b18:	f7fe fb08 	bl	800112c <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7fe fb04 	bl	800112c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e030      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b32:	4b0e      	ldr	r3, [pc, #56]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x734>
 8002b3e:	e028      	b.n	8002b92 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	2b0c      	cmp	r3, #12
 8002b44:	d023      	beq.n	8002b8e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b46:	4b09      	ldr	r3, [pc, #36]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a08      	ldr	r2, [pc, #32]	@ (8002b6c <HAL_RCC_OscConfig+0x780>)
 8002b4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b52:	f7fe faeb 	bl	800112c <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b58:	e00c      	b.n	8002b74 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7fe fae7 	bl	800112c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d905      	bls.n	8002b74 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e013      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b74:	4b09      	ldr	r3, [pc, #36]	@ (8002b9c <HAL_RCC_OscConfig+0x7b0>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ec      	bne.n	8002b5a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b80:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <HAL_RCC_OscConfig+0x7b0>)
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	4905      	ldr	r1, [pc, #20]	@ (8002b9c <HAL_RCC_OscConfig+0x7b0>)
 8002b86:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_RCC_OscConfig+0x7b4>)
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60cb      	str	r3, [r1, #12]
 8002b8c:	e001      	b.n	8002b92 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	feeefffc 	.word	0xfeeefffc

08002ba4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0e7      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bb8:	4b75      	ldr	r3, [pc, #468]	@ (8002d90 <HAL_RCC_ClockConfig+0x1ec>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d910      	bls.n	8002be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bc6:	4b72      	ldr	r3, [pc, #456]	@ (8002d90 <HAL_RCC_ClockConfig+0x1ec>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f023 0207 	bic.w	r2, r3, #7
 8002bce:	4970      	ldr	r1, [pc, #448]	@ (8002d90 <HAL_RCC_ClockConfig+0x1ec>)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd6:	4b6e      	ldr	r3, [pc, #440]	@ (8002d90 <HAL_RCC_ClockConfig+0x1ec>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0cf      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	4b66      	ldr	r3, [pc, #408]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d908      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c04:	4b63      	ldr	r3, [pc, #396]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	4960      	ldr	r1, [pc, #384]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d04c      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d121      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e0a6      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d107      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c42:	4b54      	ldr	r3, [pc, #336]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d115      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e09a      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d107      	bne.n	8002c6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c5a:	4b4e      	ldr	r3, [pc, #312]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e08e      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e086      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c7a:	4b46      	ldr	r3, [pc, #280]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f023 0203 	bic.w	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4943      	ldr	r1, [pc, #268]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c8c:	f7fe fa4e 	bl	800112c <HAL_GetTick>
 8002c90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c94:	f7fe fa4a 	bl	800112c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e06e      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	4b3a      	ldr	r3, [pc, #232]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 020c 	and.w	r2, r3, #12
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1eb      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	4b31      	ldr	r3, [pc, #196]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d208      	bcs.n	8002cea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	492b      	ldr	r1, [pc, #172]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cea:	4b29      	ldr	r3, [pc, #164]	@ (8002d90 <HAL_RCC_ClockConfig+0x1ec>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d210      	bcs.n	8002d1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf8:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 0207 	bic.w	r2, r3, #7
 8002d00:	4923      	ldr	r1, [pc, #140]	@ (8002d90 <HAL_RCC_ClockConfig+0x1ec>)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d08:	4b21      	ldr	r3, [pc, #132]	@ (8002d90 <HAL_RCC_ClockConfig+0x1ec>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e036      	b.n	8002d88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d26:	4b1b      	ldr	r3, [pc, #108]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4918      	ldr	r1, [pc, #96]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d44:	4b13      	ldr	r3, [pc, #76]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4910      	ldr	r1, [pc, #64]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d58:	f000 f824 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <HAL_RCC_ClockConfig+0x1f0>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	091b      	lsrs	r3, r3, #4
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	490b      	ldr	r1, [pc, #44]	@ (8002d98 <HAL_RCC_ClockConfig+0x1f4>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
 8002d74:	4a09      	ldr	r2, [pc, #36]	@ (8002d9c <HAL_RCC_ClockConfig+0x1f8>)
 8002d76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d78:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <HAL_RCC_ClockConfig+0x1fc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe f985 	bl	800108c <HAL_InitTick>
 8002d82:	4603      	mov	r3, r0
 8002d84:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d86:	7afb      	ldrb	r3, [r7, #11]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40021000 	.word	0x40021000
 8002d98:	080039bc 	.word	0x080039bc
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	20000004 	.word	0x20000004

08002da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	@ 0x24
 8002da8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	4b3e      	ldr	r3, [pc, #248]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b0c      	cmp	r3, #12
 8002dd0:	d121      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d11e      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dd8:	4b34      	ldr	r3, [pc, #208]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0308 	and.w	r3, r3, #8
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002de4:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	f003 030f 	and.w	r3, r3, #15
 8002df0:	61fb      	str	r3, [r7, #28]
 8002df2:	e005      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002df4:	4b2d      	ldr	r3, [pc, #180]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e00:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10d      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d102      	bne.n	8002e22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e1c:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e1e:	61bb      	str	r3, [r7, #24]
 8002e20:	e004      	b.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e28:	4b23      	ldr	r3, [pc, #140]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d134      	bne.n	8002e9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e32:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d003      	beq.n	8002e4a <HAL_RCC_GetSysClockFreq+0xa6>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d003      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0xac>
 8002e48:	e005      	b.n	8002e56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e4c:	617b      	str	r3, [r7, #20]
      break;
 8002e4e:	e005      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e50:	4b19      	ldr	r3, [pc, #100]	@ (8002eb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e52:	617b      	str	r3, [r7, #20]
      break;
 8002e54:	e002      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	617b      	str	r3, [r7, #20]
      break;
 8002e5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	3301      	adds	r3, #1
 8002e68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	fb03 f202 	mul.w	r2, r3, r2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e82:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x108>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	0e5b      	lsrs	r3, r3, #25
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e9c:	69bb      	ldr	r3, [r7, #24]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	@ 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	080039cc 	.word	0x080039cc
 8002eb4:	00f42400 	.word	0x00f42400
 8002eb8:	007a1200 	.word	0x007a1200

08002ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ed4:	f7ff fa26 	bl	8002324 <HAL_PWREx_GetVoltageRange>
 8002ed8:	6178      	str	r0, [r7, #20]
 8002eda:	e014      	b.n	8002f06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b25      	ldr	r3, [pc, #148]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee0:	4a24      	ldr	r2, [pc, #144]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ee8:	4b22      	ldr	r3, [pc, #136]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ef4:	f7ff fa16 	bl	8002324 <HAL_PWREx_GetVoltageRange>
 8002ef8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4b1e      	ldr	r3, [pc, #120]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efe:	4a1d      	ldr	r2, [pc, #116]	@ (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f0c:	d10b      	bne.n	8002f26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b80      	cmp	r3, #128	@ 0x80
 8002f12:	d919      	bls.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f18:	d902      	bls.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	e013      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f20:	2301      	movs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	e010      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b80      	cmp	r3, #128	@ 0x80
 8002f2a:	d902      	bls.n	8002f32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	e00a      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b80      	cmp	r3, #128	@ 0x80
 8002f36:	d102      	bne.n	8002f3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f38:	2302      	movs	r3, #2
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	e004      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b70      	cmp	r3, #112	@ 0x70
 8002f42:	d101      	bne.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f44:	2301      	movs	r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f48:	4b0b      	ldr	r3, [pc, #44]	@ (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 0207 	bic.w	r2, r3, #7
 8002f50:	4909      	ldr	r1, [pc, #36]	@ (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f58:	4b07      	ldr	r3, [pc, #28]	@ (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40022000 	.word	0x40022000

08002f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f84:	2300      	movs	r3, #0
 8002f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f88:	2300      	movs	r3, #0
 8002f8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d041      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fa0:	d02a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fa2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fa6:	d824      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fb2:	d81e      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fbc:	d010      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fbe:	e018      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fc0:	4b86      	ldr	r3, [pc, #536]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4a85      	ldr	r2, [pc, #532]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fcc:	e015      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fabb 	bl	8003550 <RCCEx_PLLSAI1_Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fde:	e00c      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fba6 	bl	8003738 <RCCEx_PLLSAI2_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff0:	e003      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ff6:	e000      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003000:	4b76      	ldr	r3, [pc, #472]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800300e:	4973      	ldr	r1, [pc, #460]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003016:	e001      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d041      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800302c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003030:	d02a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003032:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003036:	d824      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003038:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800303c:	d008      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800303e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003042:	d81e      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800304c:	d010      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800304e:	e018      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003050:	4b62      	ldr	r3, [pc, #392]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a61      	ldr	r2, [pc, #388]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800305a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800305c:	e015      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3304      	adds	r3, #4
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fa73 	bl	8003550 <RCCEx_PLLSAI1_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800306e:	e00c      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3320      	adds	r3, #32
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fb5e 	bl	8003738 <RCCEx_PLLSAI2_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003080:	e003      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	74fb      	strb	r3, [r7, #19]
      break;
 8003086:	e000      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003090:	4b52      	ldr	r3, [pc, #328]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003096:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800309e:	494f      	ldr	r1, [pc, #316]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030a6:	e001      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a0 	beq.w	80031fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030be:	4b47      	ldr	r3, [pc, #284]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030ce:	2300      	movs	r3, #0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00d      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	4b41      	ldr	r3, [pc, #260]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	4a40      	ldr	r2, [pc, #256]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030de:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e0:	4b3e      	ldr	r3, [pc, #248]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ec:	2301      	movs	r3, #1
 80030ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f0:	4b3b      	ldr	r3, [pc, #236]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a3a      	ldr	r2, [pc, #232]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030fc:	f7fe f816 	bl	800112c <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003102:	e009      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7fe f812 	bl	800112c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d902      	bls.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	74fb      	strb	r3, [r7, #19]
        break;
 8003116:	e005      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003118:	4b31      	ldr	r3, [pc, #196]	@ (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ef      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d15c      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800312a:	4b2c      	ldr	r3, [pc, #176]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003130:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003134:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	429a      	cmp	r2, r3
 8003146:	d019      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003148:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003152:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003154:	4b21      	ldr	r3, [pc, #132]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	4a20      	ldr	r2, [pc, #128]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003164:	4b1d      	ldr	r3, [pc, #116]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316a:	4a1c      	ldr	r2, [pc, #112]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003174:	4a19      	ldr	r2, [pc, #100]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fd ffd1 	bl	800112c <HAL_GetTick>
 800318a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800318c:	e00b      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fd ffcd 	bl	800112c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d902      	bls.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	74fb      	strb	r3, [r7, #19]
            break;
 80031a4:	e006      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	4b0d      	ldr	r3, [pc, #52]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ec      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ba:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ca:	4904      	ldr	r1, [pc, #16]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80031d2:	e009      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	74bb      	strb	r3, [r7, #18]
 80031d8:	e006      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e8:	7c7b      	ldrb	r3, [r7, #17]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ee:	4b9e      	ldr	r3, [pc, #632]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f2:	4a9d      	ldr	r2, [pc, #628]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003206:	4b98      	ldr	r3, [pc, #608]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320c:	f023 0203 	bic.w	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	4994      	ldr	r1, [pc, #592]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003228:	4b8f      	ldr	r3, [pc, #572]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	f023 020c 	bic.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003236:	498c      	ldr	r1, [pc, #560]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800324a:	4b87      	ldr	r3, [pc, #540]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003250:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003258:	4983      	ldr	r1, [pc, #524]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800326c:	4b7e      	ldr	r3, [pc, #504]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003272:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327a:	497b      	ldr	r1, [pc, #492]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800328e:	4b76      	ldr	r3, [pc, #472]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003294:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329c:	4972      	ldr	r1, [pc, #456]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032b0:	4b6d      	ldr	r3, [pc, #436]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032be:	496a      	ldr	r1, [pc, #424]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032d2:	4b65      	ldr	r3, [pc, #404]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	4961      	ldr	r1, [pc, #388]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032f4:	4b5c      	ldr	r3, [pc, #368]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003302:	4959      	ldr	r1, [pc, #356]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003316:	4b54      	ldr	r3, [pc, #336]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800331c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003324:	4950      	ldr	r1, [pc, #320]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003338:	4b4b      	ldr	r3, [pc, #300]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800333e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003346:	4948      	ldr	r1, [pc, #288]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800335a:	4b43      	ldr	r3, [pc, #268]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003360:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003368:	493f      	ldr	r1, [pc, #252]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d028      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800337c:	4b3a      	ldr	r3, [pc, #232]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003382:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800338a:	4937      	ldr	r1, [pc, #220]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003396:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800339a:	d106      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800339c:	4b32      	ldr	r3, [pc, #200]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a31      	ldr	r2, [pc, #196]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033a6:	60d3      	str	r3, [r2, #12]
 80033a8:	e011      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033b2:	d10c      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	2101      	movs	r1, #1
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f8c8 	bl	8003550 <RCCEx_PLLSAI1_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d028      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033da:	4b23      	ldr	r3, [pc, #140]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	491f      	ldr	r1, [pc, #124]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80033f8:	d106      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003404:	60d3      	str	r3, [r2, #12]
 8003406:	e011      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f899 	bl	8003550 <RCCEx_PLLSAI1_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d02b      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003438:	4b0b      	ldr	r3, [pc, #44]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003446:	4908      	ldr	r1, [pc, #32]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003452:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003456:	d109      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003458:	4b03      	ldr	r3, [pc, #12]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a02      	ldr	r2, [pc, #8]	@ (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003462:	60d3      	str	r3, [r2, #12]
 8003464:	e014      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003470:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003474:	d10c      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f867 	bl	8003550 <RCCEx_PLLSAI1_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02f      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800349c:	4b2b      	ldr	r3, [pc, #172]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034aa:	4928      	ldr	r1, [pc, #160]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034ba:	d10d      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	2102      	movs	r1, #2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f844 	bl	8003550 <RCCEx_PLLSAI1_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d014      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034d2:	7cfb      	ldrb	r3, [r7, #19]
 80034d4:	74bb      	strb	r3, [r7, #18]
 80034d6:	e011      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034e0:	d10c      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3320      	adds	r3, #32
 80034e6:	2102      	movs	r1, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f925 	bl	8003738 <RCCEx_PLLSAI2_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003508:	4b10      	ldr	r3, [pc, #64]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003516:	490d      	ldr	r1, [pc, #52]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800352a:	4b08      	ldr	r3, [pc, #32]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003530:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800353a:	4904      	ldr	r1, [pc, #16]	@ (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003542:	7cbb      	ldrb	r3, [r7, #18]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000

08003550 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800355e:	4b75      	ldr	r3, [pc, #468]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d018      	beq.n	800359c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800356a:	4b72      	ldr	r3, [pc, #456]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f003 0203 	and.w	r2, r3, #3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d10d      	bne.n	8003596 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
       ||
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003582:	4b6c      	ldr	r3, [pc, #432]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
       ||
 8003592:	429a      	cmp	r2, r3
 8003594:	d047      	beq.n	8003626 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	e044      	b.n	8003626 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d018      	beq.n	80035d6 <RCCEx_PLLSAI1_Config+0x86>
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d825      	bhi.n	80035f4 <RCCEx_PLLSAI1_Config+0xa4>
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d002      	beq.n	80035b2 <RCCEx_PLLSAI1_Config+0x62>
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d009      	beq.n	80035c4 <RCCEx_PLLSAI1_Config+0x74>
 80035b0:	e020      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035b2:	4b60      	ldr	r3, [pc, #384]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11d      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c2:	e01a      	b.n	80035fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d116      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d4:	e013      	b.n	80035fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035d6:	4b57      	ldr	r3, [pc, #348]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10f      	bne.n	8003602 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035e2:	4b54      	ldr	r3, [pc, #336]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d109      	bne.n	8003602 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035f2:	e006      	b.n	8003602 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
      break;
 80035f8:	e004      	b.n	8003604 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035fa:	bf00      	nop
 80035fc:	e002      	b.n	8003604 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003602:	bf00      	nop
    }

    if(status == HAL_OK)
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10d      	bne.n	8003626 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800360a:	4b4a      	ldr	r3, [pc, #296]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	3b01      	subs	r3, #1
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	430b      	orrs	r3, r1
 8003620:	4944      	ldr	r1, [pc, #272]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003622:	4313      	orrs	r3, r2
 8003624:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d17d      	bne.n	8003728 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800362c:	4b41      	ldr	r3, [pc, #260]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a40      	ldr	r2, [pc, #256]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003632:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003638:	f7fd fd78 	bl	800112c <HAL_GetTick>
 800363c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800363e:	e009      	b.n	8003654 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003640:	f7fd fd74 	bl	800112c <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d902      	bls.n	8003654 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	73fb      	strb	r3, [r7, #15]
        break;
 8003652:	e005      	b.n	8003660 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003654:	4b37      	ldr	r3, [pc, #220]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1ef      	bne.n	8003640 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003660:	7bfb      	ldrb	r3, [r7, #15]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d160      	bne.n	8003728 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d111      	bne.n	8003690 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800366c:	4b31      	ldr	r3, [pc, #196]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003674:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	6892      	ldr	r2, [r2, #8]
 800367c:	0211      	lsls	r1, r2, #8
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	0912      	lsrs	r2, r2, #4
 8003684:	0452      	lsls	r2, r2, #17
 8003686:	430a      	orrs	r2, r1
 8003688:	492a      	ldr	r1, [pc, #168]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	610b      	str	r3, [r1, #16]
 800368e:	e027      	b.n	80036e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d112      	bne.n	80036bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003696:	4b27      	ldr	r3, [pc, #156]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800369e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	0211      	lsls	r1, r2, #8
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6912      	ldr	r2, [r2, #16]
 80036ac:	0852      	lsrs	r2, r2, #1
 80036ae:	3a01      	subs	r2, #1
 80036b0:	0552      	lsls	r2, r2, #21
 80036b2:	430a      	orrs	r2, r1
 80036b4:	491f      	ldr	r1, [pc, #124]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	610b      	str	r3, [r1, #16]
 80036ba:	e011      	b.n	80036e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80036c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6892      	ldr	r2, [r2, #8]
 80036cc:	0211      	lsls	r1, r2, #8
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6952      	ldr	r2, [r2, #20]
 80036d2:	0852      	lsrs	r2, r2, #1
 80036d4:	3a01      	subs	r2, #1
 80036d6:	0652      	lsls	r2, r2, #25
 80036d8:	430a      	orrs	r2, r1
 80036da:	4916      	ldr	r1, [pc, #88]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036e0:	4b14      	ldr	r3, [pc, #80]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a13      	ldr	r2, [pc, #76]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fd fd1e 	bl	800112c <HAL_GetTick>
 80036f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036f2:	e009      	b.n	8003708 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036f4:	f7fd fd1a 	bl	800112c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d902      	bls.n	8003708 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	73fb      	strb	r3, [r7, #15]
          break;
 8003706:	e005      	b.n	8003714 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003708:	4b0a      	ldr	r3, [pc, #40]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0ef      	beq.n	80036f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800371a:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	4904      	ldr	r1, [pc, #16]	@ (8003734 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003724:	4313      	orrs	r3, r2
 8003726:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000

08003738 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003746:	4b6a      	ldr	r3, [pc, #424]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d018      	beq.n	8003784 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003752:	4b67      	ldr	r3, [pc, #412]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0203 	and.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d10d      	bne.n	800377e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
       ||
 8003766:	2b00      	cmp	r3, #0
 8003768:	d009      	beq.n	800377e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800376a:	4b61      	ldr	r3, [pc, #388]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
       ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d047      	beq.n	800380e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
 8003782:	e044      	b.n	800380e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d018      	beq.n	80037be <RCCEx_PLLSAI2_Config+0x86>
 800378c:	2b03      	cmp	r3, #3
 800378e:	d825      	bhi.n	80037dc <RCCEx_PLLSAI2_Config+0xa4>
 8003790:	2b01      	cmp	r3, #1
 8003792:	d002      	beq.n	800379a <RCCEx_PLLSAI2_Config+0x62>
 8003794:	2b02      	cmp	r3, #2
 8003796:	d009      	beq.n	80037ac <RCCEx_PLLSAI2_Config+0x74>
 8003798:	e020      	b.n	80037dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800379a:	4b55      	ldr	r3, [pc, #340]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11d      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037aa:	e01a      	b.n	80037e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037ac:	4b50      	ldr	r3, [pc, #320]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d116      	bne.n	80037e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037bc:	e013      	b.n	80037e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037be:	4b4c      	ldr	r3, [pc, #304]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10f      	bne.n	80037ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ca:	4b49      	ldr	r3, [pc, #292]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d109      	bne.n	80037ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037da:	e006      	b.n	80037ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
      break;
 80037e0:	e004      	b.n	80037ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037e2:	bf00      	nop
 80037e4:	e002      	b.n	80037ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80037ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10d      	bne.n	800380e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037f2:	4b3f      	ldr	r3, [pc, #252]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6819      	ldr	r1, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	3b01      	subs	r3, #1
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	430b      	orrs	r3, r1
 8003808:	4939      	ldr	r1, [pc, #228]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800380a:	4313      	orrs	r3, r2
 800380c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d167      	bne.n	80038e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003814:	4b36      	ldr	r3, [pc, #216]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a35      	ldr	r2, [pc, #212]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800381a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800381e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003820:	f7fd fc84 	bl	800112c <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003826:	e009      	b.n	800383c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003828:	f7fd fc80 	bl	800112c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d902      	bls.n	800383c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	73fb      	strb	r3, [r7, #15]
        break;
 800383a:	e005      	b.n	8003848 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800383c:	4b2c      	ldr	r3, [pc, #176]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ef      	bne.n	8003828 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d14a      	bne.n	80038e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d111      	bne.n	8003878 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003854:	4b26      	ldr	r3, [pc, #152]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800385c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6892      	ldr	r2, [r2, #8]
 8003864:	0211      	lsls	r1, r2, #8
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68d2      	ldr	r2, [r2, #12]
 800386a:	0912      	lsrs	r2, r2, #4
 800386c:	0452      	lsls	r2, r2, #17
 800386e:	430a      	orrs	r2, r1
 8003870:	491f      	ldr	r1, [pc, #124]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003872:	4313      	orrs	r3, r2
 8003874:	614b      	str	r3, [r1, #20]
 8003876:	e011      	b.n	800389c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003878:	4b1d      	ldr	r3, [pc, #116]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003880:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6892      	ldr	r2, [r2, #8]
 8003888:	0211      	lsls	r1, r2, #8
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6912      	ldr	r2, [r2, #16]
 800388e:	0852      	lsrs	r2, r2, #1
 8003890:	3a01      	subs	r2, #1
 8003892:	0652      	lsls	r2, r2, #25
 8003894:	430a      	orrs	r2, r1
 8003896:	4916      	ldr	r1, [pc, #88]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003898:	4313      	orrs	r3, r2
 800389a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800389c:	4b14      	ldr	r3, [pc, #80]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a13      	ldr	r2, [pc, #76]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a8:	f7fd fc40 	bl	800112c <HAL_GetTick>
 80038ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038ae:	e009      	b.n	80038c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038b0:	f7fd fc3c 	bl	800112c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d902      	bls.n	80038c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	73fb      	strb	r3, [r7, #15]
          break;
 80038c2:	e005      	b.n	80038d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038c4:	4b0a      	ldr	r3, [pc, #40]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0ef      	beq.n	80038b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038d6:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	4904      	ldr	r1, [pc, #16]	@ (80038f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000

080038f4 <memset>:
 80038f4:	4402      	add	r2, r0
 80038f6:	4603      	mov	r3, r0
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d100      	bne.n	80038fe <memset+0xa>
 80038fc:	4770      	bx	lr
 80038fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003902:	e7f9      	b.n	80038f8 <memset+0x4>

08003904 <__libc_init_array>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4d0d      	ldr	r5, [pc, #52]	@ (800393c <__libc_init_array+0x38>)
 8003908:	4c0d      	ldr	r4, [pc, #52]	@ (8003940 <__libc_init_array+0x3c>)
 800390a:	1b64      	subs	r4, r4, r5
 800390c:	10a4      	asrs	r4, r4, #2
 800390e:	2600      	movs	r6, #0
 8003910:	42a6      	cmp	r6, r4
 8003912:	d109      	bne.n	8003928 <__libc_init_array+0x24>
 8003914:	4d0b      	ldr	r5, [pc, #44]	@ (8003944 <__libc_init_array+0x40>)
 8003916:	4c0c      	ldr	r4, [pc, #48]	@ (8003948 <__libc_init_array+0x44>)
 8003918:	f000 f818 	bl	800394c <_init>
 800391c:	1b64      	subs	r4, r4, r5
 800391e:	10a4      	asrs	r4, r4, #2
 8003920:	2600      	movs	r6, #0
 8003922:	42a6      	cmp	r6, r4
 8003924:	d105      	bne.n	8003932 <__libc_init_array+0x2e>
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	f855 3b04 	ldr.w	r3, [r5], #4
 800392c:	4798      	blx	r3
 800392e:	3601      	adds	r6, #1
 8003930:	e7ee      	b.n	8003910 <__libc_init_array+0xc>
 8003932:	f855 3b04 	ldr.w	r3, [r5], #4
 8003936:	4798      	blx	r3
 8003938:	3601      	adds	r6, #1
 800393a:	e7f2      	b.n	8003922 <__libc_init_array+0x1e>
 800393c:	080039fc 	.word	0x080039fc
 8003940:	080039fc 	.word	0x080039fc
 8003944:	080039fc 	.word	0x080039fc
 8003948:	08003a00 	.word	0x08003a00

0800394c <_init>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	bf00      	nop
 8003950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003952:	bc08      	pop	{r3}
 8003954:	469e      	mov	lr, r3
 8003956:	4770      	bx	lr

08003958 <_fini>:
 8003958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395a:	bf00      	nop
 800395c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	469e      	mov	lr, r3
 8003962:	4770      	bx	lr
