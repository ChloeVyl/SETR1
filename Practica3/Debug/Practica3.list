
Practica3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001b54  08001b54  00002b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ba0  08001ba0  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ba0  08001ba0  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ba0  08001ba0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ba0  08001ba0  00002ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ba4  08001ba4  00002ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001ba8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08001bb4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001bb4  00003038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049e1  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001217  00000000  00000000  00007a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  00008c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000460  00000000  00000000  00009238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fb6  00000000  00000000  00009698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006640  00000000  00000000  0002d64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcf8c  00000000  00000000  00033c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110c1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015f8  00000000  00000000  00110c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00112258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b3c 	.word	0x08001b3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001b3c 	.word	0x08001b3c

080001c8 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001d6:	f000 fe41 	bl	8000e5c <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80001da:	2001      	movs	r0, #1
 80001dc:	f000 fb8a 	bl	80008f4 <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 80001e0:	2200      	movs	r2, #0
 80001e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80001ea:	f000 fe37 	bl	8000e5c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80001ee:	2001      	movs	r0, #1
 80001f0:	f000 fb80 	bl	80008f4 <HAL_Delay>
}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <lcd_reset>:

void lcd_reset(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 80001fc:	2200      	movs	r2, #0
 80001fe:	2104      	movs	r1, #4
 8000200:	4820      	ldr	r0, [pc, #128]	@ (8000284 <lcd_reset+0x8c>)
 8000202:	f000 fe2b 	bl	8000e5c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000206:	2200      	movs	r2, #0
 8000208:	2110      	movs	r1, #16
 800020a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800020e:	f000 fe25 	bl	8000e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	2108      	movs	r1, #8
 8000216:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800021a:	f000 fe1f 	bl	8000e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800021e:	2200      	movs	r2, #0
 8000220:	2110      	movs	r1, #16
 8000222:	4818      	ldr	r0, [pc, #96]	@ (8000284 <lcd_reset+0x8c>)
 8000224:	f000 fe1a 	bl	8000e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000228:	2200      	movs	r2, #0
 800022a:	2102      	movs	r1, #2
 800022c:	4815      	ldr	r0, [pc, #84]	@ (8000284 <lcd_reset+0x8c>)
 800022e:	f000 fe15 	bl	8000e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000232:	2200      	movs	r2, #0
 8000234:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800023c:	f000 fe0e 	bl	8000e5c <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	2108      	movs	r1, #8
 8000244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000248:	f000 fe08 	bl	8000e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800024c:	2201      	movs	r2, #1
 800024e:	2110      	movs	r1, #16
 8000250:	480c      	ldr	r0, [pc, #48]	@ (8000284 <lcd_reset+0x8c>)
 8000252:	f000 fe03 	bl	8000e5c <HAL_GPIO_WritePin>
    lcd_clock();
 8000256:	f7ff ffb7 	bl	80001c8 <lcd_clock>
    lcd_clock();
 800025a:	f7ff ffb5 	bl	80001c8 <lcd_clock>
    lcd_clock();
 800025e:	f7ff ffb3 	bl	80001c8 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000262:	2200      	movs	r2, #0
 8000264:	2108      	movs	r1, #8
 8000266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800026a:	f000 fdf7 	bl	8000e5c <HAL_GPIO_WritePin>
    lcd_clock();
 800026e:	f7ff ffab 	bl	80001c8 <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8000272:	2201      	movs	r2, #1
 8000274:	2104      	movs	r1, #4
 8000276:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800027a:	f000 fdef 	bl	8000e5c <HAL_GPIO_WritePin>
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	48000400 	.word	0x48000400

08000288 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	460a      	mov	r2, r1
 8000292:	71fb      	strb	r3, [r7, #7]
 8000294:	4613      	mov	r3, r2
 8000296:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	091b      	lsrs	r3, r3, #4
 800029c:	b2db      	uxtb	r3, r3
 800029e:	f003 0301 	and.w	r3, r3, #1
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d006      	beq.n	80002b4 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2108      	movs	r1, #8
 80002aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002ae:	f000 fdd5 	bl	8000e5c <HAL_GPIO_WritePin>
 80002b2:	e005      	b.n	80002c0 <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80002b4:	2200      	movs	r2, #0
 80002b6:	2108      	movs	r1, #8
 80002b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002bc:	f000 fdce 	bl	8000e5c <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	095b      	lsrs	r3, r3, #5
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d005      	beq.n	80002da <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80002ce:	2201      	movs	r2, #1
 80002d0:	2110      	movs	r1, #16
 80002d2:	4847      	ldr	r0, [pc, #284]	@ (80003f0 <lcd_write+0x168>)
 80002d4:	f000 fdc2 	bl	8000e5c <HAL_GPIO_WritePin>
 80002d8:	e004      	b.n	80002e4 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	2110      	movs	r1, #16
 80002de:	4844      	ldr	r0, [pc, #272]	@ (80003f0 <lcd_write+0x168>)
 80002e0:	f000 fdbc 	bl	8000e5c <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	099b      	lsrs	r3, r3, #6
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d005      	beq.n	80002fe <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80002f2:	2201      	movs	r2, #1
 80002f4:	2102      	movs	r1, #2
 80002f6:	483e      	ldr	r0, [pc, #248]	@ (80003f0 <lcd_write+0x168>)
 80002f8:	f000 fdb0 	bl	8000e5c <HAL_GPIO_WritePin>
 80002fc:	e004      	b.n	8000308 <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80002fe:	2200      	movs	r2, #0
 8000300:	2102      	movs	r1, #2
 8000302:	483b      	ldr	r0, [pc, #236]	@ (80003f0 <lcd_write+0x168>)
 8000304:	f000 fdaa 	bl	8000e5c <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	09db      	lsrs	r3, r3, #7
 800030c:	b2db      	uxtb	r3, r3
 800030e:	f003 0301 	and.w	r3, r3, #1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d006      	beq.n	8000324 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8000316:	2201      	movs	r2, #1
 8000318:	2110      	movs	r1, #16
 800031a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800031e:	f000 fd9d 	bl	8000e5c <HAL_GPIO_WritePin>
 8000322:	e005      	b.n	8000330 <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000324:	2200      	movs	r2, #0
 8000326:	2110      	movs	r1, #16
 8000328:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800032c:	f000 fd96 	bl	8000e5c <HAL_GPIO_WritePin>

    if(rs)
 8000330:	79bb      	ldrb	r3, [r7, #6]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d005      	beq.n	8000342 <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 8000336:	2201      	movs	r2, #1
 8000338:	2104      	movs	r1, #4
 800033a:	482d      	ldr	r0, [pc, #180]	@ (80003f0 <lcd_write+0x168>)
 800033c:	f000 fd8e 	bl	8000e5c <HAL_GPIO_WritePin>
 8000340:	e004      	b.n	800034c <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	2104      	movs	r1, #4
 8000346:	482a      	ldr	r0, [pc, #168]	@ (80003f0 <lcd_write+0x168>)
 8000348:	f000 fd88 	bl	8000e5c <HAL_GPIO_WritePin>

    lcd_clock();
 800034c:	f7ff ff3c 	bl	80001c8 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000350:	79fb      	ldrb	r3, [r7, #7]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	2b00      	cmp	r3, #0
 8000358:	d006      	beq.n	8000368 <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 800035a:	2201      	movs	r2, #1
 800035c:	2108      	movs	r1, #8
 800035e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000362:	f000 fd7b 	bl	8000e5c <HAL_GPIO_WritePin>
 8000366:	e005      	b.n	8000374 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000368:	2200      	movs	r2, #0
 800036a:	2108      	movs	r1, #8
 800036c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000370:	f000 fd74 	bl	8000e5c <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8000374:	79fb      	ldrb	r3, [r7, #7]
 8000376:	085b      	lsrs	r3, r3, #1
 8000378:	b2db      	uxtb	r3, r3
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	d005      	beq.n	800038e <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000382:	2201      	movs	r2, #1
 8000384:	2110      	movs	r1, #16
 8000386:	481a      	ldr	r0, [pc, #104]	@ (80003f0 <lcd_write+0x168>)
 8000388:	f000 fd68 	bl	8000e5c <HAL_GPIO_WritePin>
 800038c:	e004      	b.n	8000398 <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800038e:	2200      	movs	r2, #0
 8000390:	2110      	movs	r1, #16
 8000392:	4817      	ldr	r0, [pc, #92]	@ (80003f0 <lcd_write+0x168>)
 8000394:	f000 fd62 	bl	8000e5c <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	089b      	lsrs	r3, r3, #2
 800039c:	b2db      	uxtb	r3, r3
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d005      	beq.n	80003b2 <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2102      	movs	r1, #2
 80003aa:	4811      	ldr	r0, [pc, #68]	@ (80003f0 <lcd_write+0x168>)
 80003ac:	f000 fd56 	bl	8000e5c <HAL_GPIO_WritePin>
 80003b0:	e004      	b.n	80003bc <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2102      	movs	r1, #2
 80003b6:	480e      	ldr	r0, [pc, #56]	@ (80003f0 <lcd_write+0x168>)
 80003b8:	f000 fd50 	bl	8000e5c <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	08db      	lsrs	r3, r3, #3
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d006      	beq.n	80003d8 <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2110      	movs	r1, #16
 80003ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003d2:	f000 fd43 	bl	8000e5c <HAL_GPIO_WritePin>
 80003d6:	e005      	b.n	80003e4 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	2110      	movs	r1, #16
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e0:	f000 fd3c 	bl	8000e5c <HAL_GPIO_WritePin>

    lcd_clock();
 80003e4:	f7ff fef0 	bl	80001c8 <lcd_clock>
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	48000400 	.word	0x48000400

080003f4 <lcd_clear>:

void lcd_clear(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80003f8:	2100      	movs	r1, #0
 80003fa:	2001      	movs	r0, #1
 80003fc:	f7ff ff44 	bl	8000288 <lcd_write>
    _lcd_char = 0;
 8000400:	4b03      	ldr	r3, [pc, #12]	@ (8000410 <lcd_clear+0x1c>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 8000406:	4b03      	ldr	r3, [pc, #12]	@ (8000414 <lcd_clear+0x20>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000030 	.word	0x20000030
 8000414:	20000031 	.word	0x20000031

08000418 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
 8000422:	460b      	mov	r3, r1
 8000424:	71bb      	strb	r3, [r7, #6]
 8000426:	4613      	mov	r3, r2
 8000428:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	b25b      	sxtb	r3, r3
 8000430:	f043 0308 	orr.w	r3, r3, #8
 8000434:	b25a      	sxtb	r2, r3
 8000436:	79bb      	ldrb	r3, [r7, #6]
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	b25b      	sxtb	r3, r3
 800043c:	4313      	orrs	r3, r2
 800043e:	b25a      	sxtb	r2, r3
 8000440:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000444:	4313      	orrs	r3, r2
 8000446:	b25b      	sxtb	r3, r3
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2100      	movs	r1, #0
 800044c:	4618      	mov	r0, r3
 800044e:	f7ff ff1b 	bl	8000288 <lcd_write>
}
 8000452:	bf00      	nop
 8000454:	3708      	adds	r7, #8
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	b082      	sub	sp, #8
 800045e:	af00      	add	r7, sp, #0
 8000460:	4603      	mov	r3, r0
 8000462:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000464:	79fb      	ldrb	r3, [r7, #7]
 8000466:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800046a:	b2db      	uxtb	r3, r3
 800046c:	2100      	movs	r1, #0
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ff0a 	bl	8000288 <lcd_write>
}
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}

0800047c <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e055      	b.n	8000536 <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 800048a:	4b30      	ldr	r3, [pc, #192]	@ (800054c <lcd_print+0xd0>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d01c      	beq.n	80004cc <lcd_print+0x50>
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	687a      	ldr	r2, [r7, #4]
 8000496:	4413      	add	r3, r2
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b0a      	cmp	r3, #10
 800049c:	d116      	bne.n	80004cc <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 800049e:	4b2c      	ldr	r3, [pc, #176]	@ (8000550 <lcd_print+0xd4>)
 80004a0:	781a      	ldrb	r2, [r3, #0]
 80004a2:	4b2a      	ldr	r3, [pc, #168]	@ (800054c <lcd_print+0xd0>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d242      	bcs.n	8000530 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80004aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000554 <lcd_print+0xd8>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	4b28      	ldr	r3, [pc, #160]	@ (8000550 <lcd_print+0xd4>)
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	1c59      	adds	r1, r3, #1
 80004b4:	b2c8      	uxtb	r0, r1
 80004b6:	4926      	ldr	r1, [pc, #152]	@ (8000550 <lcd_print+0xd4>)
 80004b8:	7008      	strb	r0, [r1, #0]
 80004ba:	4413      	add	r3, r2
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ffcb 	bl	800045a <lcd_display_address>
                _lcd_char = 0;
 80004c4:	4b24      	ldr	r3, [pc, #144]	@ (8000558 <lcd_print+0xdc>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 80004ca:	e031      	b.n	8000530 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 80004cc:	4b23      	ldr	r3, [pc, #140]	@ (800055c <lcd_print+0xe0>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d01b      	beq.n	800050c <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 80004d4:	4b20      	ldr	r3, [pc, #128]	@ (8000558 <lcd_print+0xdc>)
 80004d6:	781a      	ldrb	r2, [r3, #0]
 80004d8:	4b20      	ldr	r3, [pc, #128]	@ (800055c <lcd_print+0xe0>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d115      	bne.n	800050c <lcd_print+0x90>
 80004e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000550 <lcd_print+0xd4>)
 80004e2:	781a      	ldrb	r2, [r3, #0]
 80004e4:	4b19      	ldr	r3, [pc, #100]	@ (800054c <lcd_print+0xd0>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d20f      	bcs.n	800050c <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80004ec:	4b19      	ldr	r3, [pc, #100]	@ (8000554 <lcd_print+0xd8>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <lcd_print+0xd4>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	1c59      	adds	r1, r3, #1
 80004f6:	b2c8      	uxtb	r0, r1
 80004f8:	4915      	ldr	r1, [pc, #84]	@ (8000550 <lcd_print+0xd4>)
 80004fa:	7008      	strb	r0, [r1, #0]
 80004fc:	4413      	add	r3, r2
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff ffaa 	bl	800045a <lcd_display_address>
                    _lcd_char = 0;
 8000506:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <lcd_print+0xdc>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2101      	movs	r1, #1
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff feb6 	bl	8000288 <lcd_write>
            if(lcd_chars) _lcd_char++;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <lcd_print+0xe0>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d005      	beq.n	8000530 <lcd_print+0xb4>
 8000524:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <lcd_print+0xdc>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	b2da      	uxtb	r2, r3
 800052c:	4b0a      	ldr	r3, [pc, #40]	@ (8000558 <lcd_print+0xdc>)
 800052e:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	3301      	adds	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
 8000536:	7bfb      	ldrb	r3, [r7, #15]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d1a3      	bne.n	800048a <lcd_print+0xe>
        }
    }
}
 8000542:	bf00      	nop
 8000544:	bf00      	nop
 8000546:	3710      	adds	r7, #16
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000029 	.word	0x20000029
 8000550:	20000031 	.word	0x20000031
 8000554:	2000002c 	.word	0x2000002c
 8000558:	20000030 	.word	0x20000030
 800055c:	20000028 	.word	0x20000028

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 f951 	bl	800080a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f812 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f862 	bl	8000634 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  lcd_reset();
 8000570:	f7ff fe42 	bl	80001f8 <lcd_reset>
  lcd_display_settings(1, 0, 0);
 8000574:	2200      	movs	r2, #0
 8000576:	2100      	movs	r1, #0
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff ff4d 	bl	8000418 <lcd_display_settings>
  lcd_clear();
 800057e:	f7ff ff39 	bl	80003f4 <lcd_clear>
  lcd_print("Soy muy gay");
 8000582:	4802      	ldr	r0, [pc, #8]	@ (800058c <main+0x2c>)
 8000584:	f7ff ff7a 	bl	800047c <lcd_print>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <main+0x28>
 800058c:	08001b54 	.word	0x08001b54

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b096      	sub	sp, #88	@ 0x58
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2244      	movs	r2, #68	@ 0x44
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 faa0 	bl	8001ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	463b      	mov	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005b6:	f000 fc77 	bl	8000ea8 <HAL_PWREx_ControlVoltageScaling>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c0:	f000 f88e 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005c4:	2310      	movs	r3, #16
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d0:	2360      	movs	r3, #96	@ 0x60
 80005d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005d8:	2301      	movs	r3, #1
 80005da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005dc:	2301      	movs	r3, #1
 80005de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005e0:	2328      	movs	r3, #40	@ 0x28
 80005e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e4:	2307      	movs	r3, #7
 80005e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fcad 	bl	8000f54 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000600:	f000 f86e 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2303      	movs	r3, #3
 800060a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	2104      	movs	r1, #4
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f875 	bl	800170c <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000628:	f000 f85a 	bl	80006e0 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3758      	adds	r7, #88	@ 0x58
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064a:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <MX_GPIO_Init+0xa4>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064e:	4a22      	ldr	r2, [pc, #136]	@ (80006d8 <MX_GPIO_Init+0xa4>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000656:	4b20      	ldr	r3, [pc, #128]	@ (80006d8 <MX_GPIO_Init+0xa4>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_GPIO_Init+0xa4>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000666:	4a1c      	ldr	r2, [pc, #112]	@ (80006d8 <MX_GPIO_Init+0xa4>)
 8000668:	f043 0302 	orr.w	r3, r3, #2
 800066c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_GPIO_Init+0xa4>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|E_LCD_Pin, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f248 011c 	movw	r1, #32796	@ 0x801c
 8000680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000684:	f000 fbea 	bl	8000e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|D5_LCD_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2116      	movs	r1, #22
 800068c:	4813      	ldr	r0, [pc, #76]	@ (80006dc <MX_GPIO_Init+0xa8>)
 800068e:	f000 fbe5 	bl	8000e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|E_LCD_Pin;
 8000692:	f248 031c 	movw	r3, #32796	@ 0x801c
 8000696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	4619      	mov	r1, r3
 80006aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ae:	f000 fa2b 	bl	8000b08 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin D5_LCD_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|D5_LCD_Pin;
 80006b2:	2316      	movs	r3, #22
 80006b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	4619      	mov	r1, r3
 80006c8:	4804      	ldr	r0, [pc, #16]	@ (80006dc <MX_GPIO_Init+0xa8>)
 80006ca:	f000 fa1d 	bl	8000b08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	48000400 	.word	0x48000400

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <HAL_MspInit+0x44>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000730 <HAL_MspInit+0x44>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <HAL_MspInit+0x44>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070e:	4a08      	ldr	r2, [pc, #32]	@ (8000730 <HAL_MspInit+0x44>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000714:	6593      	str	r3, [r2, #88]	@ 0x58
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800071a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <NMI_Handler+0x4>

0800073c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <HardFault_Handler+0x4>

08000744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <MemManage_Handler+0x4>

0800074c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <BusFault_Handler+0x4>

08000754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <UsageFault_Handler+0x4>

0800075c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800076e:	bf00      	nop
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800078a:	f000 f893 	bl	80008b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <SystemInit+0x20>)
 800079a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800079e:	4a05      	ldr	r2, [pc, #20]	@ (80007b4 <SystemInit+0x20>)
 80007a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80007b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007bc:	f7ff ffea 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c0:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c2:	490d      	ldr	r1, [pc, #52]	@ (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c4:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c8:	e002      	b.n	80007d0 <LoopCopyDataInit>

080007ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ce:	3304      	adds	r3, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d4:	d3f9      	bcc.n	80007ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007dc:	e001      	b.n	80007e2 <LoopFillZerobss>

080007de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e0:	3204      	adds	r2, #4

080007e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e4:	d3fb      	bcc.n	80007de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007e6:	f001 f985 	bl	8001af4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ea:	f7ff feb9 	bl	8000560 <main>

080007ee <LoopForever>:

LoopForever:
    b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007fc:	08001ba8 	.word	0x08001ba8
  ldr r2, =_sbss
 8000800:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000804:	20000038 	.word	0x20000038

08000808 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_2_IRQHandler>

0800080a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080a:	b580      	push	{r7, lr}
 800080c:	b082      	sub	sp, #8
 800080e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000810:	2300      	movs	r3, #0
 8000812:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 f943 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800081a:	200f      	movs	r0, #15
 800081c:	f000 f80e 	bl	800083c <HAL_InitTick>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000826:	2301      	movs	r3, #1
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	e001      	b.n	8000830 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800082c:	f7ff ff5e 	bl	80006ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000830:	79fb      	ldrb	r3, [r7, #7]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000844:	2300      	movs	r3, #0
 8000846:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <HAL_InitTick+0x6c>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d023      	beq.n	8000898 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000850:	4b16      	ldr	r3, [pc, #88]	@ (80008ac <HAL_InitTick+0x70>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	4b14      	ldr	r3, [pc, #80]	@ (80008a8 <HAL_InitTick+0x6c>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4619      	mov	r1, r3
 800085a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000862:	fbb2 f3f3 	udiv	r3, r2, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f000 f941 	bl	8000aee <HAL_SYSTICK_Config>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10f      	bne.n	8000892 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d809      	bhi.n	800088c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f919 	bl	8000ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000884:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <HAL_InitTick+0x74>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e007      	b.n	800089c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	73fb      	strb	r3, [r7, #15]
 8000890:	e004      	b.n	800089c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]
 8000896:	e001      	b.n	800089c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000898:	2301      	movs	r3, #1
 800089a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000004 	.word	0x20000004

080008b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_IncTick+0x20>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4b06      	ldr	r3, [pc, #24]	@ (80008d8 <HAL_IncTick+0x24>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4413      	add	r3, r2
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_IncTick+0x24>)
 80008c6:	6013      	str	r3, [r2, #0]
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000008 	.word	0x20000008
 80008d8:	20000034 	.word	0x20000034

080008dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return uwTick;
 80008e0:	4b03      	ldr	r3, [pc, #12]	@ (80008f0 <HAL_GetTick+0x14>)
 80008e2:	681b      	ldr	r3, [r3, #0]
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000034 	.word	0x20000034

080008f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008fc:	f7ff ffee 	bl	80008dc <HAL_GetTick>
 8000900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800090c:	d005      	beq.n	800091a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_Delay+0x44>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4413      	add	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800091a:	bf00      	nop
 800091c:	f7ff ffde 	bl	80008dc <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	d8f7      	bhi.n	800091c <HAL_Delay+0x28>
  {
  }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008

0800093c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	@ (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	@ (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	@ 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	@ 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	@ (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff8e 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	@ (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff47 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff5c 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff8e 	bl	80009f4 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5d 	bl	80009a0 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f7ff ffb0 	bl	8000a5c <SysTick_Config>
 8000afc:	4603      	mov	r3, r0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	e17f      	b.n	8000e18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	4013      	ands	r3, r2
 8000b26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f000 8171 	beq.w	8000e12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d005      	beq.n	8000b48 <HAL_GPIO_Init+0x40>
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 0303 	and.w	r3, r3, #3
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d130      	bne.n	8000baa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	2203      	movs	r2, #3
 8000b54:	fa02 f303 	lsl.w	r3, r2, r3
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68da      	ldr	r2, [r3, #12]
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b7e:	2201      	movs	r2, #1
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	091b      	lsrs	r3, r3, #4
 8000b94:	f003 0201 	and.w	r2, r3, #1
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d118      	bne.n	8000be8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	08db      	lsrs	r3, r3, #3
 8000bd2:	f003 0201 	and.w	r2, r3, #1
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	2b03      	cmp	r3, #3
 8000bf2:	d017      	beq.n	8000c24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	2203      	movs	r2, #3
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4013      	ands	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	f003 0303 	and.w	r3, r3, #3
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d123      	bne.n	8000c78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	08da      	lsrs	r2, r3, #3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3208      	adds	r2, #8
 8000c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f003 0307 	and.w	r3, r3, #7
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	220f      	movs	r2, #15
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	691a      	ldr	r2, [r3, #16]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	4313      	orrs	r3, r2
 8000c68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	08da      	lsrs	r2, r3, #3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3208      	adds	r2, #8
 8000c72:	6939      	ldr	r1, [r7, #16]
 8000c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	2203      	movs	r2, #3
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0203 	and.w	r2, r3, #3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	f000 80ac 	beq.w	8000e12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b5f      	ldr	r3, [pc, #380]	@ (8000e38 <HAL_GPIO_Init+0x330>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8000e38 <HAL_GPIO_Init+0x330>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8000e38 <HAL_GPIO_Init+0x330>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd2:	4a5a      	ldr	r2, [pc, #360]	@ (8000e3c <HAL_GPIO_Init+0x334>)
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3302      	adds	r3, #2
 8000cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	220f      	movs	r2, #15
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000cfc:	d025      	beq.n	8000d4a <HAL_GPIO_Init+0x242>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a4f      	ldr	r2, [pc, #316]	@ (8000e40 <HAL_GPIO_Init+0x338>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d01f      	beq.n	8000d46 <HAL_GPIO_Init+0x23e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4e      	ldr	r2, [pc, #312]	@ (8000e44 <HAL_GPIO_Init+0x33c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d019      	beq.n	8000d42 <HAL_GPIO_Init+0x23a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4d      	ldr	r2, [pc, #308]	@ (8000e48 <HAL_GPIO_Init+0x340>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d013      	beq.n	8000d3e <HAL_GPIO_Init+0x236>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a4c      	ldr	r2, [pc, #304]	@ (8000e4c <HAL_GPIO_Init+0x344>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d00d      	beq.n	8000d3a <HAL_GPIO_Init+0x232>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4b      	ldr	r2, [pc, #300]	@ (8000e50 <HAL_GPIO_Init+0x348>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d007      	beq.n	8000d36 <HAL_GPIO_Init+0x22e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4a      	ldr	r2, [pc, #296]	@ (8000e54 <HAL_GPIO_Init+0x34c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_GPIO_Init+0x22a>
 8000d2e:	2306      	movs	r3, #6
 8000d30:	e00c      	b.n	8000d4c <HAL_GPIO_Init+0x244>
 8000d32:	2307      	movs	r3, #7
 8000d34:	e00a      	b.n	8000d4c <HAL_GPIO_Init+0x244>
 8000d36:	2305      	movs	r3, #5
 8000d38:	e008      	b.n	8000d4c <HAL_GPIO_Init+0x244>
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	e006      	b.n	8000d4c <HAL_GPIO_Init+0x244>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e004      	b.n	8000d4c <HAL_GPIO_Init+0x244>
 8000d42:	2302      	movs	r3, #2
 8000d44:	e002      	b.n	8000d4c <HAL_GPIO_Init+0x244>
 8000d46:	2301      	movs	r3, #1
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x244>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	f002 0203 	and.w	r2, r2, #3
 8000d52:	0092      	lsls	r2, r2, #2
 8000d54:	4093      	lsls	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d5c:	4937      	ldr	r1, [pc, #220]	@ (8000e3c <HAL_GPIO_Init+0x334>)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	089b      	lsrs	r3, r3, #2
 8000d62:	3302      	adds	r3, #2
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000e58 <HAL_GPIO_Init+0x350>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d8e:	4a32      	ldr	r2, [pc, #200]	@ (8000e58 <HAL_GPIO_Init+0x350>)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d94:	4b30      	ldr	r3, [pc, #192]	@ (8000e58 <HAL_GPIO_Init+0x350>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000db8:	4a27      	ldr	r2, [pc, #156]	@ (8000e58 <HAL_GPIO_Init+0x350>)
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <HAL_GPIO_Init+0x350>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000de2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <HAL_GPIO_Init+0x350>)
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <HAL_GPIO_Init+0x350>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e0c:	4a12      	ldr	r2, [pc, #72]	@ (8000e58 <HAL_GPIO_Init+0x350>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f47f ae78 	bne.w	8000b18 <HAL_GPIO_Init+0x10>
  }
}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	371c      	adds	r7, #28
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	40010000 	.word	0x40010000
 8000e40:	48000400 	.word	0x48000400
 8000e44:	48000800 	.word	0x48000800
 8000e48:	48000c00 	.word	0x48000c00
 8000e4c:	48001000 	.word	0x48001000
 8000e50:	48001400 	.word	0x48001400
 8000e54:	48001800 	.word	0x48001800
 8000e58:	40010400 	.word	0x40010400

08000e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e6c:	787b      	ldrb	r3, [r7, #1]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e78:	e002      	b.n	8000e80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e7a:	887a      	ldrh	r2, [r7, #2]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000e90:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000eb6:	d130      	bne.n	8000f1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000eb8:	4b23      	ldr	r3, [pc, #140]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ec4:	d038      	beq.n	8000f38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec6:	4b20      	ldr	r3, [pc, #128]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000ece:	4a1e      	ldr	r2, [pc, #120]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ed0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ed4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2232      	movs	r2, #50	@ 0x32
 8000edc:	fb02 f303 	mul.w	r3, r2, r3
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	0c9b      	lsrs	r3, r3, #18
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000eec:	e002      	b.n	8000ef4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ef4:	4b14      	ldr	r3, [pc, #80]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f00:	d102      	bne.n	8000f08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d1f2      	bne.n	8000eee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f08:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f0a:	695b      	ldr	r3, [r3, #20]
 8000f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f14:	d110      	bne.n	8000f38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e00f      	b.n	8000f3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f26:	d007      	beq.n	8000f38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f28:	4b07      	ldr	r3, [pc, #28]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000f30:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40007000 	.word	0x40007000
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	431bde83 	.word	0x431bde83

08000f54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e3ca      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f66:	4b97      	ldr	r3, [pc, #604]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
 8000f6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f70:	4b94      	ldr	r3, [pc, #592]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0310 	and.w	r3, r3, #16
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f000 80e4 	beq.w	8001150 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d007      	beq.n	8000f9e <HAL_RCC_OscConfig+0x4a>
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b0c      	cmp	r3, #12
 8000f92:	f040 808b 	bne.w	80010ac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	f040 8087 	bne.w	80010ac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f9e:	4b89      	ldr	r3, [pc, #548]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d005      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x62>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e3a2      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1a      	ldr	r2, [r3, #32]
 8000fba:	4b82      	ldr	r3, [pc, #520]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x7c>
 8000fc6:	4b7f      	ldr	r3, [pc, #508]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fce:	e005      	b.n	8000fdc <HAL_RCC_OscConfig+0x88>
 8000fd0:	4b7c      	ldr	r3, [pc, #496]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8000fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fd6:	091b      	lsrs	r3, r3, #4
 8000fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d223      	bcs.n	8001028 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a1b      	ldr	r3, [r3, #32]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fd1d 	bl	8001a24 <RCC_SetFlashLatencyFromMSIRange>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e383      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ff4:	4b73      	ldr	r3, [pc, #460]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a72      	ldr	r2, [pc, #456]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b70      	ldr	r3, [pc, #448]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	496d      	ldr	r1, [pc, #436]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001012:	4b6c      	ldr	r3, [pc, #432]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	4968      	ldr	r1, [pc, #416]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001022:	4313      	orrs	r3, r2
 8001024:	604b      	str	r3, [r1, #4]
 8001026:	e025      	b.n	8001074 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001028:	4b66      	ldr	r3, [pc, #408]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a65      	ldr	r2, [pc, #404]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 800102e:	f043 0308 	orr.w	r3, r3, #8
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b63      	ldr	r3, [pc, #396]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6a1b      	ldr	r3, [r3, #32]
 8001040:	4960      	ldr	r1, [pc, #384]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001042:	4313      	orrs	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001046:	4b5f      	ldr	r3, [pc, #380]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69db      	ldr	r3, [r3, #28]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	495b      	ldr	r1, [pc, #364]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001056:	4313      	orrs	r3, r2
 8001058:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d109      	bne.n	8001074 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fcdd 	bl	8001a24 <RCC_SetFlashLatencyFromMSIRange>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e343      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001074:	f000 fc4a 	bl	800190c <HAL_RCC_GetSysClockFreq>
 8001078:	4602      	mov	r2, r0
 800107a:	4b52      	ldr	r3, [pc, #328]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	4950      	ldr	r1, [pc, #320]	@ (80011c8 <HAL_RCC_OscConfig+0x274>)
 8001086:	5ccb      	ldrb	r3, [r1, r3]
 8001088:	f003 031f 	and.w	r3, r3, #31
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	4a4e      	ldr	r2, [pc, #312]	@ (80011cc <HAL_RCC_OscConfig+0x278>)
 8001092:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001094:	4b4e      	ldr	r3, [pc, #312]	@ (80011d0 <HAL_RCC_OscConfig+0x27c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fbcf 	bl	800083c <HAL_InitTick>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d052      	beq.n	800114e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	e327      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d032      	beq.n	800111a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010b4:	4b43      	ldr	r3, [pc, #268]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a42      	ldr	r2, [pc, #264]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc0c 	bl	80008dc <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010c8:	f7ff fc08 	bl	80008dc <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e310      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010da:	4b3a      	ldr	r3, [pc, #232]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e6:	4b37      	ldr	r3, [pc, #220]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a36      	ldr	r2, [pc, #216]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80010ec:	f043 0308 	orr.w	r3, r3, #8
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b34      	ldr	r3, [pc, #208]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	4931      	ldr	r1, [pc, #196]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001104:	4b2f      	ldr	r3, [pc, #188]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	492c      	ldr	r1, [pc, #176]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
 8001118:	e01a      	b.n	8001150 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800111a:	4b2a      	ldr	r3, [pc, #168]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a29      	ldr	r2, [pc, #164]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001126:	f7ff fbd9 	bl	80008dc <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800112e:	f7ff fbd5 	bl	80008dc <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e2dd      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001140:	4b20      	ldr	r3, [pc, #128]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f0      	bne.n	800112e <HAL_RCC_OscConfig+0x1da>
 800114c:	e000      	b.n	8001150 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800114e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	d074      	beq.n	8001246 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	2b08      	cmp	r3, #8
 8001160:	d005      	beq.n	800116e <HAL_RCC_OscConfig+0x21a>
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b0c      	cmp	r3, #12
 8001166:	d10e      	bne.n	8001186 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b03      	cmp	r3, #3
 800116c:	d10b      	bne.n	8001186 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116e:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d064      	beq.n	8001244 <HAL_RCC_OscConfig+0x2f0>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d160      	bne.n	8001244 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e2ba      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800118e:	d106      	bne.n	800119e <HAL_RCC_OscConfig+0x24a>
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 8001196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	e026      	b.n	80011ec <HAL_RCC_OscConfig+0x298>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011a6:	d115      	bne.n	80011d4 <HAL_RCC_OscConfig+0x280>
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80011ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b03      	ldr	r3, [pc, #12]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a02      	ldr	r2, [pc, #8]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80011ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e014      	b.n	80011ec <HAL_RCC_OscConfig+0x298>
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	08001b60 	.word	0x08001b60
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004
 80011d4:	4ba0      	ldr	r3, [pc, #640]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a9f      	ldr	r2, [pc, #636]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80011da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a9c      	ldr	r2, [pc, #624]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80011e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d013      	beq.n	800121c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f4:	f7ff fb72 	bl	80008dc <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011fc:	f7ff fb6e 	bl	80008dc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b64      	cmp	r3, #100	@ 0x64
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e276      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800120e:	4b92      	ldr	r3, [pc, #584]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f0      	beq.n	80011fc <HAL_RCC_OscConfig+0x2a8>
 800121a:	e014      	b.n	8001246 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fb5e 	bl	80008dc <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001224:	f7ff fb5a 	bl	80008dc <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b64      	cmp	r3, #100	@ 0x64
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e262      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001236:	4b88      	ldr	r3, [pc, #544]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x2d0>
 8001242:	e000      	b.n	8001246 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d060      	beq.n	8001314 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	2b04      	cmp	r3, #4
 8001256:	d005      	beq.n	8001264 <HAL_RCC_OscConfig+0x310>
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2b0c      	cmp	r3, #12
 800125c:	d119      	bne.n	8001292 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d116      	bne.n	8001292 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001264:	4b7c      	ldr	r3, [pc, #496]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_OscConfig+0x328>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e23f      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	4b76      	ldr	r3, [pc, #472]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	061b      	lsls	r3, r3, #24
 800128a:	4973      	ldr	r1, [pc, #460]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001290:	e040      	b.n	8001314 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d023      	beq.n	80012e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800129a:	4b6f      	ldr	r3, [pc, #444]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a6e      	ldr	r2, [pc, #440]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80012a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a6:	f7ff fb19 	bl	80008dc <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ac:	e008      	b.n	80012c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff fb15 	bl	80008dc <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d901      	bls.n	80012c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012bc:	2303      	movs	r3, #3
 80012be:	e21d      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c0:	4b65      	ldr	r3, [pc, #404]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d0f0      	beq.n	80012ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012cc:	4b62      	ldr	r3, [pc, #392]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	061b      	lsls	r3, r3, #24
 80012da:	495f      	ldr	r1, [pc, #380]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
 80012e0:	e018      	b.n	8001314 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80012e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ee:	f7ff faf5 	bl	80008dc <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff faf1 	bl	80008dc <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e1f9      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001308:	4b53      	ldr	r3, [pc, #332]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	2b00      	cmp	r3, #0
 800131e:	d03c      	beq.n	800139a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d01c      	beq.n	8001362 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001328:	4b4b      	ldr	r3, [pc, #300]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 800132a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800132e:	4a4a      	ldr	r2, [pc, #296]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001338:	f7ff fad0 	bl	80008dc <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001340:	f7ff facc 	bl	80008dc <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1d4      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001352:	4b41      	ldr	r3, [pc, #260]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 8001354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0ef      	beq.n	8001340 <HAL_RCC_OscConfig+0x3ec>
 8001360:	e01b      	b.n	800139a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001362:	4b3d      	ldr	r3, [pc, #244]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 8001364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001368:	4a3b      	ldr	r2, [pc, #236]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 800136a:	f023 0301 	bic.w	r3, r3, #1
 800136e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001372:	f7ff fab3 	bl	80008dc <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137a:	f7ff faaf 	bl	80008dc <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1b7      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800138c:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 800138e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1ef      	bne.n	800137a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 80a6 	beq.w	80014f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80013ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10d      	bne.n	80013d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b8:	4b27      	ldr	r3, [pc, #156]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80013ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013bc:	4a26      	ldr	r2, [pc, #152]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80013be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c4:	4b24      	ldr	r3, [pc, #144]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 80013c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013d0:	2301      	movs	r3, #1
 80013d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d4:	4b21      	ldr	r3, [pc, #132]	@ (800145c <HAL_RCC_OscConfig+0x508>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d118      	bne.n	8001412 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013e0:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <HAL_RCC_OscConfig+0x508>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a1d      	ldr	r2, [pc, #116]	@ (800145c <HAL_RCC_OscConfig+0x508>)
 80013e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013ec:	f7ff fa76 	bl	80008dc <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f4:	f7ff fa72 	bl	80008dc <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e17a      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_RCC_OscConfig+0x508>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d108      	bne.n	800142c <HAL_RCC_OscConfig+0x4d8>
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 800141c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001420:	4a0d      	ldr	r2, [pc, #52]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800142a:	e029      	b.n	8001480 <HAL_RCC_OscConfig+0x52c>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b05      	cmp	r3, #5
 8001432:	d115      	bne.n	8001460 <HAL_RCC_OscConfig+0x50c>
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 8001436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800143a:	4a07      	ldr	r2, [pc, #28]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 800143c:	f043 0304 	orr.w	r3, r3, #4
 8001440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 8001446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800144a:	4a03      	ldr	r2, [pc, #12]	@ (8001458 <HAL_RCC_OscConfig+0x504>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001454:	e014      	b.n	8001480 <HAL_RCC_OscConfig+0x52c>
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	40007000 	.word	0x40007000
 8001460:	4b9c      	ldr	r3, [pc, #624]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 8001462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001466:	4a9b      	ldr	r2, [pc, #620]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 8001468:	f023 0301 	bic.w	r3, r3, #1
 800146c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001470:	4b98      	ldr	r3, [pc, #608]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 8001472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001476:	4a97      	ldr	r2, [pc, #604]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 8001478:	f023 0304 	bic.w	r3, r3, #4
 800147c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d016      	beq.n	80014b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001488:	f7ff fa28 	bl	80008dc <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800148e:	e00a      	b.n	80014a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001490:	f7ff fa24 	bl	80008dc <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e12a      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014a6:	4b8b      	ldr	r3, [pc, #556]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 80014a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0ed      	beq.n	8001490 <HAL_RCC_OscConfig+0x53c>
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b6:	f7ff fa11 	bl	80008dc <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff fa0d 	bl	80008dc <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e113      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014d4:	4b7f      	ldr	r3, [pc, #508]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 80014d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ed      	bne.n	80014be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d105      	bne.n	80014f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e8:	4b7a      	ldr	r3, [pc, #488]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ec:	4a79      	ldr	r2, [pc, #484]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 80014ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014f2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80fe 	beq.w	80016fa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001502:	2b02      	cmp	r3, #2
 8001504:	f040 80d0 	bne.w	80016a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001508:	4b72      	ldr	r3, [pc, #456]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 0203 	and.w	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001518:	429a      	cmp	r2, r3
 800151a:	d130      	bne.n	800157e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	3b01      	subs	r3, #1
 8001528:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800152a:	429a      	cmp	r2, r3
 800152c:	d127      	bne.n	800157e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001538:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800153a:	429a      	cmp	r2, r3
 800153c:	d11f      	bne.n	800157e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001548:	2a07      	cmp	r2, #7
 800154a:	bf14      	ite	ne
 800154c:	2201      	movne	r2, #1
 800154e:	2200      	moveq	r2, #0
 8001550:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001552:	4293      	cmp	r3, r2
 8001554:	d113      	bne.n	800157e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	3b01      	subs	r3, #1
 8001564:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d109      	bne.n	800157e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001574:	085b      	lsrs	r3, r3, #1
 8001576:	3b01      	subs	r3, #1
 8001578:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800157a:	429a      	cmp	r2, r3
 800157c:	d06e      	beq.n	800165c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2b0c      	cmp	r3, #12
 8001582:	d069      	beq.n	8001658 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001584:	4b53      	ldr	r3, [pc, #332]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d105      	bne.n	800159c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001590:	4b50      	ldr	r3, [pc, #320]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e0ad      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015a0:	4b4c      	ldr	r3, [pc, #304]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a4b      	ldr	r2, [pc, #300]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 80015a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015ac:	f7ff f996 	bl	80008dc <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff f992 	bl	80008dc <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e09a      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015c6:	4b43      	ldr	r3, [pc, #268]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d2:	4b40      	ldr	r3, [pc, #256]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	4b40      	ldr	r3, [pc, #256]	@ (80016d8 <HAL_RCC_OscConfig+0x784>)
 80015d8:	4013      	ands	r3, r2
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80015e2:	3a01      	subs	r2, #1
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	4311      	orrs	r1, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80015ec:	0212      	lsls	r2, r2, #8
 80015ee:	4311      	orrs	r1, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80015f4:	0852      	lsrs	r2, r2, #1
 80015f6:	3a01      	subs	r2, #1
 80015f8:	0552      	lsls	r2, r2, #21
 80015fa:	4311      	orrs	r1, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001600:	0852      	lsrs	r2, r2, #1
 8001602:	3a01      	subs	r2, #1
 8001604:	0652      	lsls	r2, r2, #25
 8001606:	4311      	orrs	r1, r2
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800160c:	0912      	lsrs	r2, r2, #4
 800160e:	0452      	lsls	r2, r2, #17
 8001610:	430a      	orrs	r2, r1
 8001612:	4930      	ldr	r1, [pc, #192]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 8001614:	4313      	orrs	r3, r2
 8001616:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001618:	4b2e      	ldr	r3, [pc, #184]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a2d      	ldr	r2, [pc, #180]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 800161e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001622:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001624:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4a2a      	ldr	r2, [pc, #168]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 800162a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800162e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001630:	f7ff f954 	bl	80008dc <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff f950 	bl	80008dc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e058      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800164a:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001656:	e050      	b.n	80016fa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e04f      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165c:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d148      	bne.n	80016fa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001668:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001674:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4a16      	ldr	r2, [pc, #88]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 800167a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800167e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001680:	f7ff f92c 	bl	80008dc <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff f928 	bl	80008dc <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e030      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x734>
 80016a6:	e028      	b.n	80016fa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d023      	beq.n	80016f6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <HAL_RCC_OscConfig+0x780>)
 80016b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff f90f 	bl	80008dc <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c0:	e00c      	b.n	80016dc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff f90b 	bl	80008dc <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d905      	bls.n	80016dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e013      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
 80016d4:	40021000 	.word	0x40021000
 80016d8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016dc:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_RCC_OscConfig+0x7b0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1ec      	bne.n	80016c2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_RCC_OscConfig+0x7b0>)
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	4905      	ldr	r1, [pc, #20]	@ (8001704 <HAL_RCC_OscConfig+0x7b0>)
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_RCC_OscConfig+0x7b4>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
 80016f4:	e001      	b.n	80016fa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3720      	adds	r7, #32
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	feeefffc 	.word	0xfeeefffc

0800170c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0e7      	b.n	80018f0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b75      	ldr	r3, [pc, #468]	@ (80018f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d910      	bls.n	8001750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b72      	ldr	r3, [pc, #456]	@ (80018f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 0207 	bic.w	r2, r3, #7
 8001736:	4970      	ldr	r1, [pc, #448]	@ (80018f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b6e      	ldr	r3, [pc, #440]	@ (80018f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cf      	b.n	80018f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d010      	beq.n	800177e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	4b66      	ldr	r3, [pc, #408]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001768:	429a      	cmp	r2, r3
 800176a:	d908      	bls.n	800177e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	4b63      	ldr	r3, [pc, #396]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	4960      	ldr	r1, [pc, #384]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b00      	cmp	r3, #0
 8001788:	d04c      	beq.n	8001824 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b03      	cmp	r3, #3
 8001790:	d107      	bne.n	80017a2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001792:	4b5a      	ldr	r3, [pc, #360]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d121      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e0a6      	b.n	80018f0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d107      	bne.n	80017ba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017aa:	4b54      	ldr	r3, [pc, #336]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d115      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e09a      	b.n	80018f0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c2:	4b4e      	ldr	r3, [pc, #312]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d109      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e08e      	b.n	80018f0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d2:	4b4a      	ldr	r3, [pc, #296]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e086      	b.n	80018f0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017e2:	4b46      	ldr	r3, [pc, #280]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f023 0203 	bic.w	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4943      	ldr	r1, [pc, #268]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017f4:	f7ff f872 	bl	80008dc <HAL_GetTick>
 80017f8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fc:	f7ff f86e 	bl	80008dc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e06e      	b.n	80018f0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	4b3a      	ldr	r3, [pc, #232]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 020c 	and.w	r2, r3, #12
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	429a      	cmp	r2, r3
 8001822:	d1eb      	bne.n	80017fc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d010      	beq.n	8001852 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b31      	ldr	r3, [pc, #196]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800183c:	429a      	cmp	r2, r3
 800183e:	d208      	bcs.n	8001852 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	492b      	ldr	r1, [pc, #172]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001852:	4b29      	ldr	r3, [pc, #164]	@ (80018f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d210      	bcs.n	8001882 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001860:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 0207 	bic.w	r2, r3, #7
 8001868:	4923      	ldr	r1, [pc, #140]	@ (80018f8 <HAL_RCC_ClockConfig+0x1ec>)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	4313      	orrs	r3, r2
 800186e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001870:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <HAL_RCC_ClockConfig+0x1ec>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d001      	beq.n	8001882 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e036      	b.n	80018f0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	d008      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800188e:	4b1b      	ldr	r3, [pc, #108]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	4918      	ldr	r1, [pc, #96]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	4313      	orrs	r3, r2
 800189e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4910      	ldr	r1, [pc, #64]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018c0:	f000 f824 	bl	800190c <HAL_RCC_GetSysClockFreq>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b0d      	ldr	r3, [pc, #52]	@ (80018fc <HAL_RCC_ClockConfig+0x1f0>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	091b      	lsrs	r3, r3, #4
 80018cc:	f003 030f 	and.w	r3, r3, #15
 80018d0:	490b      	ldr	r1, [pc, #44]	@ (8001900 <HAL_RCC_ClockConfig+0x1f4>)
 80018d2:	5ccb      	ldrb	r3, [r1, r3]
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	4a09      	ldr	r2, [pc, #36]	@ (8001904 <HAL_RCC_ClockConfig+0x1f8>)
 80018de:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_RCC_ClockConfig+0x1fc>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe ffa9 	bl	800083c <HAL_InitTick>
 80018ea:	4603      	mov	r3, r0
 80018ec:	72fb      	strb	r3, [r7, #11]

  return status;
 80018ee:	7afb      	ldrb	r3, [r7, #11]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40022000 	.word	0x40022000
 80018fc:	40021000 	.word	0x40021000
 8001900:	08001b60 	.word	0x08001b60
 8001904:	20000000 	.word	0x20000000
 8001908:	20000004 	.word	0x20000004

0800190c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800191a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001924:	4b3b      	ldr	r3, [pc, #236]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x34>
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d121      	bne.n	800197e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d11e      	bne.n	800197e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001940:	4b34      	ldr	r3, [pc, #208]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x108>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800194c:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800194e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e005      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800195c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001968:	4a2b      	ldr	r2, [pc, #172]	@ (8001a18 <HAL_RCC_GetSysClockFreq+0x10c>)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10d      	bne.n	8001994 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800197c:	e00a      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d102      	bne.n	800198a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001984:	4b25      	ldr	r3, [pc, #148]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x110>)
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	e004      	b.n	8001994 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d101      	bne.n	8001994 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001990:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x114>)
 8001992:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d134      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800199a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x108>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d003      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0xac>
 80019b0:	e005      	b.n	80019be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019b2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a1c <HAL_RCC_GetSysClockFreq+0x110>)
 80019b4:	617b      	str	r3, [r7, #20]
      break;
 80019b6:	e005      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019b8:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <HAL_RCC_GetSysClockFreq+0x114>)
 80019ba:	617b      	str	r3, [r7, #20]
      break;
 80019bc:	e002      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	617b      	str	r3, [r7, #20]
      break;
 80019c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	091b      	lsrs	r3, r3, #4
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	3301      	adds	r3, #1
 80019d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	fb03 f202 	mul.w	r2, r3, r2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <HAL_RCC_GetSysClockFreq+0x108>)
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	0e5b      	lsrs	r3, r3, #25
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	3301      	adds	r3, #1
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a04:	69bb      	ldr	r3, [r7, #24]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40021000 	.word	0x40021000
 8001a18:	08001b70 	.word	0x08001b70
 8001a1c:	00f42400 	.word	0x00f42400
 8001a20:	007a1200 	.word	0x007a1200

08001a24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a30:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a3c:	f7ff fa26 	bl	8000e8c <HAL_PWREx_GetVoltageRange>
 8001a40:	6178      	str	r0, [r7, #20]
 8001a42:	e014      	b.n	8001a6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a44:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a48:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a50:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a5c:	f7ff fa16 	bl	8000e8c <HAL_PWREx_GetVoltageRange>
 8001a60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a62:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a66:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a74:	d10b      	bne.n	8001a8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b80      	cmp	r3, #128	@ 0x80
 8001a7a:	d919      	bls.n	8001ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a80:	d902      	bls.n	8001a88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a82:	2302      	movs	r3, #2
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	e013      	b.n	8001ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a88:	2301      	movs	r3, #1
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	e010      	b.n	8001ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b80      	cmp	r3, #128	@ 0x80
 8001a92:	d902      	bls.n	8001a9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a94:	2303      	movs	r3, #3
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e00a      	b.n	8001ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b80      	cmp	r3, #128	@ 0x80
 8001a9e:	d102      	bne.n	8001aa6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	e004      	b.n	8001ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b70      	cmp	r3, #112	@ 0x70
 8001aaa:	d101      	bne.n	8001ab0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001aac:	2301      	movs	r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 0207 	bic.w	r2, r3, #7
 8001ab8:	4909      	ldr	r1, [pc, #36]	@ (8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ac0:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d001      	beq.n	8001ad2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <memset>:
 8001ae4:	4402      	add	r2, r0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d100      	bne.n	8001aee <memset+0xa>
 8001aec:	4770      	bx	lr
 8001aee:	f803 1b01 	strb.w	r1, [r3], #1
 8001af2:	e7f9      	b.n	8001ae8 <memset+0x4>

08001af4 <__libc_init_array>:
 8001af4:	b570      	push	{r4, r5, r6, lr}
 8001af6:	4d0d      	ldr	r5, [pc, #52]	@ (8001b2c <__libc_init_array+0x38>)
 8001af8:	4c0d      	ldr	r4, [pc, #52]	@ (8001b30 <__libc_init_array+0x3c>)
 8001afa:	1b64      	subs	r4, r4, r5
 8001afc:	10a4      	asrs	r4, r4, #2
 8001afe:	2600      	movs	r6, #0
 8001b00:	42a6      	cmp	r6, r4
 8001b02:	d109      	bne.n	8001b18 <__libc_init_array+0x24>
 8001b04:	4d0b      	ldr	r5, [pc, #44]	@ (8001b34 <__libc_init_array+0x40>)
 8001b06:	4c0c      	ldr	r4, [pc, #48]	@ (8001b38 <__libc_init_array+0x44>)
 8001b08:	f000 f818 	bl	8001b3c <_init>
 8001b0c:	1b64      	subs	r4, r4, r5
 8001b0e:	10a4      	asrs	r4, r4, #2
 8001b10:	2600      	movs	r6, #0
 8001b12:	42a6      	cmp	r6, r4
 8001b14:	d105      	bne.n	8001b22 <__libc_init_array+0x2e>
 8001b16:	bd70      	pop	{r4, r5, r6, pc}
 8001b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b1c:	4798      	blx	r3
 8001b1e:	3601      	adds	r6, #1
 8001b20:	e7ee      	b.n	8001b00 <__libc_init_array+0xc>
 8001b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b26:	4798      	blx	r3
 8001b28:	3601      	adds	r6, #1
 8001b2a:	e7f2      	b.n	8001b12 <__libc_init_array+0x1e>
 8001b2c:	08001ba0 	.word	0x08001ba0
 8001b30:	08001ba0 	.word	0x08001ba0
 8001b34:	08001ba0 	.word	0x08001ba0
 8001b38:	08001ba4 	.word	0x08001ba4

08001b3c <_init>:
 8001b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b3e:	bf00      	nop
 8001b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b42:	bc08      	pop	{r3}
 8001b44:	469e      	mov	lr, r3
 8001b46:	4770      	bx	lr

08001b48 <_fini>:
 8001b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4a:	bf00      	nop
 8001b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b4e:	bc08      	pop	{r3}
 8001b50:	469e      	mov	lr, r3
 8001b52:	4770      	bx	lr
