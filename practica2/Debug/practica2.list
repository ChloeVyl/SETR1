
practica2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b74  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005cfc  08005cfc  00006cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d44  08005d44  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d44  08005d44  00006d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d4c  08005d4c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d4c  08005d4c  00006d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005d54  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  2000000c  08005d60  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08005d60  00007780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b2a  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a5  00000000  00000000  00020b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a8  00000000  00000000  00024310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001309  00000000  00000000  00025bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296df  00000000  00000000  00026ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c98a  00000000  00000000  000505a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa9dd  00000000  00000000  0006cf2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000698c  00000000  00000000  0016794c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0016e2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ce4 	.word	0x08005ce4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005ce4 	.word	0x08005ce4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	619a      	str	r2, [r3, #24]
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
    // Pulse clock
    LL_GPIO_SetOutputPin(CLOCK_PORT, LCD_CLOCK);
 80004f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fc:	f7ff ffdc 	bl	80004b8 <LL_GPIO_SetOutputPin>
    LL_mDelay(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f005 fb9b 	bl	8005c3c <LL_mDelay>
    LL_GPIO_ResetOutputPin(CLOCK_PORT, LCD_CLOCK);
 8000506:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800050a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050e:	f7ff ffe1 	bl	80004d4 <LL_GPIO_ResetOutputPin>
     //LL_mDelay(1);
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <lcd_reset>:

void lcd_reset(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
    LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 800051c:	2104      	movs	r1, #4
 800051e:	4817      	ldr	r0, [pc, #92]	@ (800057c <lcd_reset+0x64>)
 8000520:	f7ff ffd8 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT7,  LCD_7);
 8000524:	2110      	movs	r1, #16
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f7ff ffd3 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT4,  LCD_4);
 800052e:	2108      	movs	r1, #8
 8000530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000534:	f7ff ffce 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT56,  LCD_5 | LCD_6);
 8000538:	2112      	movs	r1, #18
 800053a:	4810      	ldr	r0, [pc, #64]	@ (800057c <lcd_reset+0x64>)
 800053c:	f7ff ffca 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(CLOCK_PORT,  LCD_CLOCK );
 8000540:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f7ff ffc4 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
    LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4 );
 800054c:	2108      	movs	r1, #8
 800054e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000552:	f7ff ffb1 	bl	80004b8 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5 );
 8000556:	2110      	movs	r1, #16
 8000558:	4808      	ldr	r0, [pc, #32]	@ (800057c <lcd_reset+0x64>)
 800055a:	f7ff ffad 	bl	80004b8 <LL_GPIO_SetOutputPin>
    lcd_clock();
 800055e:	f7ff ffc7 	bl	80004f0 <lcd_clock>
    lcd_clock();
 8000562:	f7ff ffc5 	bl	80004f0 <lcd_clock>
    lcd_clock();
 8000566:	f7ff ffc3 	bl	80004f0 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 800056a:	2108      	movs	r1, #8
 800056c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000570:	f7ff ffb0 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    lcd_clock();
 8000574:	f7ff ffbc 	bl	80004f0 <lcd_clock>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	48000400 	.word	0x48000400

08000580 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	091b      	lsrs	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d005      	beq.n	80005aa <lcd_write+0x2a>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 800059e:	2108      	movs	r1, #8
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a4:	f7ff ff88 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80005a8:	e004      	b.n	80005b4 <lcd_write+0x34>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 80005aa:	2108      	movs	r1, #8
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f7ff ff90 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 5 ) & 1)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	095b      	lsrs	r3, r3, #5
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d004      	beq.n	80005cc <lcd_write+0x4c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 80005c2:	2110      	movs	r1, #16
 80005c4:	483f      	ldr	r0, [pc, #252]	@ (80006c4 <lcd_write+0x144>)
 80005c6:	f7ff ff77 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80005ca:	e003      	b.n	80005d4 <lcd_write+0x54>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 80005cc:	2110      	movs	r1, #16
 80005ce:	483d      	ldr	r0, [pc, #244]	@ (80006c4 <lcd_write+0x144>)
 80005d0:	f7ff ff80 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 6 ) & 1)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	099b      	lsrs	r3, r3, #6
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d004      	beq.n	80005ec <lcd_write+0x6c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 80005e2:	2102      	movs	r1, #2
 80005e4:	4837      	ldr	r0, [pc, #220]	@ (80006c4 <lcd_write+0x144>)
 80005e6:	f7ff ff67 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80005ea:	e003      	b.n	80005f4 <lcd_write+0x74>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 80005ec:	2102      	movs	r1, #2
 80005ee:	4835      	ldr	r0, [pc, #212]	@ (80006c4 <lcd_write+0x144>)
 80005f0:	f7ff ff70 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 7 ) & 1)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	09db      	lsrs	r3, r3, #7
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d005      	beq.n	800060e <lcd_write+0x8e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 8000602:	2110      	movs	r1, #16
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f7ff ff56 	bl	80004b8 <LL_GPIO_SetOutputPin>
 800060c:	e004      	b.n	8000618 <lcd_write+0x98>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 800060e:	2110      	movs	r1, #16
 8000610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000614:	f7ff ff5e 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if(rs)
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d004      	beq.n	8000628 <lcd_write+0xa8>
        LL_GPIO_SetOutputPin(RS_PORT, LCD_RS);
 800061e:	2104      	movs	r1, #4
 8000620:	4828      	ldr	r0, [pc, #160]	@ (80006c4 <lcd_write+0x144>)
 8000622:	f7ff ff49 	bl	80004b8 <LL_GPIO_SetOutputPin>
 8000626:	e003      	b.n	8000630 <lcd_write+0xb0>
    else
        LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 8000628:	2104      	movs	r1, #4
 800062a:	4826      	ldr	r0, [pc, #152]	@ (80006c4 <lcd_write+0x144>)
 800062c:	f7ff ff52 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 8000630:	f7ff ff5e 	bl	80004f0 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	d005      	beq.n	800064a <lcd_write+0xca>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 800063e:	2108      	movs	r1, #8
 8000640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000644:	f7ff ff38 	bl	80004b8 <LL_GPIO_SetOutputPin>
 8000648:	e004      	b.n	8000654 <lcd_write+0xd4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 800064a:	2108      	movs	r1, #8
 800064c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000650:	f7ff ff40 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 1 ) & 1)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	085b      	lsrs	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <lcd_write+0xec>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 8000662:	2110      	movs	r1, #16
 8000664:	4817      	ldr	r0, [pc, #92]	@ (80006c4 <lcd_write+0x144>)
 8000666:	f7ff ff27 	bl	80004b8 <LL_GPIO_SetOutputPin>
 800066a:	e003      	b.n	8000674 <lcd_write+0xf4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 800066c:	2110      	movs	r1, #16
 800066e:	4815      	ldr	r0, [pc, #84]	@ (80006c4 <lcd_write+0x144>)
 8000670:	f7ff ff30 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 2 ) & 1)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	089b      	lsrs	r3, r3, #2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d004      	beq.n	800068c <lcd_write+0x10c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 8000682:	2102      	movs	r1, #2
 8000684:	480f      	ldr	r0, [pc, #60]	@ (80006c4 <lcd_write+0x144>)
 8000686:	f7ff ff17 	bl	80004b8 <LL_GPIO_SetOutputPin>
 800068a:	e003      	b.n	8000694 <lcd_write+0x114>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 800068c:	2102      	movs	r1, #2
 800068e:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <lcd_write+0x144>)
 8000690:	f7ff ff20 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 3 ) & 1)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	08db      	lsrs	r3, r3, #3
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d005      	beq.n	80006ae <lcd_write+0x12e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 80006a2:	2110      	movs	r1, #16
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a8:	f7ff ff06 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80006ac:	e004      	b.n	80006b8 <lcd_write+0x138>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 80006ae:	2110      	movs	r1, #16
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f7ff ff0e 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 80006b8:	f7ff ff1a 	bl	80004f0 <lcd_clock>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	48000400 	.word	0x48000400

080006c8 <lcd_clear>:

void lcd_clear(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff ff56 	bl	8000580 <lcd_write>
    _lcd_char = 0;
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <lcd_clear+0x1c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80006da:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <lcd_clear+0x20>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000028 	.word	0x20000028
 80006e8:	20000029 	.word	0x20000029

080006ec <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	460b      	mov	r3, r1
 80006f8:	71bb      	strb	r3, [r7, #6]
 80006fa:	4613      	mov	r3, r2
 80006fc:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	b25b      	sxtb	r3, r3
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	b25a      	sxtb	r2, r3
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	b25b      	sxtb	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b25a      	sxtb	r2, r3
 8000714:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000718:	4313      	orrs	r3, r2
 800071a:	b25b      	sxtb	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff2d 	bl	8000580 <lcd_write>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff1c 	bl	8000580 <lcd_write>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <lcd_cgram_address>:

void lcd_cgram_address(uint8_t address)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	lcd_write(0b01000000 | address, 0);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff0b 	bl	8000580 <lcd_write>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <moveToXY>:
	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
	lcd_write( ones + 0x30,1);
}

void moveToXY(unsigned char row, unsigned char column)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	011a      	lsls	r2, r3, #4
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	dc0a      	bgt.n	80007aa <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	b25b      	sxtb	r3, r3
 8000798:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800079c:	b25b      	sxtb	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff feec 	bl	8000580 <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 80007a8:	e059      	b.n	800085e <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	dd17      	ble.n	80007e0 <moveToXY+0x6c>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b1f      	cmp	r3, #31
 80007b4:	dc14      	bgt.n	80007e0 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	425a      	negs	r2, r3
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	f002 020f 	and.w	r2, r2, #15
 80007c2:	bf58      	it	pl
 80007c4:	4253      	negpl	r3, r2
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3340      	adds	r3, #64	@ 0x40
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fed1 	bl	8000580 <lcd_write>
 80007de:	e03e      	b.n	800085e <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b28      	cmp	r3, #40	@ 0x28
 80007e4:	dd1b      	ble.n	800081e <moveToXY+0xaa>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80007ea:	dc18      	bgt.n	800081e <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <moveToXY+0xf4>)
 80007f0:	fb83 1302 	smull	r1, r3, r3, r2
 80007f4:	1119      	asrs	r1, r3, #4
 80007f6:	17d3      	asrs	r3, r2, #31
 80007f8:	1ac9      	subs	r1, r1, r3
 80007fa:	460b      	mov	r3, r1
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	440b      	add	r3, r1
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	1ad1      	subs	r1, r2, r3
 8000804:	b2cb      	uxtb	r3, r1
 8000806:	3314      	adds	r3, #20
 8000808:	b2db      	uxtb	r3, r3
 800080a:	b25b      	sxtb	r3, r3
 800080c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000810:	b25b      	sxtb	r3, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff feb2 	bl	8000580 <lcd_write>
 800081c:	e01f      	b.n	800085e <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b13      	cmp	r3, #19
 8000822:	dd1c      	ble.n	800085e <moveToXY+0xea>
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b27      	cmp	r3, #39	@ 0x27
 8000828:	dc19      	bgt.n	800085e <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <moveToXY+0xf8>)
 800082e:	fb83 1302 	smull	r1, r3, r3, r2
 8000832:	4413      	add	r3, r2
 8000834:	1159      	asrs	r1, r3, #5
 8000836:	17d3      	asrs	r3, r2, #31
 8000838:	1ac9      	subs	r1, r1, r3
 800083a:	460b      	mov	r3, r1
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	1ad1      	subs	r1, r2, r3
 8000844:	b2cb      	uxtb	r3, r1
 8000846:	3354      	adds	r3, #84	@ 0x54
 8000848:	b2db      	uxtb	r3, r3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe92 	bl	8000580 <lcd_write>
}
 800085c:	e7ff      	b.n	800085e <moveToXY+0xea>
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	66666667 	.word	0x66666667
 800086c:	88888889 	.word	0x88888889

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4907      	ldr	r1, [pc, #28]	@ (80008c4 <__NVIC_EnableIRQ+0x38>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	@ (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	@ (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	@ 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	@ 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000994:	d301      	bcc.n	800099a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000996:	2301      	movs	r3, #1
 8000998:	e00f      	b.n	80009ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <SysTick_Config+0x40>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3b01      	subs	r3, #1
 80009a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009a2:	210f      	movs	r1, #15
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f7ff ff8e 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <SysTick_Config+0x40>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009b2:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <SysTick_Config+0x40>)
 80009b4:	2207      	movs	r2, #7
 80009b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	e000e010 	.word	0xe000e010

080009c8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << POSITION_VAL((Line >> LL_EXTI_REGISTER_PINPOS_SHFT)));
 80009d2:	4a18      	ldr	r2, [pc, #96]	@ (8000a34 <LL_SYSCFG_SetEXTISource+0x6c>)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	3302      	adds	r3, #2
 80009dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	0c1b      	lsrs	r3, r3, #16
 80009e4:	43db      	mvns	r3, r3
 80009e6:	ea02 0103 	and.w	r1, r2, r3
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	0c1b      	lsrs	r3, r3, #16
 80009ee:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	fa93 f3a3 	rbit	r3, r3
 80009f6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d101      	bne.n	8000a06 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 8000a02:	2320      	movs	r3, #32
 8000a04:	e003      	b.n	8000a0e <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	fab3 f383 	clz	r3, r3
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	461a      	mov	r2, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	fa03 f202 	lsl.w	r2, r3, r2
 8000a16:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	3302      	adds	r3, #2
 8000a22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000a26:	bf00      	nop
 8000a28:	371c      	adds	r7, #28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40010000 	.word	0x40010000

08000a38 <LL_GPIO_SetPinMode>:
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b08b      	sub	sp, #44	@ 0x2c
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa93 f3a3 	rbit	r3, r3
 8000a52:	613b      	str	r3, [r7, #16]
  return result;
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d101      	bne.n	8000a62 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	e003      	b.n	8000a6a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	fab3 f383 	clz	r3, r3
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	2103      	movs	r1, #3
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	401a      	ands	r2, r3
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	fa93 f3a3 	rbit	r3, r3
 8000a80:	61fb      	str	r3, [r7, #28]
  return result;
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d101      	bne.n	8000a90 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	e003      	b.n	8000a98 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a92:	fab3 f383 	clz	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	372c      	adds	r7, #44	@ 0x2c
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <LL_GPIO_SetPinPull>:
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b08b      	sub	sp, #44	@ 0x2c
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	60f8      	str	r0, [r7, #12]
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	68da      	ldr	r2, [r3, #12]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	fa93 f3a3 	rbit	r3, r3
 8000acc:	613b      	str	r3, [r7, #16]
  return result;
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000ad8:	2320      	movs	r3, #32
 8000ada:	e003      	b.n	8000ae4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fab3 f383 	clz	r3, r3
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	2103      	movs	r1, #3
 8000ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	401a      	ands	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	fa93 f3a3 	rbit	r3, r3
 8000afa:	61fb      	str	r3, [r7, #28]
  return result;
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000b06:	2320      	movs	r3, #32
 8000b08:	e003      	b.n	8000b12 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0c:	fab3 f383 	clz	r3, r3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	60da      	str	r2, [r3, #12]
}
 8000b20:	bf00      	nop
 8000b22:	372c      	adds	r7, #44	@ 0x2c
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <LL_GPIO_EnablePinAnalogControl>:
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <LL_GPIO_SetOutputPin>:
{
 8000b4e:	b480      	push	{r7}
 8000b50:	b083      	sub	sp, #12
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	683a      	ldr	r2, [r7, #0]
 8000b5c:	619a      	str	r2, [r3, #24]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <LL_GPIO_ResetOutputPin>:
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b90:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b94:	4907      	ldr	r1, [pc, #28]	@ (8000bb4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
int main(void)
 8000bbe:	f107 0318 	add.w	r3, r7, #24
 8000bc2:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f001 f943 	bl	8001e4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f8aa 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f000 fa74 	bl	80010b8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000bd0:	f000 f908 	bl	8000de4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000bd4:	f000 f93e 	bl	8000e54 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000bd8:	f000 f97c 	bl	8000ed4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000bdc:	f000 f9a0 	bl	8000f20 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000be0:	f000 f9dc 	bl	8000f9c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000be4:	f000 fa0a 	bl	8000ffc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000be8:	f000 fa38 	bl	800105c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  LL_GPIO_SetOutputPin(GPIOA, Led_LCD_Pin);
 8000bec:	2104      	movs	r1, #4
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf2:	f7ff ffac 	bl	8000b4e <LL_GPIO_SetOutputPin>
  SysTick_Config(0xffffff);
 8000bf6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8000bfa:	f7ff fec3 	bl	8000984 <SysTick_Config>
 lcd_reset();
 8000bfe:	f7ff fc8b 	bl	8000518 <lcd_reset>
 lcd_display_settings(1,0,0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fd70 	bl	80006ec <lcd_display_settings>
 lcd_clear();
 8000c0c:	f7ff fd5c 	bl	80006c8 <lcd_clear>
//    lcd_write(0x10, 1);
//    lcd_write(0x10, 1);
//    lcd_write(0x08, 1);
//    lcd_write(0x07, 1);

	lcd_cgram_address(0); // se selecciona la dirección 0 de la CGRAM, patrón con código 0
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff fd9d 	bl	8000750 <lcd_cgram_address>
	lcd_write(0x15, 1); //se va cargando con los bytes del patrón de cada fila de la CGRAM
 8000c16:	2101      	movs	r1, #1
 8000c18:	2015      	movs	r0, #21
 8000c1a:	f7ff fcb1 	bl	8000580 <lcd_write>
	lcd_write(0x15, 1);
 8000c1e:	2101      	movs	r1, #1
 8000c20:	2015      	movs	r0, #21
 8000c22:	f7ff fcad 	bl	8000580 <lcd_write>
	lcd_write(0xe, 1);
 8000c26:	2101      	movs	r1, #1
 8000c28:	200e      	movs	r0, #14
 8000c2a:	f7ff fca9 	bl	8000580 <lcd_write>
	lcd_write(0x4, 1);
 8000c2e:	2101      	movs	r1, #1
 8000c30:	2004      	movs	r0, #4
 8000c32:	f7ff fca5 	bl	8000580 <lcd_write>
	lcd_write(0x4, 1);
 8000c36:	2101      	movs	r1, #1
 8000c38:	2004      	movs	r0, #4
 8000c3a:	f7ff fca1 	bl	8000580 <lcd_write>
	lcd_write(0xa, 1);
 8000c3e:	2101      	movs	r1, #1
 8000c40:	200a      	movs	r0, #10
 8000c42:	f7ff fc9d 	bl	8000580 <lcd_write>
	lcd_write(0x11, 1);
 8000c46:	2101      	movs	r1, #1
 8000c48:	2011      	movs	r0, #17
 8000c4a:	f7ff fc99 	bl	8000580 <lcd_write>
	lcd_write(0x00, 1);
 8000c4e:	2101      	movs	r1, #1
 8000c50:	2000      	movs	r0, #0
 8000c52:	f7ff fc95 	bl	8000580 <lcd_write>
	lcd_cgram_address(8); //se selecciona la dirección 8 de la CGRAM, patrón con código 1
 8000c56:	2008      	movs	r0, #8
 8000c58:	f7ff fd7a 	bl	8000750 <lcd_cgram_address>
	lcd_write(0x4, 1); // se va cargando con los bytes del patrón de cada fila de la CGRAM
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	2004      	movs	r0, #4
 8000c60:	f7ff fc8e 	bl	8000580 <lcd_write>
	lcd_write(0x4, 1);
 8000c64:	2101      	movs	r1, #1
 8000c66:	2004      	movs	r0, #4
 8000c68:	f7ff fc8a 	bl	8000580 <lcd_write>
	lcd_write(0xe, 1);
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	200e      	movs	r0, #14
 8000c70:	f7ff fc86 	bl	8000580 <lcd_write>
	lcd_write(0x15, 1);
 8000c74:	2101      	movs	r1, #1
 8000c76:	2015      	movs	r0, #21
 8000c78:	f7ff fc82 	bl	8000580 <lcd_write>
	lcd_write(0x15, 1);
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	2015      	movs	r0, #21
 8000c80:	f7ff fc7e 	bl	8000580 <lcd_write>
	lcd_write(0xa, 1);
 8000c84:	2101      	movs	r1, #1
 8000c86:	200a      	movs	r0, #10
 8000c88:	f7ff fc7a 	bl	8000580 <lcd_write>
	lcd_write(0xa, 1);
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	200a      	movs	r0, #10
 8000c90:	f7ff fc76 	bl	8000580 <lcd_write>
	lcd_write(0x00, 1);
 8000c94:	2101      	movs	r1, #1
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fc72 	bl	8000580 <lcd_write>

   lcd_display_address(0);
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fd46 	bl	800072e <lcd_display_address>
   int contador = 0, estado_mu = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  contador++;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	3301      	adds	r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
	  if(contador==10 && estado_mu==0){
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b0a      	cmp	r3, #10
 8000cb4:	d116      	bne.n	8000ce4 <main+0x12c>
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d113      	bne.n	8000ce4 <main+0x12c>
		  moveToXY(1,7); //sitúa el cursor en la posición fila 1 columna 7, primer muñeco
 8000cbc:	2107      	movs	r1, #7
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff fd58 	bl	8000774 <moveToXY>
		  lcd_write(0,1); //escribe el nuevo patrón 0 en la DDRAM
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fc5a 	bl	8000580 <lcd_write>
		  moveToXY(1,8); //sitúa el cursor en la posición fila 1 columna 7, segundo muñeco
 8000ccc:	2108      	movs	r1, #8
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff fd50 	bl	8000774 <moveToXY>
		  lcd_write(0,1);
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fc52 	bl	8000580 <lcd_write>
		  contador=0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
		  estado_mu=1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
	  }
	  if(contador==10 && estado_mu==1){
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b0a      	cmp	r3, #10
 8000ce8:	d116      	bne.n	8000d18 <main+0x160>
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d113      	bne.n	8000d18 <main+0x160>
	  moveToXY(1,7);
 8000cf0:	2107      	movs	r1, #7
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f7ff fd3e 	bl	8000774 <moveToXY>
	  lcd_write(1,1); //escribe el nuevo patrón 0 en la DDRAM
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	f7ff fc40 	bl	8000580 <lcd_write>
	  moveToXY(1,8);
 8000d00:	2108      	movs	r1, #8
 8000d02:	2001      	movs	r0, #1
 8000d04:	f7ff fd36 	bl	8000774 <moveToXY>
	  lcd_write(1,1);
 8000d08:	2101      	movs	r1, #1
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	f7ff fc38 	bl	8000580 <lcd_write>
	  contador=0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
	  estado_mu=0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
//	  if(LL_GPIO_IsInputPinSet(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin)){
//	  LL_GPIO_SetOutputPin(LED2_GPIO_Port, LED2_Pin);
//	  }else{
//	  LL_GPIO_ResetOutputPin(LED2_GPIO_Port, LED2_Pin);
//	  }
	  HAL_Delay(100);
 8000d18:	2064      	movs	r0, #100	@ 0x64
 8000d1a:	f001 f90d 	bl	8001f38 <HAL_Delay>
	  contador++;
 8000d1e:	e7c4      	b.n	8000caa <main+0xf2>

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b096      	sub	sp, #88	@ 0x58
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2244      	movs	r2, #68	@ 0x44
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f004 ffac 	bl	8005c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d42:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d46:	f001 ff3b 	bl	8002bc0 <HAL_PWREx_ControlVoltageScaling>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d50:	f000 fcb0 	bl	80016b4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d54:	f001 ff16 	bl	8002b84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000d58:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <SystemClock_Config+0xc0>)
 8000d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d5e:	4a20      	ldr	r2, [pc, #128]	@ (8000de0 <SystemClock_Config+0xc0>)
 8000d60:	f023 0318 	bic.w	r3, r3, #24
 8000d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000d68:	2314      	movs	r3, #20
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d70:	2301      	movs	r3, #1
 8000d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d78:	2360      	movs	r3, #96	@ 0x60
 8000d7a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d80:	2301      	movs	r3, #1
 8000d82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d88:	2328      	movs	r3, #40	@ 0x28
 8000d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d90:	2302      	movs	r3, #2
 8000d92:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d94:	2302      	movs	r3, #2
 8000d96:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f831 	bl	8002e04 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000da8:	f000 fc84 	bl	80016b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	230f      	movs	r3, #15
 8000dae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db0:	2303      	movs	r3, #3
 8000db2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000db4:	2390      	movs	r3, #144	@ 0x90
 8000db6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 fbf9 	bl	80035bc <HAL_RCC_ClockConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dd0:	f000 fc70 	bl	80016b4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000dd4:	f003 f900 	bl	8003fd8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000dd8:	bf00      	nop
 8000dda:	3758      	adds	r7, #88	@ 0x58
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000

08000de4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000de8:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000dea:	4a19      	ldr	r2, [pc, #100]	@ (8000e50 <MX_DFSDM1_Init+0x6c>)
 8000dec:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000dee:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000df4:	4b15      	ldr	r3, [pc, #84]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000dfc:	2202      	movs	r2, #2
 8000dfe:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000e0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e12:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000e14:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <MX_DFSDM1_Init+0x68>)
 8000e3a:	f001 f987 	bl	800214c <HAL_DFSDM_ChannelInit>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000e44:	f000 fc36 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000002c 	.word	0x2000002c
 8000e50:	40016020 	.word	0x40016020

08000e54 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ecc <MX_I2C2_Init+0x78>)
 8000e5c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00604E6E;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000e60:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed0 <MX_I2C2_Init+0x7c>)
 8000e62:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e8e:	480e      	ldr	r0, [pc, #56]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000e90:	f001 fc12 	bl	80026b8 <HAL_I2C_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e9a:	f000 fc0b 	bl	80016b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4809      	ldr	r0, [pc, #36]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000ea2:	f001 fca4 	bl	80027ee <HAL_I2CEx_ConfigAnalogFilter>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000eac:	f000 fc02 	bl	80016b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_I2C2_Init+0x74>)
 8000eb4:	f001 fce6 	bl	8002884 <HAL_I2CEx_ConfigDigitalFilter>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ebe:	f000 fbf9 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000064 	.word	0x20000064
 8000ecc:	40005800 	.word	0x40005800
 8000ed0:	00604e6e 	.word	0x00604e6e

08000ed4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000eda:	4a10      	ldr	r2, [pc, #64]	@ (8000f1c <MX_QUADSPI_Init+0x48>)
 8000edc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000eec:	2210      	movs	r2, #16
 8000eee:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ef2:	2217      	movs	r2, #23
 8000ef4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	@ (8000f18 <MX_QUADSPI_Init+0x44>)
 8000f04:	f001 fec2 	bl	8002c8c <HAL_QSPI_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000f0e:	f000 fbd1 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000b8 	.word	0x200000b8
 8000f1c:	a0001000 	.word	0xa0001000

08000f20 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f26:	4a1c      	ldr	r2, [pc, #112]	@ (8000f98 <MX_SPI3_Init+0x78>)
 8000f28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000f32:	4b18      	ldr	r3, [pc, #96]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f38:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f3a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f3e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f40:	4b14      	ldr	r3, [pc, #80]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f52:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f54:	4b0f      	ldr	r3, [pc, #60]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f6e:	2207      	movs	r2, #7
 8000f70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <MX_SPI3_Init+0x74>)
 8000f80:	f003 fa0c 	bl	800439c <HAL_SPI_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f8a:	f000 fb93 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000fc 	.word	0x200000fc
 8000f98:	40003c00 	.word	0x40003c00

08000f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fa2:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <MX_USART1_UART_Init+0x5c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USART1_UART_Init+0x58>)
 8000fe0:	f003 fa7f 	bl	80044e2 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fea:	f000 fb63 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000160 	.word	0x20000160
 8000ff8:	40013800 	.word	0x40013800

08000ffc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001000:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001002:	4a15      	ldr	r2, [pc, #84]	@ (8001058 <MX_USART3_UART_Init+0x5c>)
 8001004:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001006:	4b13      	ldr	r3, [pc, #76]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_USART3_UART_Init+0x58>)
 8001040:	f003 fa4f 	bl	80044e2 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800104a:	f000 fb33 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200001e8 	.word	0x200001e8
 8001058:	40004800 	.word	0x40004800

0800105c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001062:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001066:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800106a:	2206      	movs	r2, #6
 800106c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001070:	2202      	movs	r2, #2
 8001072:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001076:	2202      	movs	r2, #2
 8001078:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001080:	4b0c      	ldr	r3, [pc, #48]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800108c:	4b09      	ldr	r3, [pc, #36]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001092:	4b08      	ldr	r3, [pc, #32]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	@ (80010b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010a0:	f001 fc3c 	bl	800291c <HAL_PCD_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010aa:	f000 fb03 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000270 	.word	0x20000270

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	@ 0x28
 80010bc:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 80010da:	2010      	movs	r0, #16
 80010dc:	f7ff fd54 	bl	8000b88 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80010e0:	2004      	movs	r0, #4
 80010e2:	f7ff fd51 	bl	8000b88 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff fd4e 	bl	8000b88 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80010ec:	2002      	movs	r0, #2
 80010ee:	f7ff fd4b 	bl	8000b88 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 80010f2:	2008      	movs	r0, #8
 80010f4:	f7ff fd48 	bl	8000b88 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 80010f8:	f44f 718a 	mov.w	r1, #276	@ 0x114
 80010fc:	48cd      	ldr	r0, [pc, #820]	@ (8001434 <MX_GPIO_Init+0x37c>)
 80010fe:	f7ff fd34 	bl	8000b6a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001102:	f248 111c 	movw	r1, #33052	@ 0x811c
 8001106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800110a:	f7ff fd2e 	bl	8000b6a <LL_GPIO_ResetOutputPin>
                          |E_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 800110e:	f24f 0116 	movw	r1, #61462	@ 0xf016
 8001112:	48c9      	ldr	r0, [pc, #804]	@ (8001438 <MX_GPIO_Init+0x380>)
 8001114:	f7ff fd29 	bl	8000b6a <LL_GPIO_ResetOutputPin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 8001118:	f241 0181 	movw	r1, #4225	@ 0x1081
 800111c:	48c7      	ldr	r0, [pc, #796]	@ (800143c <MX_GPIO_Init+0x384>)
 800111e:	f7ff fd24 	bl	8000b6a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 8001122:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001126:	48c6      	ldr	r0, [pc, #792]	@ (8001440 <MX_GPIO_Init+0x388>)
 8001128:	f7ff fd1f 	bl	8000b6a <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 800112c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001130:	48c2      	ldr	r0, [pc, #776]	@ (800143c <MX_GPIO_Init+0x384>)
 8001132:	f7ff fd0c 	bl	8000b4e <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 8001136:	2120      	movs	r1, #32
 8001138:	48bf      	ldr	r0, [pc, #764]	@ (8001438 <MX_GPIO_Init+0x380>)
 800113a:	f7ff fd08 	bl	8000b4e <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 800113e:	2101      	movs	r1, #1
 8001140:	48bc      	ldr	r0, [pc, #752]	@ (8001434 <MX_GPIO_Init+0x37c>)
 8001142:	f7ff fd04 	bl	8000b4e <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001146:	f240 1315 	movw	r3, #277	@ 0x115
 800114a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800114c:	2301      	movs	r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	48b4      	ldr	r0, [pc, #720]	@ (8001434 <MX_GPIO_Init+0x37c>)
 8001162:	f004 fa50 	bl	8005606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001166:	233f      	movs	r3, #63	@ 0x3f
 8001168:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4619      	mov	r1, r3
 8001176:	48b2      	ldr	r0, [pc, #712]	@ (8001440 <MX_GPIO_Init+0x388>)
 8001178:	f004 fa45 	bl	8005606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800117c:	2303      	movs	r3, #3
 800117e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001180:	2302      	movs	r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001190:	2308      	movs	r3, #8
 8001192:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f004 fa33 	bl	8005606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 80011a0:	f248 131c 	movw	r3, #33052	@ 0x811c
 80011a4:	607b      	str	r3, [r7, #4]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011a6:	2301      	movs	r3, #1
 80011a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011be:	f004 fa22 	bl	8005606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80011c2:	23e0      	movs	r3, #224	@ 0xe0
 80011c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80011c6:	2302      	movs	r3, #2
 80011c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80011d6:	2305      	movs	r3, #5
 80011d8:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	1d3b      	adds	r3, r7, #4
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e2:	f004 fa10 	bl	8005606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 80011e6:	f24f 0336 	movw	r3, #61494	@ 0xf036
 80011ea:	607b      	str	r3, [r7, #4]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011ec:	2301      	movs	r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	4619      	mov	r1, r3
 8001200:	488d      	ldr	r0, [pc, #564]	@ (8001438 <MX_GPIO_Init+0x380>)
 8001202:	f004 fa00 	bl	8005606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001206:	f243 0381 	movw	r3, #12417	@ 0x3081
 800120a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800120c:	2301      	movs	r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4619      	mov	r1, r3
 8001220:	4886      	ldr	r0, [pc, #536]	@ (800143c <MX_GPIO_Init+0x384>)
 8001222:	f004 f9f0 	bl	8005606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001226:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800122a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800122c:	2301      	movs	r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	4619      	mov	r1, r3
 8001240:	487f      	ldr	r0, [pc, #508]	@ (8001440 <MX_GPIO_Init+0x388>)
 8001242:	f004 f9e0 	bl	8005606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001246:	2302      	movs	r3, #2
 8001248:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800124a:	2302      	movs	r3, #2
 800124c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800125a:	2305      	movs	r3, #5
 800125c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	4619      	mov	r1, r3
 8001262:	4876      	ldr	r0, [pc, #472]	@ (800143c <MX_GPIO_Init+0x384>)
 8001264:	f004 f9cf 	bl	8005606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001268:	2378      	movs	r3, #120	@ 0x78
 800126a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800126c:	2302      	movs	r3, #2
 800126e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800127c:	2307      	movs	r3, #7
 800127e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	486d      	ldr	r0, [pc, #436]	@ (800143c <MX_GPIO_Init+0x384>)
 8001286:	f004 f9be 	bl	8005606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800128a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800128e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001290:	2302      	movs	r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001298:	2301      	movs	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4863      	ldr	r0, [pc, #396]	@ (8001438 <MX_GPIO_Init+0x380>)
 80012aa:	f004 f9ac 	bl	8005606 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 80012ae:	f04f 4170 	mov.w	r1, #4026531840	@ 0xf0000000
 80012b2:	2004      	movs	r0, #4
 80012b4:	f7ff fb88 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 80012b8:	4962      	ldr	r1, [pc, #392]	@ (8001444 <MX_GPIO_Init+0x38c>)
 80012ba:	2004      	movs	r0, #4
 80012bc:	f7ff fb84 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 80012c0:	4961      	ldr	r1, [pc, #388]	@ (8001448 <MX_GPIO_Init+0x390>)
 80012c2:	2004      	movs	r0, #4
 80012c4:	f7ff fb80 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80012c8:	4960      	ldr	r1, [pc, #384]	@ (800144c <MX_GPIO_Init+0x394>)
 80012ca:	2002      	movs	r0, #2
 80012cc:	f7ff fb7c 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 80012d0:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff fb77 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 80012da:	495d      	ldr	r1, [pc, #372]	@ (8001450 <MX_GPIO_Init+0x398>)
 80012dc:	2003      	movs	r0, #3
 80012de:	f7ff fb73 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 80012e2:	495c      	ldr	r1, [pc, #368]	@ (8001454 <MX_GPIO_Init+0x39c>)
 80012e4:	2003      	movs	r0, #3
 80012e6:	f7ff fb6f 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 80012ea:	495b      	ldr	r1, [pc, #364]	@ (8001458 <MX_GPIO_Init+0x3a0>)
 80012ec:	2003      	movs	r0, #3
 80012ee:	f7ff fb6b 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 80012f2:	495a      	ldr	r1, [pc, #360]	@ (800145c <MX_GPIO_Init+0x3a4>)
 80012f4:	2003      	movs	r0, #3
 80012f6:	f7ff fb67 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 80012fa:	4959      	ldr	r1, [pc, #356]	@ (8001460 <MX_GPIO_Init+0x3a8>)
 80012fc:	2002      	movs	r0, #2
 80012fe:	f7ff fb63 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 8001302:	4958      	ldr	r1, [pc, #352]	@ (8001464 <MX_GPIO_Init+0x3ac>)
 8001304:	2002      	movs	r0, #2
 8001306:	f7ff fb5f 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 800130a:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 800130e:	2003      	movs	r0, #3
 8001310:	f7ff fb5a 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 8001314:	f44f 0170 	mov.w	r1, #15728640	@ 0xf00000
 8001318:	2004      	movs	r0, #4
 800131a:	f7ff fb55 	bl	80009c8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800131e:	2308      	movs	r3, #8
 8001320:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001326:	2301      	movs	r3, #1
 8001328:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001332:	2301      	movs	r3, #1
 8001334:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	4618      	mov	r0, r3
 800133e:	f003 ff23 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8001342:	2320      	movs	r3, #32
 8001344:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001350:	2300      	movs	r3, #0
 8001352:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001356:	2301      	movs	r3, #1
 8001358:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4618      	mov	r0, r3
 8001362:	f003 ff11 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8001366:	2340      	movs	r3, #64	@ 0x40
 8001368:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800136e:	2301      	movs	r3, #1
 8001370:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001374:	2300      	movs	r3, #0
 8001376:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800137a:	2301      	movs	r3, #1
 800137c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4618      	mov	r0, r3
 8001386:	f003 feff 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001394:	2301      	movs	r3, #1
 8001396:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80013a0:	2302      	movs	r3, #2
 80013a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 feec 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013be:	2300      	movs	r3, #0
 80013c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	4618      	mov	r0, r3
 80013d0:	f003 feda 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 80013d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013d8:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80013de:	2301      	movs	r3, #1
 80013e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80013ea:	2301      	movs	r3, #1
 80013ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fec7 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 80013fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013fe:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001404:	2301      	movs	r3, #1
 8001406:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001410:	2301      	movs	r3, #1
 8001412:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4618      	mov	r0, r3
 800141c:	f003 feb4 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001420:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001424:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800142a:	2301      	movs	r3, #1
 800142c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001430:	e01a      	b.n	8001468 <MX_GPIO_Init+0x3b0>
 8001432:	bf00      	nop
 8001434:	48001000 	.word	0x48001000
 8001438:	48000400 	.word	0x48000400
 800143c:	48000c00 	.word	0x48000c00
 8001440:	48000800 	.word	0x48000800
 8001444:	00f00001 	.word	0x00f00001
 8001448:	0f000001 	.word	0x0f000001
 800144c:	00f00003 	.word	0x00f00003
 8001450:	0f000002 	.word	0x0f000002
 8001454:	f0000002 	.word	0xf0000002
 8001458:	0f000003 	.word	0x0f000003
 800145c:	f0000003 	.word	0xf0000003
 8001460:	f0000001 	.word	0xf0000001
 8001464:	000f0002 	.word	0x000f0002
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4618      	mov	r0, r3
 800147a:	f003 fe85 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800147e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001482:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001488:	2301      	movs	r3, #1
 800148a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001494:	2301      	movs	r3, #1
 8001496:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 fe72 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 80014a4:	2380      	movs	r3, #128	@ 0x80
 80014a6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014b8:	2301      	movs	r3, #1
 80014ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 fe60 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 80014c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014cc:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014d2:	2301      	movs	r3, #1
 80014d4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014de:	2301      	movs	r3, #1
 80014e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fe4d 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80014ee:	2304      	movs	r3, #4
 80014f0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001502:	2301      	movs	r3, #1
 8001504:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	4618      	mov	r0, r3
 800150e:	f003 fe3b 	bl	8005188 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001512:	2302      	movs	r3, #2
 8001514:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800151a:	2301      	movs	r3, #1
 800151c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001526:	2301      	movs	r3, #1
 8001528:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fe29 	bl	8005188 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 8001536:	2200      	movs	r2, #0
 8001538:	2108      	movs	r1, #8
 800153a:	485a      	ldr	r0, [pc, #360]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 800153c:	f7ff fab9 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 8001540:	2200      	movs	r2, #0
 8001542:	2120      	movs	r1, #32
 8001544:	4857      	ldr	r0, [pc, #348]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 8001546:	f7ff fab4 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 800154a:	2200      	movs	r2, #0
 800154c:	2140      	movs	r1, #64	@ 0x40
 800154e:	4855      	ldr	r0, [pc, #340]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 8001550:	f7ff faaf 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 8001554:	2200      	movs	r2, #0
 8001556:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800155a:	4853      	ldr	r0, [pc, #332]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 800155c:	f7ff faa9 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 8001560:	2200      	movs	r2, #0
 8001562:	2101      	movs	r1, #1
 8001564:	4851      	ldr	r0, [pc, #324]	@ (80016ac <MX_GPIO_Init+0x5f4>)
 8001566:	f7ff faa4 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001570:	484f      	ldr	r0, [pc, #316]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001572:	f7ff fa9e 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800157c:	484c      	ldr	r0, [pc, #304]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 800157e:	f7ff fa98 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001588:	4849      	ldr	r0, [pc, #292]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 800158a:	f7ff fa92 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001594:	4846      	ldr	r0, [pc, #280]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001596:	f7ff fa8c 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 800159a:	2200      	movs	r2, #0
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	4842      	ldr	r0, [pc, #264]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 80015a0:	f7ff fa87 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015aa:	483f      	ldr	r0, [pc, #252]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 80015ac:	f7ff fa81 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2104      	movs	r1, #4
 80015b4:	483e      	ldr	r0, [pc, #248]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 80015b6:	f7ff fa7c 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2102      	movs	r1, #2
 80015be:	4839      	ldr	r0, [pc, #228]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 80015c0:	f7ff fa77 	bl	8000ab2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2108      	movs	r1, #8
 80015c8:	4836      	ldr	r0, [pc, #216]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 80015ca:	f7ff fa35 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2120      	movs	r1, #32
 80015d2:	4834      	ldr	r0, [pc, #208]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 80015d4:	f7ff fa30 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 80015d8:	2200      	movs	r2, #0
 80015da:	2140      	movs	r1, #64	@ 0x40
 80015dc:	4831      	ldr	r0, [pc, #196]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 80015de:	f7ff fa2b 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e8:	482f      	ldr	r0, [pc, #188]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 80015ea:	f7ff fa25 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2101      	movs	r1, #1
 80015f2:	482e      	ldr	r0, [pc, #184]	@ (80016ac <MX_GPIO_Init+0x5f4>)
 80015f4:	f7ff fa20 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80015f8:	2200      	movs	r2, #0
 80015fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015fe:	482c      	ldr	r0, [pc, #176]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001600:	f7ff fa1a 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800160a:	4829      	ldr	r0, [pc, #164]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 800160c:	f7ff fa14 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001616:	4826      	ldr	r0, [pc, #152]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001618:	f7ff fa0e 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800161c:	2200      	movs	r2, #0
 800161e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001622:	4823      	ldr	r0, [pc, #140]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001624:	f7ff fa08 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 8001628:	2200      	movs	r2, #0
 800162a:	2180      	movs	r1, #128	@ 0x80
 800162c:	481e      	ldr	r0, [pc, #120]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 800162e:	f7ff fa03 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001638:	481b      	ldr	r0, [pc, #108]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 800163a:	f7ff f9fd 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 800163e:	2200      	movs	r2, #0
 8001640:	2104      	movs	r1, #4
 8001642:	481b      	ldr	r0, [pc, #108]	@ (80016b0 <MX_GPIO_Init+0x5f8>)
 8001644:	f7ff f9f8 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001648:	2200      	movs	r2, #0
 800164a:	2102      	movs	r1, #2
 800164c:	4815      	ldr	r0, [pc, #84]	@ (80016a4 <MX_GPIO_Init+0x5ec>)
 800164e:	f7ff f9f3 	bl	8000a38 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001652:	213f      	movs	r1, #63	@ 0x3f
 8001654:	4814      	ldr	r0, [pc, #80]	@ (80016a8 <MX_GPIO_Init+0x5f0>)
 8001656:	f7ff fa69 	bl	8000b2c <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800165a:	f7ff f909 	bl	8000870 <__NVIC_GetPriorityGrouping>
 800165e:	4603      	mov	r3, r0
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff f959 	bl	800091c <NVIC_EncodePriority>
 800166a:	4603      	mov	r3, r0
 800166c:	4619      	mov	r1, r3
 800166e:	2017      	movs	r0, #23
 8001670:	f7ff f92a 	bl	80008c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001674:	2017      	movs	r0, #23
 8001676:	f7ff f909 	bl	800088c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800167a:	f7ff f8f9 	bl	8000870 <__NVIC_GetPriorityGrouping>
 800167e:	4603      	mov	r3, r0
 8001680:	2200      	movs	r2, #0
 8001682:	2100      	movs	r1, #0
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff f949 	bl	800091c <NVIC_EncodePriority>
 800168a:	4603      	mov	r3, r0
 800168c:	4619      	mov	r1, r3
 800168e:	2028      	movs	r0, #40	@ 0x28
 8001690:	f7ff f91a 	bl	80008c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001694:	2028      	movs	r0, #40	@ 0x28
 8001696:	f7ff f8f9 	bl	800088c <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	@ 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	48001000 	.word	0x48001000
 80016a8:	48000800 	.word	0x48000800
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000c00 	.word	0x48000c00

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016b8:	b672      	cpsid	i
}
 80016ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <Error_Handler+0x8>

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <HAL_MspInit+0x44>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001704 <HAL_MspInit+0x44>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80016d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001704 <HAL_MspInit+0x44>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	@ (8001704 <HAL_MspInit+0x44>)
 80016e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e2:	4a08      	ldr	r2, [pc, #32]	@ (8001704 <HAL_MspInit+0x44>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_MspInit+0x44>)
 80016ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0ac      	sub	sp, #176	@ 0xb0
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2288      	movs	r2, #136	@ 0x88
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f004 faaf 	bl	8005c8c <memset>
  if(DFSDM1_Init == 0)
 800172e:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d142      	bne.n	80017bc <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800173a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4618      	mov	r0, r3
 8001748:	f002 f95c 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001752:	f7ff ffaf 	bl	80016b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175a:	4a1b      	ldr	r2, [pc, #108]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800175c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001760:	6613      	str	r3, [r2, #96]	@ 0x60
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001766:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800176e:	4b16      	ldr	r3, [pc, #88]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001772:	4a15      	ldr	r2, [pc, #84]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001786:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800178a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178e:	2302      	movs	r3, #2
 8001790:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017a0:	2306      	movs	r3, #6
 80017a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017a6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017aa:	4619      	mov	r1, r3
 80017ac:	4807      	ldr	r0, [pc, #28]	@ (80017cc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80017ae:	f000 fdd9 	bl	8002364 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80017b2:	4b04      	ldr	r3, [pc, #16]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a02      	ldr	r2, [pc, #8]	@ (80017c4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017ba:	6013      	str	r3, [r2, #0]
  }

}
 80017bc:	bf00      	nop
 80017be:	37b0      	adds	r7, #176	@ 0xb0
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000754 	.word	0x20000754
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48001000 	.word	0x48001000

080017d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0ac      	sub	sp, #176	@ 0xb0
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2288      	movs	r2, #136	@ 0x88
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fa4b 	bl	8005c8c <memset>
  if(hi2c->Instance==I2C2)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a21      	ldr	r2, [pc, #132]	@ (8001880 <HAL_I2C_MspInit+0xb0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d13b      	bne.n	8001878 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001804:	2300      	movs	r3, #0
 8001806:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4618      	mov	r0, r3
 800180e:	f002 f8f9 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001818:	f7ff ff4c 	bl	80016b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 800181e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001820:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001828:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001834:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001838:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001842:	2301      	movs	r3, #1
 8001844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800184e:	2304      	movs	r3, #4
 8001850:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001858:	4619      	mov	r1, r3
 800185a:	480b      	ldr	r0, [pc, #44]	@ (8001888 <HAL_I2C_MspInit+0xb8>)
 800185c:	f000 fd82 	bl	8002364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 8001862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 8001866:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800186a:	6593      	str	r3, [r2, #88]	@ 0x58
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_I2C_MspInit+0xb4>)
 800186e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001878:	bf00      	nop
 800187a:	37b0      	adds	r7, #176	@ 0xb0
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40005800 	.word	0x40005800
 8001884:	40021000 	.word	0x40021000
 8001888:	48000400 	.word	0x48000400

0800188c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a17      	ldr	r2, [pc, #92]	@ (8001908 <HAL_QSPI_MspInit+0x7c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d128      	bne.n	8001900 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b2:	4a16      	ldr	r2, [pc, #88]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	4a10      	ldr	r2, [pc, #64]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <HAL_QSPI_MspInit+0x80>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80018de:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80018e2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018f0:	230a      	movs	r3, #10
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <HAL_QSPI_MspInit+0x84>)
 80018fc:	f000 fd32 	bl	8002364 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	@ 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	a0001000 	.word	0xa0001000
 800190c:	40021000 	.word	0x40021000
 8001910:	48001000 	.word	0x48001000

08001914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	@ 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_SPI_MspInit+0x7c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d128      	bne.n	8001988 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193a:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 800193c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001940:	6593      	str	r3, [r2, #88]	@ 0x58
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001952:	4a10      	ldr	r2, [pc, #64]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001966:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001978:	2306      	movs	r3, #6
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4805      	ldr	r0, [pc, #20]	@ (8001998 <HAL_SPI_MspInit+0x84>)
 8001984:	f000 fcee 	bl	8002364 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	@ 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40003c00 	.word	0x40003c00
 8001994:	40021000 	.word	0x40021000
 8001998:	48000800 	.word	0x48000800

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0ae      	sub	sp, #184	@ 0xb8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	2288      	movs	r2, #136	@ 0x88
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 f965 	bl	8005c8c <memset>
  if(huart->Instance==USART1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a42      	ldr	r2, [pc, #264]	@ (8001ad0 <HAL_UART_MspInit+0x134>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d13b      	bne.n	8001a44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019d0:	2300      	movs	r3, #0
 80019d2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 f813 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019e4:	f7ff fe66 	bl	80016b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019e8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 80019ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ec:	4a39      	ldr	r2, [pc, #228]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f4:	4b37      	ldr	r3, [pc, #220]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 80019f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a04:	4a33      	ldr	r2, [pc, #204]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a18:	23c0      	movs	r3, #192	@ 0xc0
 8001a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a30:	2307      	movs	r3, #7
 8001a32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4826      	ldr	r0, [pc, #152]	@ (8001ad8 <HAL_UART_MspInit+0x13c>)
 8001a3e:	f000 fc91 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a42:	e040      	b.n	8001ac6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a24      	ldr	r2, [pc, #144]	@ (8001adc <HAL_UART_MspInit+0x140>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d13b      	bne.n	8001ac6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f001 ffd2 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001a66:	f7ff fe25 	bl	80016b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6e:	4a19      	ldr	r2, [pc, #100]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a76:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a82:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	4a13      	ldr	r2, [pc, #76]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <HAL_UART_MspInit+0x138>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aba:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4807      	ldr	r0, [pc, #28]	@ (8001ae0 <HAL_UART_MspInit+0x144>)
 8001ac2:	f000 fc4f 	bl	8002364 <HAL_GPIO_Init>
}
 8001ac6:	bf00      	nop
 8001ac8:	37b8      	adds	r7, #184	@ 0xb8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	40004800 	.word	0x40004800
 8001ae0:	48000c00 	.word	0x48000c00

08001ae4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0ac      	sub	sp, #176	@ 0xb0
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2288      	movs	r2, #136	@ 0x88
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f004 f8c1 	bl	8005c8c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b12:	d17c      	bne.n	8001c0e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001b14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b18:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001b1a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001b2a:	2318      	movs	r3, #24
 8001b2c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001b2e:	2307      	movs	r3, #7
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001b32:	2302      	movs	r3, #2
 8001b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001b3a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001b3e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4618      	mov	r0, r3
 8001b46:	f001 ff5d 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001b50:	f7ff fdb0 	bl	80016b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b54:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b58:	4a2f      	ldr	r2, [pc, #188]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b60:	4b2d      	ldr	r3, [pc, #180]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b8a:	f000 fbeb 	bl	8002364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b8e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001b92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ba8:	230a      	movs	r3, #10
 8001baa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb8:	f000 fbd4 	bl	8002364 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001bbc:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc0:	4a15      	ldr	r2, [pc, #84]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bc2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bc8:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd4:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d114      	bne.n	8001c0a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001be4:	4a0c      	ldr	r2, [pc, #48]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bec:	4b0a      	ldr	r3, [pc, #40]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001bf8:	f001 f838 	bl	8002c6c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c00:	4a05      	ldr	r2, [pc, #20]	@ (8001c18 <HAL_PCD_MspInit+0x134>)
 8001c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c06:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001c08:	e001      	b.n	8001c0e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001c0a:	f001 f82f 	bl	8002c6c <HAL_PWREx_EnableVddUSB>
}
 8001c0e:	bf00      	nop
 8001c10:	37b0      	adds	r7, #176	@ 0xb0
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	4013      	ands	r3, r2
 8001c32:	041a      	lsls	r2, r3, #16
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43d9      	mvns	r1, r3
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	400b      	ands	r3, r1
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	619a      	str	r2, [r3, #24]
}
 8001c42:	bf00      	nop
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001c58:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d101      	bne.n	8001c6a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40010400 	.word	0x40010400

08001c7c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001c84:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6153      	str	r3, [r2, #20]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40010400 	.word	0x40010400

08001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <NMI_Handler+0x4>

08001ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <HardFault_Handler+0x4>

08001cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <MemManage_Handler+0x4>

08001cb4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001cf4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001cf8:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <SysTick_Handler+0x18>)
 8001cfa:	f7ff ff8f 	bl	8001c1c <LL_GPIO_TogglePin>
//
//		estado = 1;
//	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfe:	f000 f8fb 	bl	8001ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	48000400 	.word	0x48000400

08001d0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001d10:	2020      	movs	r0, #32
 8001d12:	f7ff ff9d 	bl	8001c50 <LL_EXTI_IsActiveFlag_0_31>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8001d1c:	2020      	movs	r0, #32
 8001d1e:	f7ff ffad 	bl	8001c7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8001d22:	2040      	movs	r0, #64	@ 0x40
 8001d24:	f7ff ff94 	bl	8001c50 <LL_EXTI_IsActiveFlag_0_31>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8001d2e:	2040      	movs	r0, #64	@ 0x40
 8001d30:	f7ff ffa4 	bl	8001c7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 8001d34:	2080      	movs	r0, #128	@ 0x80
 8001d36:	f7ff ff8b 	bl	8001c50 <LL_EXTI_IsActiveFlag_0_31>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8001d40:	2080      	movs	r0, #128	@ 0x80
 8001d42:	f7ff ff9b 	bl	8001c7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */

    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8001d46:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d4a:	f7ff ff81 	bl	8001c50 <LL_EXTI_IsActiveFlag_0_31>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8001d54:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d58:	f7ff ff90 	bl	8001c7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 8001d64:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d68:	f7ff ff72 	bl	8001c50 <LL_EXTI_IsActiveFlag_0_31>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 8001d72:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d76:	f7ff ff81 	bl	8001c7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */

    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 8001d7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d7e:	f7ff ff67 	bl	8001c50 <LL_EXTI_IsActiveFlag_0_31>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8001d88:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d8c:	f7ff ff76 	bl	8001c7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */

    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001d90:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d94:	f7ff ff5c 	bl	8001c50 <LL_EXTI_IsActiveFlag_0_31>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001d9e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001da2:	f7ff ff6b 	bl	8001c7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001da6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001daa:	f7ff ff51 	bl	8001c50 <LL_EXTI_IsActiveFlag_0_31>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001db4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001db8:	f7ff ff60 	bl	8001c7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001dbc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001dc0:	f7ff ff46 	bl	8001c50 <LL_EXTI_IsActiveFlag_0_31>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <EXTI15_10_IRQHandler+0x72>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001dca:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001dce:	f7ff ff55 	bl	8001c7c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ddc:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <SystemInit+0x20>)
 8001dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de2:	4a05      	ldr	r2, [pc, #20]	@ (8001df8 <SystemInit+0x20>)
 8001de4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dec:	bf00      	nop
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e00:	f7ff ffea 	bl	8001dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e04:	480c      	ldr	r0, [pc, #48]	@ (8001e38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e06:	490d      	ldr	r1, [pc, #52]	@ (8001e3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e08:	4a0d      	ldr	r2, [pc, #52]	@ (8001e40 <LoopForever+0xe>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e1c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e48 <LoopForever+0x16>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2a:	f003 ff37 	bl	8005c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e2e:	f7fe fec3 	bl	8000bb8 <main>

08001e32 <LoopForever>:

LoopForever:
    b LoopForever
 8001e32:	e7fe      	b.n	8001e32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001e40:	08005d54 	.word	0x08005d54
  ldr r2, =_sbss
 8001e44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001e48:	20000780 	.word	0x20000780

08001e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e4c:	e7fe      	b.n	8001e4c <ADC1_2_IRQHandler>

08001e4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e58:	2003      	movs	r0, #3
 8001e5a:	f000 f943 	bl	80020e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 f80e 	bl	8001e80 <HAL_InitTick>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d002      	beq.n	8001e70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	e001      	b.n	8001e74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e70:	f7ff fc26 	bl	80016c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e8c:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <HAL_InitTick+0x6c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d023      	beq.n	8001edc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e94:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <HAL_InitTick+0x70>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <HAL_InitTick+0x6c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f941 	bl	8002132 <HAL_SYSTICK_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10f      	bne.n	8001ed6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d809      	bhi.n	8001ed0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f000 f919 	bl	80020fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef4 <HAL_InitTick+0x74>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e007      	b.n	8001ee0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e004      	b.n	8001ee0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	e001      	b.n	8001ee0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	@ (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000008 	.word	0x20000008
 8001f1c:	20000758 	.word	0x20000758

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	@ (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000758 	.word	0x20000758

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff ffee 	bl	8001f20 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d005      	beq.n	8001f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f52:	4b0a      	ldr	r3, [pc, #40]	@ (8001f7c <HAL_Delay+0x44>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f5e:	bf00      	nop
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d8f7      	bhi.n	8001f60 <HAL_Delay+0x28>
  {
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000008 	.word	0x20000008

08001f80 <__NVIC_SetPriorityGrouping>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f90:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fb2:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	60d3      	str	r3, [r2, #12]
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <__NVIC_GetPriorityGrouping>:
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fcc:	4b04      	ldr	r3, [pc, #16]	@ (8001fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	f003 0307 	and.w	r3, r3, #7
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_SetPriority>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	6039      	str	r1, [r7, #0]
 8001fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	db0a      	blt.n	800200e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	490c      	ldr	r1, [pc, #48]	@ (8002030 <__NVIC_SetPriority+0x4c>)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	0112      	lsls	r2, r2, #4
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	440b      	add	r3, r1
 8002008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800200c:	e00a      	b.n	8002024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4908      	ldr	r1, [pc, #32]	@ (8002034 <__NVIC_SetPriority+0x50>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	3b04      	subs	r3, #4
 800201c:	0112      	lsls	r2, r2, #4
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	440b      	add	r3, r1
 8002022:	761a      	strb	r2, [r3, #24]
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <NVIC_EncodePriority>:
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0307 	and.w	r3, r3, #7
 800204a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f1c3 0307 	rsb	r3, r3, #7
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf28      	it	cs
 8002056:	2304      	movcs	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3304      	adds	r3, #4
 800205e:	2b06      	cmp	r3, #6
 8002060:	d902      	bls.n	8002068 <NVIC_EncodePriority+0x30>
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3b03      	subs	r3, #3
 8002066:	e000      	b.n	800206a <NVIC_EncodePriority+0x32>
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43da      	mvns	r2, r3
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	401a      	ands	r2, r3
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002080:	f04f 31ff 	mov.w	r1, #4294967295
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	43d9      	mvns	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	4313      	orrs	r3, r2
}
 8002092:	4618      	mov	r0, r3
 8002094:	3724      	adds	r7, #36	@ 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <SysTick_Config>:
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020b0:	d301      	bcc.n	80020b6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00f      	b.n	80020d6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <SysTick_Config+0x40>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020be:	210f      	movs	r1, #15
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f7ff ff8e 	bl	8001fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c8:	4b05      	ldr	r3, [pc, #20]	@ (80020e0 <SysTick_Config+0x40>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <SysTick_Config+0x40>)
 80020d0:	2207      	movs	r2, #7
 80020d2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010

080020e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff47 	bl	8001f80 <__NVIC_SetPriorityGrouping>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b086      	sub	sp, #24
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800210c:	f7ff ff5c 	bl	8001fc8 <__NVIC_GetPriorityGrouping>
 8002110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6978      	ldr	r0, [r7, #20]
 8002118:	f7ff ff8e 	bl	8002038 <NVIC_EncodePriority>
 800211c:	4602      	mov	r2, r0
 800211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002122:	4611      	mov	r1, r2
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff5d 	bl	8001fe4 <__NVIC_SetPriority>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ffb0 	bl	80020a0 <SysTick_Config>
 8002140:	4603      	mov	r3, r0
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e0ac      	b.n	80022b8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f8b2 	bl	80022cc <DFSDM_GetChannelFromInstance>
 8002168:	4603      	mov	r3, r0
 800216a:	4a55      	ldr	r2, [pc, #340]	@ (80022c0 <HAL_DFSDM_ChannelInit+0x174>)
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e09f      	b.n	80022b8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fac5 	bl	8001708 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800217e:	4b51      	ldr	r3, [pc, #324]	@ (80022c4 <HAL_DFSDM_ChannelInit+0x178>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	3301      	adds	r3, #1
 8002184:	4a4f      	ldr	r2, [pc, #316]	@ (80022c4 <HAL_DFSDM_ChannelInit+0x178>)
 8002186:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002188:	4b4e      	ldr	r3, [pc, #312]	@ (80022c4 <HAL_DFSDM_ChannelInit+0x178>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d125      	bne.n	80021dc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002190:	4b4d      	ldr	r3, [pc, #308]	@ (80022c8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a4c      	ldr	r2, [pc, #304]	@ (80022c8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002196:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800219a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800219c:	4b4a      	ldr	r3, [pc, #296]	@ (80022c8 <HAL_DFSDM_ChannelInit+0x17c>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4948      	ldr	r1, [pc, #288]	@ (80022c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80021aa:	4b47      	ldr	r3, [pc, #284]	@ (80022c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a46      	ldr	r2, [pc, #280]	@ (80022c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80021b0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80021b4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	791b      	ldrb	r3, [r3, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80021be:	4b42      	ldr	r3, [pc, #264]	@ (80022c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	041b      	lsls	r3, r3, #16
 80021ca:	493f      	ldr	r1, [pc, #252]	@ (80022c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80021d0:	4b3d      	ldr	r3, [pc, #244]	@ (80022c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a3c      	ldr	r2, [pc, #240]	@ (80022c8 <HAL_DFSDM_ChannelInit+0x17c>)
 80021d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80021da:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80021ea:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80021fa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002200:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 020f 	bic.w	r2, r2, #15
 8002218:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6819      	ldr	r1, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689a      	ldr	r2, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002240:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6899      	ldr	r1, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	3b01      	subs	r3, #1
 8002252:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f002 0207 	and.w	r2, r2, #7
 800226c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002278:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002298:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f810 	bl	80022cc <DFSDM_GetChannelFromInstance>
 80022ac:	4602      	mov	r2, r0
 80022ae:	4904      	ldr	r1, [pc, #16]	@ (80022c0 <HAL_DFSDM_ChannelInit+0x174>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000760 	.word	0x20000760
 80022c4:	2000075c 	.word	0x2000075c
 80022c8:	40016000 	.word	0x40016000

080022cc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <DFSDM_GetChannelFromInstance+0x7c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d102      	bne.n	80022e2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e02b      	b.n	800233a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a19      	ldr	r2, [pc, #100]	@ (800234c <DFSDM_GetChannelFromInstance+0x80>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d102      	bne.n	80022f0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80022ea:	2301      	movs	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	e024      	b.n	800233a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a17      	ldr	r2, [pc, #92]	@ (8002350 <DFSDM_GetChannelFromInstance+0x84>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d102      	bne.n	80022fe <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80022f8:	2302      	movs	r3, #2
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e01d      	b.n	800233a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a14      	ldr	r2, [pc, #80]	@ (8002354 <DFSDM_GetChannelFromInstance+0x88>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d102      	bne.n	800230c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002306:	2304      	movs	r3, #4
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	e016      	b.n	800233a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a12      	ldr	r2, [pc, #72]	@ (8002358 <DFSDM_GetChannelFromInstance+0x8c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d102      	bne.n	800231a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002314:	2305      	movs	r3, #5
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e00f      	b.n	800233a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a0f      	ldr	r2, [pc, #60]	@ (800235c <DFSDM_GetChannelFromInstance+0x90>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d102      	bne.n	8002328 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002322:	2306      	movs	r3, #6
 8002324:	60fb      	str	r3, [r7, #12]
 8002326:	e008      	b.n	800233a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <DFSDM_GetChannelFromInstance+0x94>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d102      	bne.n	8002336 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002330:	2307      	movs	r3, #7
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e001      	b.n	800233a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002336:	2303      	movs	r3, #3
 8002338:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800233a:	68fb      	ldr	r3, [r7, #12]
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	40016000 	.word	0x40016000
 800234c:	40016020 	.word	0x40016020
 8002350:	40016040 	.word	0x40016040
 8002354:	40016080 	.word	0x40016080
 8002358:	400160a0 	.word	0x400160a0
 800235c:	400160c0 	.word	0x400160c0
 8002360:	400160e0 	.word	0x400160e0

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002372:	e17f      	b.n	8002674 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2101      	movs	r1, #1
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	4013      	ands	r3, r2
 8002382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 8171 	beq.w	800266e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d005      	beq.n	80023a4 <HAL_GPIO_Init+0x40>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d130      	bne.n	8002406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	4013      	ands	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023da:	2201      	movs	r2, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f003 0201 	and.w	r2, r3, #1
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b03      	cmp	r3, #3
 8002410:	d118      	bne.n	8002444 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002418:	2201      	movs	r2, #1
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	08db      	lsrs	r3, r3, #3
 800242e:	f003 0201 	and.w	r2, r3, #1
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b03      	cmp	r3, #3
 800244e:	d017      	beq.n	8002480 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4313      	orrs	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d123      	bne.n	80024d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	220f      	movs	r2, #15
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	08da      	lsrs	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3208      	adds	r2, #8
 80024ce:	6939      	ldr	r1, [r7, #16]
 80024d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0203 	and.w	r2, r3, #3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 80ac 	beq.w	800266e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002516:	4b5f      	ldr	r3, [pc, #380]	@ (8002694 <HAL_GPIO_Init+0x330>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251a:	4a5e      	ldr	r2, [pc, #376]	@ (8002694 <HAL_GPIO_Init+0x330>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6613      	str	r3, [r2, #96]	@ 0x60
 8002522:	4b5c      	ldr	r3, [pc, #368]	@ (8002694 <HAL_GPIO_Init+0x330>)
 8002524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800252e:	4a5a      	ldr	r2, [pc, #360]	@ (8002698 <HAL_GPIO_Init+0x334>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	3302      	adds	r3, #2
 8002536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	220f      	movs	r2, #15
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	43db      	mvns	r3, r3
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002558:	d025      	beq.n	80025a6 <HAL_GPIO_Init+0x242>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a4f      	ldr	r2, [pc, #316]	@ (800269c <HAL_GPIO_Init+0x338>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01f      	beq.n	80025a2 <HAL_GPIO_Init+0x23e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a4e      	ldr	r2, [pc, #312]	@ (80026a0 <HAL_GPIO_Init+0x33c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d019      	beq.n	800259e <HAL_GPIO_Init+0x23a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a4d      	ldr	r2, [pc, #308]	@ (80026a4 <HAL_GPIO_Init+0x340>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_GPIO_Init+0x236>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4c      	ldr	r2, [pc, #304]	@ (80026a8 <HAL_GPIO_Init+0x344>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d00d      	beq.n	8002596 <HAL_GPIO_Init+0x232>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4b      	ldr	r2, [pc, #300]	@ (80026ac <HAL_GPIO_Init+0x348>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_GPIO_Init+0x22e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4a      	ldr	r2, [pc, #296]	@ (80026b0 <HAL_GPIO_Init+0x34c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d101      	bne.n	800258e <HAL_GPIO_Init+0x22a>
 800258a:	2306      	movs	r3, #6
 800258c:	e00c      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800258e:	2307      	movs	r3, #7
 8002590:	e00a      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 8002592:	2305      	movs	r3, #5
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 8002596:	2304      	movs	r3, #4
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x244>
 80025a6:	2300      	movs	r3, #0
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025b8:	4937      	ldr	r1, [pc, #220]	@ (8002698 <HAL_GPIO_Init+0x334>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025ea:	4a32      	ldr	r2, [pc, #200]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025f0:	4b30      	ldr	r3, [pc, #192]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002614:	4a27      	ldr	r2, [pc, #156]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800261a:	4b26      	ldr	r3, [pc, #152]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800263e:	4a1d      	ldr	r2, [pc, #116]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002644:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002668:	4a12      	ldr	r2, [pc, #72]	@ (80026b4 <HAL_GPIO_Init+0x350>)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	3301      	adds	r3, #1
 8002672:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	fa22 f303 	lsr.w	r3, r2, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	f47f ae78 	bne.w	8002374 <HAL_GPIO_Init+0x10>
  }
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	40010000 	.word	0x40010000
 800269c:	48000400 	.word	0x48000400
 80026a0:	48000800 	.word	0x48000800
 80026a4:	48000c00 	.word	0x48000c00
 80026a8:	48001000 	.word	0x48001000
 80026ac:	48001400 	.word	0x48001400
 80026b0:	48001800 	.word	0x48001800
 80026b4:	40010400 	.word	0x40010400

080026b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e08d      	b.n	80027e6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff f876 	bl	80017d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2224      	movs	r2, #36	@ 0x24
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0201 	bic.w	r2, r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002708:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002718:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d107      	bne.n	8002732 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e006      	b.n	8002740 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800273e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d108      	bne.n	800275a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	e007      	b.n	800276a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002768:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002778:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800277c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800278c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69d9      	ldr	r1, [r3, #28]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1a      	ldr	r2, [r3, #32]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2220      	movs	r2, #32
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b20      	cmp	r3, #32
 8002802:	d138      	bne.n	8002876 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800280a:	2b01      	cmp	r3, #1
 800280c:	d101      	bne.n	8002812 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800280e:	2302      	movs	r3, #2
 8002810:	e032      	b.n	8002878 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2224      	movs	r2, #36	@ 0x24
 800281e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002840:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6819      	ldr	r1, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	d139      	bne.n	800290e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d101      	bne.n	80028a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e033      	b.n	8002910 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2224      	movs	r2, #36	@ 0x24
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4313      	orrs	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0201 	orr.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2220      	movs	r2, #32
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e000      	b.n	8002910 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800290e:	2302      	movs	r3, #2
  }
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af02      	add	r7, sp, #8
 8002922:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e101      	b.n	8002b32 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff f8ce 	bl	8001ae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2203      	movs	r2, #3
 800294c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f002 feee 	bl	800573c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7c1a      	ldrb	r2, [r3, #16]
 8002968:	f88d 2000 	strb.w	r2, [sp]
 800296c:	3304      	adds	r3, #4
 800296e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002970:	f002 feb7 	bl	80056e2 <USB_CoreInit>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2202      	movs	r2, #2
 800297e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0d5      	b.n	8002b32 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fee6 	bl	800575e <USB_SetCurrentMode>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0c6      	b.n	8002b32 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a4:	2300      	movs	r3, #0
 80029a6:	73fb      	strb	r3, [r7, #15]
 80029a8:	e04a      	b.n	8002a40 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029aa:	7bfa      	ldrb	r2, [r7, #15]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3315      	adds	r3, #21
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3314      	adds	r3, #20
 80029ce:	7bfa      	ldrb	r2, [r7, #15]
 80029d0:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	b298      	uxth	r0, r3
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	332e      	adds	r3, #46	@ 0x2e
 80029e6:	4602      	mov	r2, r0
 80029e8:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	3318      	adds	r3, #24
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	331c      	adds	r3, #28
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3320      	adds	r3, #32
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	3324      	adds	r3, #36	@ 0x24
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3a:	7bfb      	ldrb	r3, [r7, #15]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	791b      	ldrb	r3, [r3, #4]
 8002a44:	7bfa      	ldrb	r2, [r7, #15]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d3af      	bcc.n	80029aa <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	e044      	b.n	8002ada <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	4413      	add	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a66:	7bfa      	ldrb	r2, [r7, #15]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4413      	add	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a8e:	2200      	movs	r2, #0
 8002a90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002abe:	7bfa      	ldrb	r2, [r7, #15]
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	791b      	ldrb	r3, [r3, #4]
 8002ade:	7bfa      	ldrb	r2, [r7, #15]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d3b5      	bcc.n	8002a50 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	7c1a      	ldrb	r2, [r3, #16]
 8002aec:	f88d 2000 	strb.w	r2, [sp]
 8002af0:	3304      	adds	r3, #4
 8002af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af4:	f002 fe80 	bl	80057f8 <USB_DevInit>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e013      	b.n	8002b32 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7b1b      	ldrb	r3, [r3, #12]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d102      	bne.n	8002b26 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f80a 	bl	8002b3a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 f825 	bl	8005b7a <USB_DevDisconnect>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6c:	f043 0303 	orr.w	r3, r3, #3
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a04      	ldr	r2, [pc, #16]	@ (8002ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40007000 	.word	0x40007000

08002ba4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ba8:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40007000 	.word	0x40007000

08002bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bce:	d130      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bd0:	4b23      	ldr	r3, [pc, #140]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bdc:	d038      	beq.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002be6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bee:	4b1d      	ldr	r3, [pc, #116]	@ (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2232      	movs	r2, #50	@ 0x32
 8002bf4:	fb02 f303 	mul.w	r3, r2, r3
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	0c9b      	lsrs	r3, r3, #18
 8002c00:	3301      	adds	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c04:	e002      	b.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c18:	d102      	bne.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f2      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2c:	d110      	bne.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e00f      	b.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3e:	d007      	beq.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c40:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c48:	4a05      	ldr	r2, [pc, #20]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40007000 	.word	0x40007000
 8002c64:	20000000 	.word	0x20000000
 8002c68:	431bde83 	.word	0x431bde83

08002c6c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c7a:	6053      	str	r3, [r2, #4]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40007000 	.word	0x40007000

08002c8c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af02      	add	r7, sp, #8
 8002c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff f944 	bl	8001f20 <HAL_GetTick>
 8002c98:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e063      	b.n	8002d6c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7fe fde7 	bl	800188c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002cbe:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f858 	bl	8002d78 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	021a      	lsls	r2, r3, #8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	2120      	movs	r1, #32
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f850 	bl	8002d94 <QSPI_WaitFlagStateUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002cf8:	7afb      	ldrb	r3, [r7, #11]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d131      	bne.n	8002d62 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d08:	f023 0310 	bic.w	r3, r3, #16
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6852      	ldr	r2, [r2, #4]
 8002d10:	0611      	lsls	r1, r2, #24
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68d2      	ldr	r2, [r2, #12]
 8002d16:	4311      	orrs	r1, r2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <HAL_QSPI_Init+0xe8>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6912      	ldr	r2, [r2, #16]
 8002d2e:	0411      	lsls	r1, r2, #16
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6952      	ldr	r2, [r2, #20]
 8002d34:	4311      	orrs	r1, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6992      	ldr	r2, [r2, #24]
 8002d3a:	4311      	orrs	r1, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	430b      	orrs	r3, r1
 8002d42:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8002d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	ffe0f8fe 	.word	0xffe0f8fe

08002d78 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	4613      	mov	r3, r2
 8002da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002da4:	e01a      	b.n	8002ddc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dac:	d016      	beq.n	8002ddc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dae:	f7ff f8b7 	bl	8001f20 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d302      	bcc.n	8002dc4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e00e      	b.n	8002dfa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	bf14      	ite	ne
 8002dea:	2301      	movne	r3, #1
 8002dec:	2300      	moveq	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d1d6      	bne.n	8002da6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e3ca      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e16:	4b97      	ldr	r3, [pc, #604]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e20:	4b94      	ldr	r3, [pc, #592]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80e4 	beq.w	8003000 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d007      	beq.n	8002e4e <HAL_RCC_OscConfig+0x4a>
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2b0c      	cmp	r3, #12
 8002e42:	f040 808b 	bne.w	8002f5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	f040 8087 	bne.w	8002f5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e4e:	4b89      	ldr	r3, [pc, #548]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_RCC_OscConfig+0x62>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e3a2      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1a      	ldr	r2, [r3, #32]
 8002e6a:	4b82      	ldr	r3, [pc, #520]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d004      	beq.n	8002e80 <HAL_RCC_OscConfig+0x7c>
 8002e76:	4b7f      	ldr	r3, [pc, #508]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e7e:	e005      	b.n	8002e8c <HAL_RCC_OscConfig+0x88>
 8002e80:	4b7c      	ldr	r3, [pc, #496]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d223      	bcs.n	8002ed8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fd55 	bl	8003944 <RCC_SetFlashLatencyFromMSIRange>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e383      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea4:	4b73      	ldr	r3, [pc, #460]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a72      	ldr	r2, [pc, #456]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	f043 0308 	orr.w	r3, r3, #8
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b70      	ldr	r3, [pc, #448]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	496d      	ldr	r1, [pc, #436]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec2:	4b6c      	ldr	r3, [pc, #432]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	4968      	ldr	r1, [pc, #416]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
 8002ed6:	e025      	b.n	8002f24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ed8:	4b66      	ldr	r3, [pc, #408]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a65      	ldr	r2, [pc, #404]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ede:	f043 0308 	orr.w	r3, r3, #8
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	4b63      	ldr	r3, [pc, #396]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4960      	ldr	r1, [pc, #384]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	495b      	ldr	r1, [pc, #364]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fd15 	bl	8003944 <RCC_SetFlashLatencyFromMSIRange>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e343      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f24:	f000 fc4a 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b52      	ldr	r3, [pc, #328]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	091b      	lsrs	r3, r3, #4
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	4950      	ldr	r1, [pc, #320]	@ (8003078 <HAL_RCC_OscConfig+0x274>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f40:	4a4e      	ldr	r2, [pc, #312]	@ (800307c <HAL_RCC_OscConfig+0x278>)
 8002f42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f44:	4b4e      	ldr	r3, [pc, #312]	@ (8003080 <HAL_RCC_OscConfig+0x27c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe ff99 	bl	8001e80 <HAL_InitTick>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d052      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	e327      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d032      	beq.n	8002fca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f64:	4b43      	ldr	r3, [pc, #268]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a42      	ldr	r2, [pc, #264]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f70:	f7fe ffd6 	bl	8001f20 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f78:	f7fe ffd2 	bl	8001f20 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e310      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f96:	4b37      	ldr	r3, [pc, #220]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a36      	ldr	r2, [pc, #216]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	f043 0308 	orr.w	r3, r3, #8
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4931      	ldr	r1, [pc, #196]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	492c      	ldr	r1, [pc, #176]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
 8002fc8:	e01a      	b.n	8003000 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fca:	4b2a      	ldr	r3, [pc, #168]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a29      	ldr	r2, [pc, #164]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fd6:	f7fe ffa3 	bl	8001f20 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fde:	f7fe ff9f 	bl	8001f20 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e2dd      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff0:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x1da>
 8002ffc:	e000      	b.n	8003000 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ffe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d074      	beq.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	2b08      	cmp	r3, #8
 8003010:	d005      	beq.n	800301e <HAL_RCC_OscConfig+0x21a>
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	2b0c      	cmp	r3, #12
 8003016:	d10e      	bne.n	8003036 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d10b      	bne.n	8003036 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301e:	4b15      	ldr	r3, [pc, #84]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d064      	beq.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d160      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e2ba      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800303e:	d106      	bne.n	800304e <HAL_RCC_OscConfig+0x24a>
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0b      	ldr	r2, [pc, #44]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	e026      	b.n	800309c <HAL_RCC_OscConfig+0x298>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003056:	d115      	bne.n	8003084 <HAL_RCC_OscConfig+0x280>
 8003058:	4b06      	ldr	r3, [pc, #24]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a05      	ldr	r2, [pc, #20]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 800305e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b03      	ldr	r3, [pc, #12]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a02      	ldr	r2, [pc, #8]	@ (8003074 <HAL_RCC_OscConfig+0x270>)
 800306a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	e014      	b.n	800309c <HAL_RCC_OscConfig+0x298>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	08005cfc 	.word	0x08005cfc
 800307c:	20000000 	.word	0x20000000
 8003080:	20000004 	.word	0x20000004
 8003084:	4ba0      	ldr	r3, [pc, #640]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a9f      	ldr	r2, [pc, #636]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800308a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b9d      	ldr	r3, [pc, #628]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a9c      	ldr	r2, [pc, #624]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800309a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d013      	beq.n	80030cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe ff3c 	bl	8001f20 <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe ff38 	bl	8001f20 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	@ 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e276      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030be:	4b92      	ldr	r3, [pc, #584]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x2a8>
 80030ca:	e014      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe ff28 	bl	8001f20 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d4:	f7fe ff24 	bl	8001f20 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b64      	cmp	r3, #100	@ 0x64
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e262      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	4b88      	ldr	r3, [pc, #544]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x2d0>
 80030f2:	e000      	b.n	80030f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d060      	beq.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d005      	beq.n	8003114 <HAL_RCC_OscConfig+0x310>
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d119      	bne.n	8003142 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d116      	bne.n	8003142 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003114:	4b7c      	ldr	r3, [pc, #496]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_OscConfig+0x328>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e23f      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b76      	ldr	r3, [pc, #472]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	4973      	ldr	r1, [pc, #460]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003140:	e040      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d023      	beq.n	8003192 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800314a:	4b6f      	ldr	r3, [pc, #444]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6e      	ldr	r2, [pc, #440]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7fe fee3 	bl	8001f20 <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315e:	f7fe fedf 	bl	8001f20 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e21d      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	4b65      	ldr	r3, [pc, #404]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b62      	ldr	r3, [pc, #392]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	061b      	lsls	r3, r3, #24
 800318a:	495f      	ldr	r1, [pc, #380]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800318c:	4313      	orrs	r3, r2
 800318e:	604b      	str	r3, [r1, #4]
 8003190:	e018      	b.n	80031c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b5d      	ldr	r3, [pc, #372]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a5c      	ldr	r2, [pc, #368]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800319c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe febf 	bl	8001f20 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a6:	f7fe febb 	bl	8001f20 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1f9      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b8:	4b53      	ldr	r3, [pc, #332]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1f0      	bne.n	80031a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03c      	beq.n	800324a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d01c      	beq.n	8003212 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80031da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031de:	4a4a      	ldr	r2, [pc, #296]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80031e0:	f043 0301 	orr.w	r3, r3, #1
 80031e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe fe9a 	bl	8001f20 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe fe96 	bl	8001f20 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1d4      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003202:	4b41      	ldr	r3, [pc, #260]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003204:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <HAL_RCC_OscConfig+0x3ec>
 8003210:	e01b      	b.n	800324a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003212:	4b3d      	ldr	r3, [pc, #244]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003214:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003218:	4a3b      	ldr	r2, [pc, #236]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fe fe7d 	bl	8001f20 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800322a:	f7fe fe79 	bl	8001f20 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e1b7      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800323c:	4b32      	ldr	r3, [pc, #200]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800323e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1ef      	bne.n	800322a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0304 	and.w	r3, r3, #4
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80a6 	beq.w	80033a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003258:	2300      	movs	r3, #0
 800325a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800325c:	4b2a      	ldr	r3, [pc, #168]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800325e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003260:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10d      	bne.n	8003284 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326c:	4a26      	ldr	r2, [pc, #152]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003272:	6593      	str	r3, [r2, #88]	@ 0x58
 8003274:	4b24      	ldr	r3, [pc, #144]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003278:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003280:	2301      	movs	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	4b21      	ldr	r3, [pc, #132]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d118      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003290:	4b1e      	ldr	r3, [pc, #120]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a1d      	ldr	r2, [pc, #116]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 8003296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329c:	f7fe fe40 	bl	8001f20 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a4:	f7fe fe3c 	bl	8001f20 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e17a      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <HAL_RCC_OscConfig+0x508>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <HAL_RCC_OscConfig+0x4d8>
 80032ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032da:	e029      	b.n	8003330 <HAL_RCC_OscConfig+0x52c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	2b05      	cmp	r3, #5
 80032e2:	d115      	bne.n	8003310 <HAL_RCC_OscConfig+0x50c>
 80032e4:	4b08      	ldr	r3, [pc, #32]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ea:	4a07      	ldr	r2, [pc, #28]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032ec:	f043 0304 	orr.w	r3, r3, #4
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032f4:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fa:	4a03      	ldr	r2, [pc, #12]	@ (8003308 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003304:	e014      	b.n	8003330 <HAL_RCC_OscConfig+0x52c>
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000
 800330c:	40007000 	.word	0x40007000
 8003310:	4b9c      	ldr	r3, [pc, #624]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	4a9b      	ldr	r2, [pc, #620]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003320:	4b98      	ldr	r3, [pc, #608]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003326:	4a97      	ldr	r2, [pc, #604]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003328:	f023 0304 	bic.w	r3, r3, #4
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d016      	beq.n	8003366 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe fdf2 	bl	8001f20 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe fdee 	bl	8001f20 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e12a      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003356:	4b8b      	ldr	r3, [pc, #556]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ed      	beq.n	8003340 <HAL_RCC_OscConfig+0x53c>
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe fddb 	bl	8001f20 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fdd7 	bl	8001f20 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e113      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003384:	4b7f      	ldr	r3, [pc, #508]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1ed      	bne.n	800336e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003392:	7ffb      	ldrb	r3, [r7, #31]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d105      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003398:	4b7a      	ldr	r3, [pc, #488]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	4a79      	ldr	r2, [pc, #484]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80fe 	beq.w	80035aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	f040 80d0 	bne.w	8003558 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033b8:	4b72      	ldr	r3, [pc, #456]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 0203 	and.w	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d130      	bne.n	800342e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	3b01      	subs	r3, #1
 80033d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d127      	bne.n	800342e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d11f      	bne.n	800342e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033f8:	2a07      	cmp	r2, #7
 80033fa:	bf14      	ite	ne
 80033fc:	2201      	movne	r2, #1
 80033fe:	2200      	moveq	r2, #0
 8003400:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003402:	4293      	cmp	r3, r2
 8003404:	d113      	bne.n	800342e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	085b      	lsrs	r3, r3, #1
 8003412:	3b01      	subs	r3, #1
 8003414:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d109      	bne.n	800342e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	085b      	lsrs	r3, r3, #1
 8003426:	3b01      	subs	r3, #1
 8003428:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d06e      	beq.n	800350c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2b0c      	cmp	r3, #12
 8003432:	d069      	beq.n	8003508 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003434:	4b53      	ldr	r3, [pc, #332]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d105      	bne.n	800344c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003440:	4b50      	ldr	r3, [pc, #320]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0ad      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003450:	4b4c      	ldr	r3, [pc, #304]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a4b      	ldr	r2, [pc, #300]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800345a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800345c:	f7fe fd60 	bl	8001f20 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe fd5c 	bl	8001f20 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e09a      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003476:	4b43      	ldr	r3, [pc, #268]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003482:	4b40      	ldr	r3, [pc, #256]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	4b40      	ldr	r3, [pc, #256]	@ (8003588 <HAL_RCC_OscConfig+0x784>)
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003492:	3a01      	subs	r2, #1
 8003494:	0112      	lsls	r2, r2, #4
 8003496:	4311      	orrs	r1, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800349c:	0212      	lsls	r2, r2, #8
 800349e:	4311      	orrs	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034a4:	0852      	lsrs	r2, r2, #1
 80034a6:	3a01      	subs	r2, #1
 80034a8:	0552      	lsls	r2, r2, #21
 80034aa:	4311      	orrs	r1, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80034b0:	0852      	lsrs	r2, r2, #1
 80034b2:	3a01      	subs	r2, #1
 80034b4:	0652      	lsls	r2, r2, #25
 80034b6:	4311      	orrs	r1, r2
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034bc:	0912      	lsrs	r2, r2, #4
 80034be:	0452      	lsls	r2, r2, #17
 80034c0:	430a      	orrs	r2, r1
 80034c2:	4930      	ldr	r1, [pc, #192]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 80034ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 80034da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e0:	f7fe fd1e 	bl	8001f20 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe fd1a 	bl	8001f20 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e058      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	4b22      	ldr	r3, [pc, #136]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003506:	e050      	b.n	80035aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e04f      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350c:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d148      	bne.n	80035aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003518:	4b1a      	ldr	r3, [pc, #104]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a19      	ldr	r2, [pc, #100]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 800351e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003522:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003524:	4b17      	ldr	r3, [pc, #92]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4a16      	ldr	r2, [pc, #88]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 800352a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800352e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003530:	f7fe fcf6 	bl	8001f20 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003538:	f7fe fcf2 	bl	8001f20 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e030      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354a:	4b0e      	ldr	r3, [pc, #56]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x734>
 8003556:	e028      	b.n	80035aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d023      	beq.n	80035a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a08      	ldr	r2, [pc, #32]	@ (8003584 <HAL_RCC_OscConfig+0x780>)
 8003564:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fe fcd9 	bl	8001f20 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003570:	e00c      	b.n	800358c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003572:	f7fe fcd5 	bl	8001f20 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d905      	bls.n	800358c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e013      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
 8003584:	40021000 	.word	0x40021000
 8003588:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358c:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <HAL_RCC_OscConfig+0x7b0>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ec      	bne.n	8003572 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003598:	4b06      	ldr	r3, [pc, #24]	@ (80035b4 <HAL_RCC_OscConfig+0x7b0>)
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	4905      	ldr	r1, [pc, #20]	@ (80035b4 <HAL_RCC_OscConfig+0x7b0>)
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_RCC_OscConfig+0x7b4>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	60cb      	str	r3, [r1, #12]
 80035a4:	e001      	b.n	80035aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	feeefffc 	.word	0xfeeefffc

080035bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0e7      	b.n	80037a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d0:	4b75      	ldr	r3, [pc, #468]	@ (80037a8 <HAL_RCC_ClockConfig+0x1ec>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d910      	bls.n	8003600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b72      	ldr	r3, [pc, #456]	@ (80037a8 <HAL_RCC_ClockConfig+0x1ec>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 0207 	bic.w	r2, r3, #7
 80035e6:	4970      	ldr	r1, [pc, #448]	@ (80037a8 <HAL_RCC_ClockConfig+0x1ec>)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ee:	4b6e      	ldr	r3, [pc, #440]	@ (80037a8 <HAL_RCC_ClockConfig+0x1ec>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d001      	beq.n	8003600 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0cf      	b.n	80037a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d010      	beq.n	800362e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	4b66      	ldr	r3, [pc, #408]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003618:	429a      	cmp	r2, r3
 800361a:	d908      	bls.n	800362e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361c:	4b63      	ldr	r3, [pc, #396]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4960      	ldr	r1, [pc, #384]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d04c      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003642:	4b5a      	ldr	r3, [pc, #360]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d121      	bne.n	8003692 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0a6      	b.n	80037a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d107      	bne.n	800366a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800365a:	4b54      	ldr	r3, [pc, #336]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d115      	bne.n	8003692 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e09a      	b.n	80037a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d107      	bne.n	8003682 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003672:	4b4e      	ldr	r3, [pc, #312]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e08e      	b.n	80037a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003682:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e086      	b.n	80037a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003692:	4b46      	ldr	r3, [pc, #280]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f023 0203 	bic.w	r2, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4943      	ldr	r1, [pc, #268]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a4:	f7fe fc3c 	bl	8001f20 <HAL_GetTick>
 80036a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	e00a      	b.n	80036c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ac:	f7fe fc38 	bl	8001f20 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e06e      	b.n	80037a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c2:	4b3a      	ldr	r3, [pc, #232]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 020c 	and.w	r2, r3, #12
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d1eb      	bne.n	80036ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d010      	beq.n	8003702 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	4b31      	ldr	r3, [pc, #196]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d208      	bcs.n	8003702 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f0:	4b2e      	ldr	r3, [pc, #184]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	492b      	ldr	r1, [pc, #172]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003702:	4b29      	ldr	r3, [pc, #164]	@ (80037a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0307 	and.w	r3, r3, #7
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d210      	bcs.n	8003732 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003710:	4b25      	ldr	r3, [pc, #148]	@ (80037a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f023 0207 	bic.w	r2, r3, #7
 8003718:	4923      	ldr	r1, [pc, #140]	@ (80037a8 <HAL_RCC_ClockConfig+0x1ec>)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003720:	4b21      	ldr	r3, [pc, #132]	@ (80037a8 <HAL_RCC_ClockConfig+0x1ec>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d001      	beq.n	8003732 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e036      	b.n	80037a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d008      	beq.n	8003750 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800373e:	4b1b      	ldr	r3, [pc, #108]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	4918      	ldr	r1, [pc, #96]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 800374c:	4313      	orrs	r3, r2
 800374e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d009      	beq.n	8003770 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800375c:	4b13      	ldr	r3, [pc, #76]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4910      	ldr	r1, [pc, #64]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 800376c:	4313      	orrs	r3, r2
 800376e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003770:	f000 f824 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b0d      	ldr	r3, [pc, #52]	@ (80037ac <HAL_RCC_ClockConfig+0x1f0>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	490b      	ldr	r1, [pc, #44]	@ (80037b0 <HAL_RCC_ClockConfig+0x1f4>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
 800378c:	4a09      	ldr	r2, [pc, #36]	@ (80037b4 <HAL_RCC_ClockConfig+0x1f8>)
 800378e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003790:	4b09      	ldr	r3, [pc, #36]	@ (80037b8 <HAL_RCC_ClockConfig+0x1fc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fe fb73 	bl	8001e80 <HAL_InitTick>
 800379a:	4603      	mov	r3, r0
 800379c:	72fb      	strb	r3, [r7, #11]

  return status;
 800379e:	7afb      	ldrb	r3, [r7, #11]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40022000 	.word	0x40022000
 80037ac:	40021000 	.word	0x40021000
 80037b0:	08005cfc 	.word	0x08005cfc
 80037b4:	20000000 	.word	0x20000000
 80037b8:	20000004 	.word	0x20000004

080037bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	@ 0x24
 80037c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	2300      	movs	r3, #0
 80037c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ca:	4b3e      	ldr	r3, [pc, #248]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d4:	4b3b      	ldr	r3, [pc, #236]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_GetSysClockFreq+0x34>
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	2b0c      	cmp	r3, #12
 80037e8:	d121      	bne.n	800382e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d11e      	bne.n	800382e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037f0:	4b34      	ldr	r3, [pc, #208]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d107      	bne.n	800380c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037fc:	4b31      	ldr	r3, [pc, #196]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80037fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 030f 	and.w	r3, r3, #15
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e005      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800380c:	4b2d      	ldr	r3, [pc, #180]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003818:	4a2b      	ldr	r2, [pc, #172]	@ (80038c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003820:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d102      	bne.n	800383a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003834:	4b25      	ldr	r3, [pc, #148]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	e004      	b.n	8003844 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b08      	cmp	r3, #8
 800383e:	d101      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003840:	4b23      	ldr	r3, [pc, #140]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003842:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b0c      	cmp	r3, #12
 8003848:	d134      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800384a:	4b1e      	ldr	r3, [pc, #120]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d003      	beq.n	8003862 <HAL_RCC_GetSysClockFreq+0xa6>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d003      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0xac>
 8003860:	e005      	b.n	800386e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003862:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003864:	617b      	str	r3, [r7, #20]
      break;
 8003866:	e005      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003868:	4b19      	ldr	r3, [pc, #100]	@ (80038d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800386a:	617b      	str	r3, [r7, #20]
      break;
 800386c:	e002      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	617b      	str	r3, [r7, #20]
      break;
 8003872:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003874:	4b13      	ldr	r3, [pc, #76]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	3301      	adds	r3, #1
 8003880:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003882:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	fb03 f202 	mul.w	r2, r3, r2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	fbb2 f3f3 	udiv	r3, r2, r3
 8003898:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800389a:	4b0a      	ldr	r3, [pc, #40]	@ (80038c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	0e5b      	lsrs	r3, r3, #25
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	3301      	adds	r3, #1
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038b4:	69bb      	ldr	r3, [r7, #24]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3724      	adds	r7, #36	@ 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
 80038c8:	08005d14 	.word	0x08005d14
 80038cc:	00f42400 	.word	0x00f42400
 80038d0:	007a1200 	.word	0x007a1200

080038d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038d8:	4b03      	ldr	r3, [pc, #12]	@ (80038e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	20000000 	.word	0x20000000

080038ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038f0:	f7ff fff0 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 80038f4:	4602      	mov	r2, r0
 80038f6:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	4904      	ldr	r1, [pc, #16]	@ (8003914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003902:	5ccb      	ldrb	r3, [r1, r3]
 8003904:	f003 031f 	and.w	r3, r3, #31
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	08005d0c 	.word	0x08005d0c

08003918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800391c:	f7ff ffda 	bl	80038d4 <HAL_RCC_GetHCLKFreq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b06      	ldr	r3, [pc, #24]	@ (800393c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	0adb      	lsrs	r3, r3, #11
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	4904      	ldr	r1, [pc, #16]	@ (8003940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	f003 031f 	and.w	r3, r3, #31
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003938:	4618      	mov	r0, r3
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000
 8003940:	08005d0c 	.word	0x08005d0c

08003944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800394c:	2300      	movs	r3, #0
 800394e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003950:	4b2a      	ldr	r3, [pc, #168]	@ (80039fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800395c:	f7ff f922 	bl	8002ba4 <HAL_PWREx_GetVoltageRange>
 8003960:	6178      	str	r0, [r7, #20]
 8003962:	e014      	b.n	800398e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003964:	4b25      	ldr	r3, [pc, #148]	@ (80039fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003968:	4a24      	ldr	r2, [pc, #144]	@ (80039fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800396e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003970:	4b22      	ldr	r3, [pc, #136]	@ (80039fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800397c:	f7ff f912 	bl	8002ba4 <HAL_PWREx_GetVoltageRange>
 8003980:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003982:	4b1e      	ldr	r3, [pc, #120]	@ (80039fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003986:	4a1d      	ldr	r2, [pc, #116]	@ (80039fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800398c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003994:	d10b      	bne.n	80039ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b80      	cmp	r3, #128	@ 0x80
 800399a:	d919      	bls.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2ba0      	cmp	r3, #160	@ 0xa0
 80039a0:	d902      	bls.n	80039a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039a2:	2302      	movs	r3, #2
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e013      	b.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039a8:	2301      	movs	r3, #1
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	e010      	b.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b80      	cmp	r3, #128	@ 0x80
 80039b2:	d902      	bls.n	80039ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039b4:	2303      	movs	r3, #3
 80039b6:	613b      	str	r3, [r7, #16]
 80039b8:	e00a      	b.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b80      	cmp	r3, #128	@ 0x80
 80039be:	d102      	bne.n	80039c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039c0:	2302      	movs	r3, #2
 80039c2:	613b      	str	r3, [r7, #16]
 80039c4:	e004      	b.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b70      	cmp	r3, #112	@ 0x70
 80039ca:	d101      	bne.n	80039d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039cc:	2301      	movs	r3, #1
 80039ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 0207 	bic.w	r2, r3, #7
 80039d8:	4909      	ldr	r1, [pc, #36]	@ (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039e0:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d001      	beq.n	80039f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40022000 	.word	0x40022000

08003a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a10:	2300      	movs	r3, #0
 8003a12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d041      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a28:	d02a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a2e:	d824      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a34:	d008      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a3a:	d81e      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a44:	d010      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a46:	e018      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a48:	4b86      	ldr	r3, [pc, #536]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4a85      	ldr	r2, [pc, #532]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a54:	e015      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	3304      	adds	r3, #4
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 facb 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a66:	e00c      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3320      	adds	r3, #32
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fbb6 	bl	80041e0 <RCCEx_PLLSAI2_Config>
 8003a74:	4603      	mov	r3, r0
 8003a76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a78:	e003      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	74fb      	strb	r3, [r7, #19]
      break;
 8003a7e:	e000      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10b      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a88:	4b76      	ldr	r3, [pc, #472]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a96:	4973      	ldr	r1, [pc, #460]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a9e:	e001      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d041      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ab4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ab8:	d02a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003aba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003abe:	d824      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ac4:	d008      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ac6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aca:	d81e      	bhi.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ad4:	d010      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ad6:	e018      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ad8:	4b62      	ldr	r3, [pc, #392]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	4a61      	ldr	r2, [pc, #388]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ade:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ae2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ae4:	e015      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fa83 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003af6:	e00c      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3320      	adds	r3, #32
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fb6e 	bl	80041e0 <RCCEx_PLLSAI2_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b08:	e003      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b12:	7cfb      	ldrb	r3, [r7, #19]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b18:	4b52      	ldr	r3, [pc, #328]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b26:	494f      	ldr	r1, [pc, #316]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b2e:	e001      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b30:	7cfb      	ldrb	r3, [r7, #19]
 8003b32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80a0 	beq.w	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b42:	2300      	movs	r3, #0
 8003b44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b46:	4b47      	ldr	r3, [pc, #284]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00d      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b5c:	4b41      	ldr	r3, [pc, #260]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b60:	4a40      	ldr	r2, [pc, #256]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b66:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b68:	4b3e      	ldr	r3, [pc, #248]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b74:	2301      	movs	r3, #1
 8003b76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b78:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b84:	f7fe f9cc 	bl	8001f20 <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b8a:	e009      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b8c:	f7fe f9c8 	bl	8001f20 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d902      	bls.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	74fb      	strb	r3, [r7, #19]
        break;
 8003b9e:	e005      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ba0:	4b31      	ldr	r3, [pc, #196]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ef      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d15c      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bbc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01f      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d019      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bd0:	4b24      	ldr	r3, [pc, #144]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bdc:	4b21      	ldr	r3, [pc, #132]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be2:	4a20      	ldr	r2, [pc, #128]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bec:	4b1d      	ldr	r3, [pc, #116]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf2:	4a1c      	ldr	r2, [pc, #112]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bfc:	4a19      	ldr	r2, [pc, #100]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fe f987 	bl	8001f20 <HAL_GetTick>
 8003c12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c14:	e00b      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c16:	f7fe f983 	bl	8001f20 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d902      	bls.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003c2c:	e006      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ec      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c42:	4b08      	ldr	r3, [pc, #32]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c52:	4904      	ldr	r1, [pc, #16]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c5a:	e009      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
 8003c60:	e006      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	7cfb      	ldrb	r3, [r7, #19]
 8003c6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c70:	7c7b      	ldrb	r3, [r7, #17]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d105      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c76:	4b9e      	ldr	r3, [pc, #632]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7a:	4a9d      	ldr	r2, [pc, #628]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c8e:	4b98      	ldr	r3, [pc, #608]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c94:	f023 0203 	bic.w	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c9c:	4994      	ldr	r1, [pc, #592]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cb0:	4b8f      	ldr	r3, [pc, #572]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb6:	f023 020c 	bic.w	r2, r3, #12
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbe:	498c      	ldr	r1, [pc, #560]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cd2:	4b87      	ldr	r3, [pc, #540]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce0:	4983      	ldr	r1, [pc, #524]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d02:	497b      	ldr	r1, [pc, #492]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d16:	4b76      	ldr	r3, [pc, #472]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d24:	4972      	ldr	r1, [pc, #456]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d38:	4b6d      	ldr	r3, [pc, #436]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d46:	496a      	ldr	r1, [pc, #424]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d5a:	4b65      	ldr	r3, [pc, #404]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d68:	4961      	ldr	r1, [pc, #388]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d7c:	4b5c      	ldr	r3, [pc, #368]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d8a:	4959      	ldr	r1, [pc, #356]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d9e:	4b54      	ldr	r3, [pc, #336]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dac:	4950      	ldr	r1, [pc, #320]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dce:	4948      	ldr	r1, [pc, #288]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003de2:	4b43      	ldr	r3, [pc, #268]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df0:	493f      	ldr	r1, [pc, #252]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d028      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e04:	4b3a      	ldr	r3, [pc, #232]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e12:	4937      	ldr	r1, [pc, #220]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e22:	d106      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e24:	4b32      	ldr	r3, [pc, #200]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a31      	ldr	r2, [pc, #196]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e2e:	60d3      	str	r3, [r2, #12]
 8003e30:	e011      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e3a:	d10c      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	2101      	movs	r1, #1
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f8d8 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d028      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e62:	4b23      	ldr	r3, [pc, #140]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e70:	491f      	ldr	r1, [pc, #124]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e80:	d106      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e82:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4a1a      	ldr	r2, [pc, #104]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e8c:	60d3      	str	r3, [r2, #12]
 8003e8e:	e011      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e98:	d10c      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 f8a9 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d02b      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ece:	4908      	ldr	r1, [pc, #32]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ede:	d109      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee0:	4b03      	ldr	r3, [pc, #12]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a02      	ldr	r2, [pc, #8]	@ (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eea:	60d3      	str	r3, [r2, #12]
 8003eec:	e014      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3304      	adds	r3, #4
 8003f02:	2101      	movs	r1, #1
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 f877 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f0e:	7cfb      	ldrb	r3, [r7, #19]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f14:	7cfb      	ldrb	r3, [r7, #19]
 8003f16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d02f      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f24:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f32:	4928      	ldr	r1, [pc, #160]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f42:	d10d      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	2102      	movs	r1, #2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 f854 	bl	8003ff8 <RCCEx_PLLSAI1_Config>
 8003f50:	4603      	mov	r3, r0
 8003f52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f54:	7cfb      	ldrb	r3, [r7, #19]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d014      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f5a:	7cfb      	ldrb	r3, [r7, #19]
 8003f5c:	74bb      	strb	r3, [r7, #18]
 8003f5e:	e011      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3320      	adds	r3, #32
 8003f6e:	2102      	movs	r1, #2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 f935 	bl	80041e0 <RCCEx_PLLSAI2_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00a      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f90:	4b10      	ldr	r3, [pc, #64]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f96:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f9e:	490d      	ldr	r1, [pc, #52]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00b      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fb2:	4b08      	ldr	r3, [pc, #32]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fc2:	4904      	ldr	r1, [pc, #16]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fca:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40021000 	.word	0x40021000

08003fd8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003fdc:	4b05      	ldr	r3, [pc, #20]	@ (8003ff4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a04      	ldr	r2, [pc, #16]	@ (8003ff4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003fe2:	f043 0304 	orr.w	r3, r3, #4
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004006:	4b75      	ldr	r3, [pc, #468]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d018      	beq.n	8004044 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004012:	4b72      	ldr	r3, [pc, #456]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0203 	and.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d10d      	bne.n	800403e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
       ||
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800402a:	4b6c      	ldr	r3, [pc, #432]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	091b      	lsrs	r3, r3, #4
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
       ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d047      	beq.n	80040ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	e044      	b.n	80040ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b03      	cmp	r3, #3
 800404a:	d018      	beq.n	800407e <RCCEx_PLLSAI1_Config+0x86>
 800404c:	2b03      	cmp	r3, #3
 800404e:	d825      	bhi.n	800409c <RCCEx_PLLSAI1_Config+0xa4>
 8004050:	2b01      	cmp	r3, #1
 8004052:	d002      	beq.n	800405a <RCCEx_PLLSAI1_Config+0x62>
 8004054:	2b02      	cmp	r3, #2
 8004056:	d009      	beq.n	800406c <RCCEx_PLLSAI1_Config+0x74>
 8004058:	e020      	b.n	800409c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800405a:	4b60      	ldr	r3, [pc, #384]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d11d      	bne.n	80040a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800406a:	e01a      	b.n	80040a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800406c:	4b5b      	ldr	r3, [pc, #364]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d116      	bne.n	80040a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800407c:	e013      	b.n	80040a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800407e:	4b57      	ldr	r3, [pc, #348]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10f      	bne.n	80040aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800408a:	4b54      	ldr	r3, [pc, #336]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d109      	bne.n	80040aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800409a:	e006      	b.n	80040aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	73fb      	strb	r3, [r7, #15]
      break;
 80040a0:	e004      	b.n	80040ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040a2:	bf00      	nop
 80040a4:	e002      	b.n	80040ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040a6:	bf00      	nop
 80040a8:	e000      	b.n	80040ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d10d      	bne.n	80040ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040b2:	4b4a      	ldr	r3, [pc, #296]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	430b      	orrs	r3, r1
 80040c8:	4944      	ldr	r1, [pc, #272]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040ce:	7bfb      	ldrb	r3, [r7, #15]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d17d      	bne.n	80041d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040d4:	4b41      	ldr	r3, [pc, #260]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a40      	ldr	r2, [pc, #256]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80040da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80040de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e0:	f7fd ff1e 	bl	8001f20 <HAL_GetTick>
 80040e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040e6:	e009      	b.n	80040fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e8:	f7fd ff1a 	bl	8001f20 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d902      	bls.n	80040fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	73fb      	strb	r3, [r7, #15]
        break;
 80040fa:	e005      	b.n	8004108 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040fc:	4b37      	ldr	r3, [pc, #220]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1ef      	bne.n	80040e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d160      	bne.n	80041d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d111      	bne.n	8004138 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004114:	4b31      	ldr	r3, [pc, #196]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800411c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	6892      	ldr	r2, [r2, #8]
 8004124:	0211      	lsls	r1, r2, #8
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68d2      	ldr	r2, [r2, #12]
 800412a:	0912      	lsrs	r2, r2, #4
 800412c:	0452      	lsls	r2, r2, #17
 800412e:	430a      	orrs	r2, r1
 8004130:	492a      	ldr	r1, [pc, #168]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004132:	4313      	orrs	r3, r2
 8004134:	610b      	str	r3, [r1, #16]
 8004136:	e027      	b.n	8004188 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d112      	bne.n	8004164 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800413e:	4b27      	ldr	r3, [pc, #156]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004146:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6892      	ldr	r2, [r2, #8]
 800414e:	0211      	lsls	r1, r2, #8
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6912      	ldr	r2, [r2, #16]
 8004154:	0852      	lsrs	r2, r2, #1
 8004156:	3a01      	subs	r2, #1
 8004158:	0552      	lsls	r2, r2, #21
 800415a:	430a      	orrs	r2, r1
 800415c:	491f      	ldr	r1, [pc, #124]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800415e:	4313      	orrs	r3, r2
 8004160:	610b      	str	r3, [r1, #16]
 8004162:	e011      	b.n	8004188 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004164:	4b1d      	ldr	r3, [pc, #116]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800416c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6892      	ldr	r2, [r2, #8]
 8004174:	0211      	lsls	r1, r2, #8
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6952      	ldr	r2, [r2, #20]
 800417a:	0852      	lsrs	r2, r2, #1
 800417c:	3a01      	subs	r2, #1
 800417e:	0652      	lsls	r2, r2, #25
 8004180:	430a      	orrs	r2, r1
 8004182:	4916      	ldr	r1, [pc, #88]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004184:	4313      	orrs	r3, r2
 8004186:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004188:	4b14      	ldr	r3, [pc, #80]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a13      	ldr	r2, [pc, #76]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800418e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004192:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004194:	f7fd fec4 	bl	8001f20 <HAL_GetTick>
 8004198:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800419a:	e009      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800419c:	f7fd fec0 	bl	8001f20 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d902      	bls.n	80041b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	73fb      	strb	r3, [r7, #15]
          break;
 80041ae:	e005      	b.n	80041bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041b0:	4b0a      	ldr	r3, [pc, #40]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0ef      	beq.n	800419c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041c2:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	4904      	ldr	r1, [pc, #16]	@ (80041dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40021000 	.word	0x40021000

080041e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d018      	beq.n	800422c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041fa:	4b67      	ldr	r3, [pc, #412]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0203 	and.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d10d      	bne.n	8004226 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
       ||
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004212:	4b61      	ldr	r3, [pc, #388]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
       ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d047      	beq.n	80042b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	e044      	b.n	80042b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d018      	beq.n	8004266 <RCCEx_PLLSAI2_Config+0x86>
 8004234:	2b03      	cmp	r3, #3
 8004236:	d825      	bhi.n	8004284 <RCCEx_PLLSAI2_Config+0xa4>
 8004238:	2b01      	cmp	r3, #1
 800423a:	d002      	beq.n	8004242 <RCCEx_PLLSAI2_Config+0x62>
 800423c:	2b02      	cmp	r3, #2
 800423e:	d009      	beq.n	8004254 <RCCEx_PLLSAI2_Config+0x74>
 8004240:	e020      	b.n	8004284 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004242:	4b55      	ldr	r3, [pc, #340]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11d      	bne.n	800428a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004252:	e01a      	b.n	800428a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004254:	4b50      	ldr	r3, [pc, #320]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800425c:	2b00      	cmp	r3, #0
 800425e:	d116      	bne.n	800428e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004264:	e013      	b.n	800428e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004266:	4b4c      	ldr	r3, [pc, #304]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004272:	4b49      	ldr	r3, [pc, #292]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004282:	e006      	b.n	8004292 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	73fb      	strb	r3, [r7, #15]
      break;
 8004288:	e004      	b.n	8004294 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800428a:	bf00      	nop
 800428c:	e002      	b.n	8004294 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004292:	bf00      	nop
    }

    if(status == HAL_OK)
 8004294:	7bfb      	ldrb	r3, [r7, #15]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10d      	bne.n	80042b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800429a:	4b3f      	ldr	r3, [pc, #252]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6819      	ldr	r1, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	430b      	orrs	r3, r1
 80042b0:	4939      	ldr	r1, [pc, #228]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d167      	bne.n	800438c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042bc:	4b36      	ldr	r3, [pc, #216]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a35      	ldr	r2, [pc, #212]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c8:	f7fd fe2a 	bl	8001f20 <HAL_GetTick>
 80042cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042ce:	e009      	b.n	80042e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042d0:	f7fd fe26 	bl	8001f20 <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d902      	bls.n	80042e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	73fb      	strb	r3, [r7, #15]
        break;
 80042e2:	e005      	b.n	80042f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1ef      	bne.n	80042d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d14a      	bne.n	800438c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d111      	bne.n	8004320 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042fc:	4b26      	ldr	r3, [pc, #152]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6892      	ldr	r2, [r2, #8]
 800430c:	0211      	lsls	r1, r2, #8
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68d2      	ldr	r2, [r2, #12]
 8004312:	0912      	lsrs	r2, r2, #4
 8004314:	0452      	lsls	r2, r2, #17
 8004316:	430a      	orrs	r2, r1
 8004318:	491f      	ldr	r1, [pc, #124]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431a:	4313      	orrs	r3, r2
 800431c:	614b      	str	r3, [r1, #20]
 800431e:	e011      	b.n	8004344 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004320:	4b1d      	ldr	r3, [pc, #116]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004328:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6892      	ldr	r2, [r2, #8]
 8004330:	0211      	lsls	r1, r2, #8
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6912      	ldr	r2, [r2, #16]
 8004336:	0852      	lsrs	r2, r2, #1
 8004338:	3a01      	subs	r2, #1
 800433a:	0652      	lsls	r2, r2, #25
 800433c:	430a      	orrs	r2, r1
 800433e:	4916      	ldr	r1, [pc, #88]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004340:	4313      	orrs	r3, r2
 8004342:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004344:	4b14      	ldr	r3, [pc, #80]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a13      	ldr	r2, [pc, #76]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 800434a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800434e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fd fde6 	bl	8001f20 <HAL_GetTick>
 8004354:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004356:	e009      	b.n	800436c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004358:	f7fd fde2 	bl	8001f20 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d902      	bls.n	800436c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	73fb      	strb	r3, [r7, #15]
          break;
 800436a:	e005      	b.n	8004378 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800436c:	4b0a      	ldr	r3, [pc, #40]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ef      	beq.n	8004358 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4904      	ldr	r1, [pc, #16]	@ (8004398 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004388:	4313      	orrs	r3, r2
 800438a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40021000 	.word	0x40021000

0800439c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e095      	b.n	80044da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d108      	bne.n	80043c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043be:	d009      	beq.n	80043d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	61da      	str	r2, [r3, #28]
 80043c6:	e005      	b.n	80043d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fd fa90 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800440a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004414:	d902      	bls.n	800441c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	e002      	b.n	8004422 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800441c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004420:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800442a:	d007      	beq.n	800443c <HAL_SPI_Init+0xa0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004434:	d002      	beq.n	800443c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800447e:	ea42 0103 	orr.w	r1, r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	0c1b      	lsrs	r3, r3, #16
 8004498:	f003 0204 	and.w	r2, r3, #4
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80044b8:	ea42 0103 	orr.w	r1, r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e040      	b.n	8004576 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fd fa49 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2224      	movs	r2, #36	@ 0x24
 800450e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fae1 	bl	8004af0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f826 	bl	8004580 <UART_SetConfig>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e01b      	b.n	8004576 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800454c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689a      	ldr	r2, [r3, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800455c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fb60 	bl	8004c34 <UART_CheckIdleState>
 8004574:	4603      	mov	r3, r0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004584:	b08a      	sub	sp, #40	@ 0x28
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	431a      	orrs	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4ba4      	ldr	r3, [pc, #656]	@ (8004840 <UART_SetConfig+0x2c0>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a99      	ldr	r2, [pc, #612]	@ (8004844 <UART_SetConfig+0x2c4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d004      	beq.n	80045ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e8:	4313      	orrs	r3, r2
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a90      	ldr	r2, [pc, #576]	@ (8004848 <UART_SetConfig+0x2c8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d126      	bne.n	8004658 <UART_SetConfig+0xd8>
 800460a:	4b90      	ldr	r3, [pc, #576]	@ (800484c <UART_SetConfig+0x2cc>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b03      	cmp	r3, #3
 8004616:	d81b      	bhi.n	8004650 <UART_SetConfig+0xd0>
 8004618:	a201      	add	r2, pc, #4	@ (adr r2, 8004620 <UART_SetConfig+0xa0>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004631 	.word	0x08004631
 8004624:	08004641 	.word	0x08004641
 8004628:	08004639 	.word	0x08004639
 800462c:	08004649 	.word	0x08004649
 8004630:	2301      	movs	r3, #1
 8004632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004636:	e116      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004638:	2302      	movs	r3, #2
 800463a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463e:	e112      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004640:	2304      	movs	r3, #4
 8004642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004646:	e10e      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004648:	2308      	movs	r3, #8
 800464a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800464e:	e10a      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004650:	2310      	movs	r3, #16
 8004652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004656:	e106      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a7c      	ldr	r2, [pc, #496]	@ (8004850 <UART_SetConfig+0x2d0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d138      	bne.n	80046d4 <UART_SetConfig+0x154>
 8004662:	4b7a      	ldr	r3, [pc, #488]	@ (800484c <UART_SetConfig+0x2cc>)
 8004664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b0c      	cmp	r3, #12
 800466e:	d82d      	bhi.n	80046cc <UART_SetConfig+0x14c>
 8004670:	a201      	add	r2, pc, #4	@ (adr r2, 8004678 <UART_SetConfig+0xf8>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	080046ad 	.word	0x080046ad
 800467c:	080046cd 	.word	0x080046cd
 8004680:	080046cd 	.word	0x080046cd
 8004684:	080046cd 	.word	0x080046cd
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080046cd 	.word	0x080046cd
 8004690:	080046cd 	.word	0x080046cd
 8004694:	080046cd 	.word	0x080046cd
 8004698:	080046b5 	.word	0x080046b5
 800469c:	080046cd 	.word	0x080046cd
 80046a0:	080046cd 	.word	0x080046cd
 80046a4:	080046cd 	.word	0x080046cd
 80046a8:	080046c5 	.word	0x080046c5
 80046ac:	2300      	movs	r3, #0
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046b2:	e0d8      	b.n	8004866 <UART_SetConfig+0x2e6>
 80046b4:	2302      	movs	r3, #2
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ba:	e0d4      	b.n	8004866 <UART_SetConfig+0x2e6>
 80046bc:	2304      	movs	r3, #4
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046c2:	e0d0      	b.n	8004866 <UART_SetConfig+0x2e6>
 80046c4:	2308      	movs	r3, #8
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e0cc      	b.n	8004866 <UART_SetConfig+0x2e6>
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e0c8      	b.n	8004866 <UART_SetConfig+0x2e6>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a5e      	ldr	r2, [pc, #376]	@ (8004854 <UART_SetConfig+0x2d4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d125      	bne.n	800472a <UART_SetConfig+0x1aa>
 80046de:	4b5b      	ldr	r3, [pc, #364]	@ (800484c <UART_SetConfig+0x2cc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046e8:	2b30      	cmp	r3, #48	@ 0x30
 80046ea:	d016      	beq.n	800471a <UART_SetConfig+0x19a>
 80046ec:	2b30      	cmp	r3, #48	@ 0x30
 80046ee:	d818      	bhi.n	8004722 <UART_SetConfig+0x1a2>
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d00a      	beq.n	800470a <UART_SetConfig+0x18a>
 80046f4:	2b20      	cmp	r3, #32
 80046f6:	d814      	bhi.n	8004722 <UART_SetConfig+0x1a2>
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <UART_SetConfig+0x182>
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d008      	beq.n	8004712 <UART_SetConfig+0x192>
 8004700:	e00f      	b.n	8004722 <UART_SetConfig+0x1a2>
 8004702:	2300      	movs	r3, #0
 8004704:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004708:	e0ad      	b.n	8004866 <UART_SetConfig+0x2e6>
 800470a:	2302      	movs	r3, #2
 800470c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004710:	e0a9      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004712:	2304      	movs	r3, #4
 8004714:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004718:	e0a5      	b.n	8004866 <UART_SetConfig+0x2e6>
 800471a:	2308      	movs	r3, #8
 800471c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004720:	e0a1      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004722:	2310      	movs	r3, #16
 8004724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004728:	e09d      	b.n	8004866 <UART_SetConfig+0x2e6>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a4a      	ldr	r2, [pc, #296]	@ (8004858 <UART_SetConfig+0x2d8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d125      	bne.n	8004780 <UART_SetConfig+0x200>
 8004734:	4b45      	ldr	r3, [pc, #276]	@ (800484c <UART_SetConfig+0x2cc>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800473e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004740:	d016      	beq.n	8004770 <UART_SetConfig+0x1f0>
 8004742:	2bc0      	cmp	r3, #192	@ 0xc0
 8004744:	d818      	bhi.n	8004778 <UART_SetConfig+0x1f8>
 8004746:	2b80      	cmp	r3, #128	@ 0x80
 8004748:	d00a      	beq.n	8004760 <UART_SetConfig+0x1e0>
 800474a:	2b80      	cmp	r3, #128	@ 0x80
 800474c:	d814      	bhi.n	8004778 <UART_SetConfig+0x1f8>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <UART_SetConfig+0x1d8>
 8004752:	2b40      	cmp	r3, #64	@ 0x40
 8004754:	d008      	beq.n	8004768 <UART_SetConfig+0x1e8>
 8004756:	e00f      	b.n	8004778 <UART_SetConfig+0x1f8>
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475e:	e082      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004760:	2302      	movs	r3, #2
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004766:	e07e      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004768:	2304      	movs	r3, #4
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800476e:	e07a      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004770:	2308      	movs	r3, #8
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004776:	e076      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004778:	2310      	movs	r3, #16
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477e:	e072      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a35      	ldr	r2, [pc, #212]	@ (800485c <UART_SetConfig+0x2dc>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d12a      	bne.n	80047e0 <UART_SetConfig+0x260>
 800478a:	4b30      	ldr	r3, [pc, #192]	@ (800484c <UART_SetConfig+0x2cc>)
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004790:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004794:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004798:	d01a      	beq.n	80047d0 <UART_SetConfig+0x250>
 800479a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800479e:	d81b      	bhi.n	80047d8 <UART_SetConfig+0x258>
 80047a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047a4:	d00c      	beq.n	80047c0 <UART_SetConfig+0x240>
 80047a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047aa:	d815      	bhi.n	80047d8 <UART_SetConfig+0x258>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d003      	beq.n	80047b8 <UART_SetConfig+0x238>
 80047b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047b4:	d008      	beq.n	80047c8 <UART_SetConfig+0x248>
 80047b6:	e00f      	b.n	80047d8 <UART_SetConfig+0x258>
 80047b8:	2300      	movs	r3, #0
 80047ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047be:	e052      	b.n	8004866 <UART_SetConfig+0x2e6>
 80047c0:	2302      	movs	r3, #2
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047c6:	e04e      	b.n	8004866 <UART_SetConfig+0x2e6>
 80047c8:	2304      	movs	r3, #4
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ce:	e04a      	b.n	8004866 <UART_SetConfig+0x2e6>
 80047d0:	2308      	movs	r3, #8
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d6:	e046      	b.n	8004866 <UART_SetConfig+0x2e6>
 80047d8:	2310      	movs	r3, #16
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047de:	e042      	b.n	8004866 <UART_SetConfig+0x2e6>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a17      	ldr	r2, [pc, #92]	@ (8004844 <UART_SetConfig+0x2c4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d13a      	bne.n	8004860 <UART_SetConfig+0x2e0>
 80047ea:	4b18      	ldr	r3, [pc, #96]	@ (800484c <UART_SetConfig+0x2cc>)
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047f8:	d01a      	beq.n	8004830 <UART_SetConfig+0x2b0>
 80047fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047fe:	d81b      	bhi.n	8004838 <UART_SetConfig+0x2b8>
 8004800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004804:	d00c      	beq.n	8004820 <UART_SetConfig+0x2a0>
 8004806:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800480a:	d815      	bhi.n	8004838 <UART_SetConfig+0x2b8>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <UART_SetConfig+0x298>
 8004810:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004814:	d008      	beq.n	8004828 <UART_SetConfig+0x2a8>
 8004816:	e00f      	b.n	8004838 <UART_SetConfig+0x2b8>
 8004818:	2300      	movs	r3, #0
 800481a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800481e:	e022      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004820:	2302      	movs	r3, #2
 8004822:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004826:	e01e      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004828:	2304      	movs	r3, #4
 800482a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482e:	e01a      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004830:	2308      	movs	r3, #8
 8004832:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004836:	e016      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004838:	2310      	movs	r3, #16
 800483a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483e:	e012      	b.n	8004866 <UART_SetConfig+0x2e6>
 8004840:	efff69f3 	.word	0xefff69f3
 8004844:	40008000 	.word	0x40008000
 8004848:	40013800 	.word	0x40013800
 800484c:	40021000 	.word	0x40021000
 8004850:	40004400 	.word	0x40004400
 8004854:	40004800 	.word	0x40004800
 8004858:	40004c00 	.word	0x40004c00
 800485c:	40005000 	.word	0x40005000
 8004860:	2310      	movs	r3, #16
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a9f      	ldr	r2, [pc, #636]	@ (8004ae8 <UART_SetConfig+0x568>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d17a      	bne.n	8004966 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004870:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004874:	2b08      	cmp	r3, #8
 8004876:	d824      	bhi.n	80048c2 <UART_SetConfig+0x342>
 8004878:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <UART_SetConfig+0x300>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	080048a5 	.word	0x080048a5
 8004884:	080048c3 	.word	0x080048c3
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048c3 	.word	0x080048c3
 8004890:	080048b3 	.word	0x080048b3
 8004894:	080048c3 	.word	0x080048c3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048c3 	.word	0x080048c3
 80048a0:	080048bb 	.word	0x080048bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7ff f822 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 80048a8:	61f8      	str	r0, [r7, #28]
        break;
 80048aa:	e010      	b.n	80048ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ac:	4b8f      	ldr	r3, [pc, #572]	@ (8004aec <UART_SetConfig+0x56c>)
 80048ae:	61fb      	str	r3, [r7, #28]
        break;
 80048b0:	e00d      	b.n	80048ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048b2:	f7fe ff83 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 80048b6:	61f8      	str	r0, [r7, #28]
        break;
 80048b8:	e009      	b.n	80048ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048be:	61fb      	str	r3, [r7, #28]
        break;
 80048c0:	e005      	b.n	80048ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048c2:	2300      	movs	r3, #0
 80048c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80fb 	beq.w	8004acc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d305      	bcc.n	80048f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d903      	bls.n	80048fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80048f8:	e0e8      	b.n	8004acc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2200      	movs	r2, #0
 80048fe:	461c      	mov	r4, r3
 8004900:	4615      	mov	r5, r2
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	022b      	lsls	r3, r5, #8
 800490c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004910:	0222      	lsls	r2, r4, #8
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	6849      	ldr	r1, [r1, #4]
 8004916:	0849      	lsrs	r1, r1, #1
 8004918:	2000      	movs	r0, #0
 800491a:	4688      	mov	r8, r1
 800491c:	4681      	mov	r9, r0
 800491e:	eb12 0a08 	adds.w	sl, r2, r8
 8004922:	eb43 0b09 	adc.w	fp, r3, r9
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004934:	4650      	mov	r0, sl
 8004936:	4659      	mov	r1, fp
 8004938:	f7fb fc46 	bl	80001c8 <__aeabi_uldivmod>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4613      	mov	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800494a:	d308      	bcc.n	800495e <UART_SetConfig+0x3de>
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004952:	d204      	bcs.n	800495e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	60da      	str	r2, [r3, #12]
 800495c:	e0b6      	b.n	8004acc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004964:	e0b2      	b.n	8004acc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800496e:	d15e      	bne.n	8004a2e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004970:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004974:	2b08      	cmp	r3, #8
 8004976:	d828      	bhi.n	80049ca <UART_SetConfig+0x44a>
 8004978:	a201      	add	r2, pc, #4	@ (adr r2, 8004980 <UART_SetConfig+0x400>)
 800497a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497e:	bf00      	nop
 8004980:	080049a5 	.word	0x080049a5
 8004984:	080049ad 	.word	0x080049ad
 8004988:	080049b5 	.word	0x080049b5
 800498c:	080049cb 	.word	0x080049cb
 8004990:	080049bb 	.word	0x080049bb
 8004994:	080049cb 	.word	0x080049cb
 8004998:	080049cb 	.word	0x080049cb
 800499c:	080049cb 	.word	0x080049cb
 80049a0:	080049c3 	.word	0x080049c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a4:	f7fe ffa2 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 80049a8:	61f8      	str	r0, [r7, #28]
        break;
 80049aa:	e014      	b.n	80049d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049ac:	f7fe ffb4 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 80049b0:	61f8      	str	r0, [r7, #28]
        break;
 80049b2:	e010      	b.n	80049d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b4:	4b4d      	ldr	r3, [pc, #308]	@ (8004aec <UART_SetConfig+0x56c>)
 80049b6:	61fb      	str	r3, [r7, #28]
        break;
 80049b8:	e00d      	b.n	80049d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049ba:	f7fe feff 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 80049be:	61f8      	str	r0, [r7, #28]
        break;
 80049c0:	e009      	b.n	80049d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049c6:	61fb      	str	r3, [r7, #28]
        break;
 80049c8:	e005      	b.n	80049d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d077      	beq.n	8004acc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	005a      	lsls	r2, r3, #1
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	441a      	add	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80049f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b0f      	cmp	r3, #15
 80049f6:	d916      	bls.n	8004a26 <UART_SetConfig+0x4a6>
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049fe:	d212      	bcs.n	8004a26 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f023 030f 	bic.w	r3, r3, #15
 8004a08:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f003 0307 	and.w	r3, r3, #7
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	8afb      	ldrh	r3, [r7, #22]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	8afa      	ldrh	r2, [r7, #22]
 8004a22:	60da      	str	r2, [r3, #12]
 8004a24:	e052      	b.n	8004acc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a2c:	e04e      	b.n	8004acc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d827      	bhi.n	8004a86 <UART_SetConfig+0x506>
 8004a36:	a201      	add	r2, pc, #4	@ (adr r2, 8004a3c <UART_SetConfig+0x4bc>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	08004a87 	.word	0x08004a87
 8004a4c:	08004a77 	.word	0x08004a77
 8004a50:	08004a87 	.word	0x08004a87
 8004a54:	08004a87 	.word	0x08004a87
 8004a58:	08004a87 	.word	0x08004a87
 8004a5c:	08004a7f 	.word	0x08004a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a60:	f7fe ff44 	bl	80038ec <HAL_RCC_GetPCLK1Freq>
 8004a64:	61f8      	str	r0, [r7, #28]
        break;
 8004a66:	e014      	b.n	8004a92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7fe ff56 	bl	8003918 <HAL_RCC_GetPCLK2Freq>
 8004a6c:	61f8      	str	r0, [r7, #28]
        break;
 8004a6e:	e010      	b.n	8004a92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a70:	4b1e      	ldr	r3, [pc, #120]	@ (8004aec <UART_SetConfig+0x56c>)
 8004a72:	61fb      	str	r3, [r7, #28]
        break;
 8004a74:	e00d      	b.n	8004a92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a76:	f7fe fea1 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8004a7a:	61f8      	str	r0, [r7, #28]
        break;
 8004a7c:	e009      	b.n	8004a92 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a82:	61fb      	str	r3, [r7, #28]
        break;
 8004a84:	e005      	b.n	8004a92 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004a90:	bf00      	nop
    }

    if (pclk != 0U)
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d019      	beq.n	8004acc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	085a      	lsrs	r2, r3, #1
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	d909      	bls.n	8004ac6 <UART_SetConfig+0x546>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab8:	d205      	bcs.n	8004ac6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60da      	str	r2, [r3, #12]
 8004ac4:	e002      	b.n	8004acc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ad8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3728      	adds	r7, #40	@ 0x28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40008000 	.word	0x40008000
 8004aec:	00f42400 	.word	0x00f42400

08004af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01a      	beq.n	8004c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bee:	d10a      	bne.n	8004c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00a      	beq.n	8004c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	605a      	str	r2, [r3, #4]
  }
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b098      	sub	sp, #96	@ 0x60
 8004c38:	af02      	add	r7, sp, #8
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c44:	f7fd f96c 	bl	8001f20 <HAL_GetTick>
 8004c48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d12e      	bne.n	8004cb6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c60:	2200      	movs	r2, #0
 8004c62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f88c 	bl	8004d84 <UART_WaitOnFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d021      	beq.n	8004cb6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2220      	movs	r2, #32
 8004ca8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e062      	b.n	8004d7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d149      	bne.n	8004d58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cc4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f856 	bl	8004d84 <UART_WaitOnFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d03c      	beq.n	8004d58 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	623b      	str	r3, [r7, #32]
   return(result);
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e6      	bne.n	8004cde <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d30:	61fa      	str	r2, [r7, #28]
 8004d32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	69b9      	ldr	r1, [r7, #24]
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e011      	b.n	8004d7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3758      	adds	r7, #88	@ 0x58
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d94:	e04f      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9c:	d04b      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d9e:	f7fd f8bf 	bl	8001f20 <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d302      	bcc.n	8004db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e04e      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d037      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b80      	cmp	r3, #128	@ 0x80
 8004dca:	d034      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b40      	cmp	r3, #64	@ 0x40
 8004dd0:	d031      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d110      	bne.n	8004e02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2208      	movs	r2, #8
 8004de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 f838 	bl	8004e5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2208      	movs	r2, #8
 8004df2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e029      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e10:	d111      	bne.n	8004e36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f81e 	bl	8004e5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e00f      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d0a0      	beq.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b095      	sub	sp, #84	@ 0x54
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	461a      	mov	r2, r3
 8004e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e86:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e6      	bne.n	8004e66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d118      	bne.n	8004f06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	f023 0310 	bic.w	r3, r3, #16
 8004ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6979      	ldr	r1, [r7, #20]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	613b      	str	r3, [r7, #16]
   return(result);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e6      	bne.n	8004ed4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004f1a:	bf00      	nop
 8004f1c:	3754      	adds	r7, #84	@ 0x54
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
	...

08004f28 <LL_EXTI_EnableIT_0_31>:
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004f30:	4b05      	ldr	r3, [pc, #20]	@ (8004f48 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4904      	ldr	r1, [pc, #16]	@ (8004f48 <LL_EXTI_EnableIT_0_31+0x20>)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	600b      	str	r3, [r1, #0]
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	40010400 	.word	0x40010400

08004f4c <LL_EXTI_EnableIT_32_63>:
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8004f54:	4b05      	ldr	r3, [pc, #20]	@ (8004f6c <LL_EXTI_EnableIT_32_63+0x20>)
 8004f56:	6a1a      	ldr	r2, [r3, #32]
 8004f58:	4904      	ldr	r1, [pc, #16]	@ (8004f6c <LL_EXTI_EnableIT_32_63+0x20>)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	620b      	str	r3, [r1, #32]
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	40010400 	.word	0x40010400

08004f70 <LL_EXTI_DisableIT_0_31>:
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004f78:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <LL_EXTI_DisableIT_0_31+0x24>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	4904      	ldr	r1, [pc, #16]	@ (8004f94 <LL_EXTI_DisableIT_0_31+0x24>)
 8004f82:	4013      	ands	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40010400 	.word	0x40010400

08004f98 <LL_EXTI_DisableIT_32_63>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8004fa0:	4b06      	ldr	r3, [pc, #24]	@ (8004fbc <LL_EXTI_DisableIT_32_63+0x24>)
 8004fa2:	6a1a      	ldr	r2, [r3, #32]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	4904      	ldr	r1, [pc, #16]	@ (8004fbc <LL_EXTI_DisableIT_32_63+0x24>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	620b      	str	r3, [r1, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	40010400 	.word	0x40010400

08004fc0 <LL_EXTI_EnableEvent_0_31>:
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8004fc8:	4b05      	ldr	r3, [pc, #20]	@ (8004fe0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	4904      	ldr	r1, [pc, #16]	@ (8004fe0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	604b      	str	r3, [r1, #4]
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr
 8004fe0:	40010400 	.word	0x40010400

08004fe4 <LL_EXTI_EnableEvent_32_63>:
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004fee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ff0:	4904      	ldr	r1, [pc, #16]	@ (8005004 <LL_EXTI_EnableEvent_32_63+0x20>)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40010400 	.word	0x40010400

08005008 <LL_EXTI_DisableEvent_0_31>:
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005010:	4b06      	ldr	r3, [pc, #24]	@ (800502c <LL_EXTI_DisableEvent_0_31+0x24>)
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	43db      	mvns	r3, r3
 8005018:	4904      	ldr	r1, [pc, #16]	@ (800502c <LL_EXTI_DisableEvent_0_31+0x24>)
 800501a:	4013      	ands	r3, r2
 800501c:	604b      	str	r3, [r1, #4]
}
 800501e:	bf00      	nop
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010400 	.word	0x40010400

08005030 <LL_EXTI_DisableEvent_32_63>:
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8005038:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <LL_EXTI_DisableEvent_32_63+0x24>)
 800503a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	43db      	mvns	r3, r3
 8005040:	4904      	ldr	r1, [pc, #16]	@ (8005054 <LL_EXTI_DisableEvent_32_63+0x24>)
 8005042:	4013      	ands	r3, r2
 8005044:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40010400 	.word	0x40010400

08005058 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005060:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	4904      	ldr	r1, [pc, #16]	@ (8005078 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4313      	orrs	r3, r2
 800506a:	608b      	str	r3, [r1, #8]
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	40010400 	.word	0x40010400

0800507c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8005084:	4b05      	ldr	r3, [pc, #20]	@ (800509c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005086:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005088:	4904      	ldr	r1, [pc, #16]	@ (800509c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4313      	orrs	r3, r2
 800508e:	628b      	str	r3, [r1, #40]	@ 0x28
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	40010400 	.word	0x40010400

080050a0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80050a8:	4b06      	ldr	r3, [pc, #24]	@ (80050c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	43db      	mvns	r3, r3
 80050b0:	4904      	ldr	r1, [pc, #16]	@ (80050c4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	608b      	str	r3, [r1, #8]
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	40010400 	.word	0x40010400

080050c8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80050d0:	4b06      	ldr	r3, [pc, #24]	@ (80050ec <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80050d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	43db      	mvns	r3, r3
 80050d8:	4904      	ldr	r1, [pc, #16]	@ (80050ec <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80050da:	4013      	ands	r3, r2
 80050dc:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	40010400 	.word	0x40010400

080050f0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80050f8:	4b05      	ldr	r3, [pc, #20]	@ (8005110 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	4904      	ldr	r1, [pc, #16]	@ (8005110 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4313      	orrs	r3, r2
 8005102:	60cb      	str	r3, [r1, #12]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	40010400 	.word	0x40010400

08005114 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800511c:	4b05      	ldr	r3, [pc, #20]	@ (8005134 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800511e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005120:	4904      	ldr	r1, [pc, #16]	@ (8005134 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4313      	orrs	r3, r2
 8005126:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40010400 	.word	0x40010400

08005138 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005140:	4b06      	ldr	r3, [pc, #24]	@ (800515c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	43db      	mvns	r3, r3
 8005148:	4904      	ldr	r1, [pc, #16]	@ (800515c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800514a:	4013      	ands	r3, r2
 800514c:	60cb      	str	r3, [r1, #12]
}
 800514e:	bf00      	nop
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40010400 	.word	0x40010400

08005160 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8005168:	4b06      	ldr	r3, [pc, #24]	@ (8005184 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800516a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	43db      	mvns	r3, r3
 8005170:	4904      	ldr	r1, [pc, #16]	@ (8005184 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005172:	4013      	ands	r3, r2
 8005174:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40010400 	.word	0x40010400

08005188 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	7a1b      	ldrb	r3, [r3, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80d0 	beq.w	800533e <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d063      	beq.n	800526e <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	7a5b      	ldrb	r3, [r3, #9]
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d01c      	beq.n	80051e8 <LL_EXTI_Init+0x60>
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	dc25      	bgt.n	80051fe <LL_EXTI_Init+0x76>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <LL_EXTI_Init+0x34>
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d00b      	beq.n	80051d2 <LL_EXTI_Init+0x4a>
 80051ba:	e020      	b.n	80051fe <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff ff21 	bl	8005008 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff feac 	bl	8004f28 <LL_EXTI_EnableIT_0_31>
          break;
 80051d0:	e018      	b.n	8005204 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff feca 	bl	8004f70 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff feed 	bl	8004fc0 <LL_EXTI_EnableEvent_0_31>
          break;
 80051e6:	e00d      	b.n	8005204 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7ff fe9b 	bl	8004f28 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff fee2 	bl	8004fc0 <LL_EXTI_EnableEvent_0_31>
          break;
 80051fc:	e002      	b.n	8005204 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 80051fe:	2301      	movs	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
          break;
 8005202:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	7a9b      	ldrb	r3, [r3, #10]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d030      	beq.n	800526e <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	7a9b      	ldrb	r3, [r3, #10]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d01c      	beq.n	800524e <LL_EXTI_Init+0xc6>
 8005214:	2b03      	cmp	r3, #3
 8005216:	dc25      	bgt.n	8005264 <LL_EXTI_Init+0xdc>
 8005218:	2b01      	cmp	r3, #1
 800521a:	d002      	beq.n	8005222 <LL_EXTI_Init+0x9a>
 800521c:	2b02      	cmp	r3, #2
 800521e:	d00b      	beq.n	8005238 <LL_EXTI_Init+0xb0>
 8005220:	e020      	b.n	8005264 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff ff86 	bl	8005138 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ff11 	bl	8005058 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005236:	e01a      	b.n	800526e <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff ff2f 	bl	80050a0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff52 	bl	80050f0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800524c:	e00f      	b.n	800526e <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff ff00 	bl	8005058 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ff47 	bl	80050f0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005262:	e004      	b.n	800526e <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f043 0302 	orr.w	r3, r3, #2
 800526a:	60fb      	str	r3, [r7, #12]
            break;
 800526c:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d077      	beq.n	8005366 <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	7a5b      	ldrb	r3, [r3, #9]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d01c      	beq.n	80052b8 <LL_EXTI_Init+0x130>
 800527e:	2b02      	cmp	r3, #2
 8005280:	dc25      	bgt.n	80052ce <LL_EXTI_Init+0x146>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d002      	beq.n	800528c <LL_EXTI_Init+0x104>
 8005286:	2b01      	cmp	r3, #1
 8005288:	d00b      	beq.n	80052a2 <LL_EXTI_Init+0x11a>
 800528a:	e020      	b.n	80052ce <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fecd 	bl	8005030 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fe56 	bl	8004f4c <LL_EXTI_EnableIT_32_63>
          break;
 80052a0:	e01a      	b.n	80052d8 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fe76 	bl	8004f98 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff fe97 	bl	8004fe4 <LL_EXTI_EnableEvent_32_63>
          break;
 80052b6:	e00f      	b.n	80052d8 <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fe45 	bl	8004f4c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fe8c 	bl	8004fe4 <LL_EXTI_EnableEvent_32_63>
          break;
 80052cc:	e004      	b.n	80052d8 <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f043 0304 	orr.w	r3, r3, #4
 80052d4:	60fb      	str	r3, [r7, #12]
          break;
 80052d6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	7a9b      	ldrb	r3, [r3, #10]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d042      	beq.n	8005366 <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	7a9b      	ldrb	r3, [r3, #10]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d01c      	beq.n	8005322 <LL_EXTI_Init+0x19a>
 80052e8:	2b03      	cmp	r3, #3
 80052ea:	dc25      	bgt.n	8005338 <LL_EXTI_Init+0x1b0>
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d002      	beq.n	80052f6 <LL_EXTI_Init+0x16e>
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d00b      	beq.n	800530c <LL_EXTI_Init+0x184>
 80052f4:	e020      	b.n	8005338 <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff ff30 	bl	8005160 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff feb9 	bl	800507c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800530a:	e02c      	b.n	8005366 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fed9 	bl	80050c8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fefa 	bl	8005114 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005320:	e021      	b.n	8005366 <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff fea8 	bl	800507c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff feef 	bl	8005114 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8005336:	e016      	b.n	8005366 <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
            break;
 800533c:	e013      	b.n	8005366 <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff fe14 	bl	8004f70 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fe5b 	bl	8005008 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fe1e 	bl	8004f98 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	f7ff fe65 	bl	8005030 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 8005366:	68fb      	ldr	r3, [r7, #12]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <LL_GPIO_SetPinMode>:
{
 8005370:	b480      	push	{r7}
 8005372:	b08b      	sub	sp, #44	@ 0x2c
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	fa93 f3a3 	rbit	r3, r3
 800538a:	613b      	str	r3, [r7, #16]
  return result;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005396:	2320      	movs	r3, #32
 8005398:	e003      	b.n	80053a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	fab3 f383 	clz	r3, r3
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	2103      	movs	r1, #3
 80053a6:	fa01 f303 	lsl.w	r3, r1, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	401a      	ands	r2, r3
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	fa93 f3a3 	rbit	r3, r3
 80053b8:	61fb      	str	r3, [r7, #28]
  return result;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80053c4:	2320      	movs	r3, #32
 80053c6:	e003      	b.n	80053d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	fab3 f383 	clz	r3, r3
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	fa01 f303 	lsl.w	r3, r1, r3
 80053d8:	431a      	orrs	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	601a      	str	r2, [r3, #0]
}
 80053de:	bf00      	nop
 80053e0:	372c      	adds	r7, #44	@ 0x2c
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <LL_GPIO_SetPinOutputType>:
{
 80053ea:	b480      	push	{r7}
 80053ec:	b085      	sub	sp, #20
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	60b9      	str	r1, [r7, #8]
 80053f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	43db      	mvns	r3, r3
 80053fe:	401a      	ands	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	fb01 f303 	mul.w	r3, r1, r3
 8005408:	431a      	orrs	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	605a      	str	r2, [r3, #4]
}
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <LL_GPIO_SetPinSpeed>:
{
 800541a:	b480      	push	{r7}
 800541c:	b08b      	sub	sp, #44	@ 0x2c
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	fa93 f3a3 	rbit	r3, r3
 8005434:	613b      	str	r3, [r7, #16]
  return result;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005440:	2320      	movs	r3, #32
 8005442:	e003      	b.n	800544c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	fab3 f383 	clz	r3, r3
 800544a:	b2db      	uxtb	r3, r3
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	2103      	movs	r1, #3
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	401a      	ands	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	fa93 f3a3 	rbit	r3, r3
 8005462:	61fb      	str	r3, [r7, #28]
  return result;
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800546e:	2320      	movs	r3, #32
 8005470:	e003      	b.n	800547a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	fab3 f383 	clz	r3, r3
 8005478:	b2db      	uxtb	r3, r3
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	fa01 f303 	lsl.w	r3, r1, r3
 8005482:	431a      	orrs	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	609a      	str	r2, [r3, #8]
}
 8005488:	bf00      	nop
 800548a:	372c      	adds	r7, #44	@ 0x2c
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <LL_GPIO_SetPinPull>:
{
 8005494:	b480      	push	{r7}
 8005496:	b08b      	sub	sp, #44	@ 0x2c
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	613b      	str	r3, [r7, #16]
  return result;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80054ba:	2320      	movs	r3, #32
 80054bc:	e003      	b.n	80054c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	fab3 f383 	clz	r3, r3
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	2103      	movs	r1, #3
 80054ca:	fa01 f303 	lsl.w	r3, r1, r3
 80054ce:	43db      	mvns	r3, r3
 80054d0:	401a      	ands	r2, r3
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	fa93 f3a3 	rbit	r3, r3
 80054dc:	61fb      	str	r3, [r7, #28]
  return result;
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80054e8:	2320      	movs	r3, #32
 80054ea:	e003      	b.n	80054f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	fab3 f383 	clz	r3, r3
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	fa01 f303 	lsl.w	r3, r1, r3
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	60da      	str	r2, [r3, #12]
}
 8005502:	bf00      	nop
 8005504:	372c      	adds	r7, #44	@ 0x2c
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <LL_GPIO_SetAFPin_0_7>:
{
 800550e:	b480      	push	{r7}
 8005510:	b08b      	sub	sp, #44	@ 0x2c
 8005512:	af00      	add	r7, sp, #0
 8005514:	60f8      	str	r0, [r7, #12]
 8005516:	60b9      	str	r1, [r7, #8]
 8005518:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6a1a      	ldr	r2, [r3, #32]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	fa93 f3a3 	rbit	r3, r3
 8005528:	613b      	str	r3, [r7, #16]
  return result;
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005534:	2320      	movs	r3, #32
 8005536:	e003      	b.n	8005540 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	fab3 f383 	clz	r3, r3
 800553e:	b2db      	uxtb	r3, r3
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	210f      	movs	r1, #15
 8005544:	fa01 f303 	lsl.w	r3, r1, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	401a      	ands	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	fa93 f3a3 	rbit	r3, r3
 8005556:	61fb      	str	r3, [r7, #28]
  return result;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005562:	2320      	movs	r3, #32
 8005564:	e003      	b.n	800556e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	fab3 f383 	clz	r3, r3
 800556c:	b2db      	uxtb	r3, r3
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	fa01 f303 	lsl.w	r3, r1, r3
 8005576:	431a      	orrs	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	621a      	str	r2, [r3, #32]
}
 800557c:	bf00      	nop
 800557e:	372c      	adds	r7, #44	@ 0x2c
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <LL_GPIO_SetAFPin_8_15>:
{
 8005588:	b480      	push	{r7}
 800558a:	b08b      	sub	sp, #44	@ 0x2c
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	fa93 f3a3 	rbit	r3, r3
 80055a4:	613b      	str	r3, [r7, #16]
  return result;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80055b0:	2320      	movs	r3, #32
 80055b2:	e003      	b.n	80055bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	fab3 f383 	clz	r3, r3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	210f      	movs	r1, #15
 80055c0:	fa01 f303 	lsl.w	r3, r1, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	401a      	ands	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	0a1b      	lsrs	r3, r3, #8
 80055cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	fa93 f3a3 	rbit	r3, r3
 80055d4:	61fb      	str	r3, [r7, #28]
  return result;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80055e0:	2320      	movs	r3, #32
 80055e2:	e003      	b.n	80055ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	fab3 f383 	clz	r3, r3
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	6879      	ldr	r1, [r7, #4]
 80055f0:	fa01 f303 	lsl.w	r3, r1, r3
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80055fa:	bf00      	nop
 80055fc:	372c      	adds	r7, #44	@ 0x2c
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b088      	sub	sp, #32
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	fa93 f3a3 	rbit	r3, r3
 800561c:	60fb      	str	r3, [r7, #12]
  return result;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d101      	bne.n	800562c <LL_GPIO_Init+0x26>
    return 32U;
 8005628:	2320      	movs	r3, #32
 800562a:	e003      	b.n	8005634 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	fab3 f383 	clz	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8005636:	e048      	b.n	80056ca <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	2101      	movs	r1, #1
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	fa01 f303 	lsl.w	r3, r1, r3
 8005644:	4013      	ands	r3, r2
 8005646:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d03a      	beq.n	80056c4 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d003      	beq.n	800565e <LL_GPIO_Init+0x58>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d10e      	bne.n	800567c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	461a      	mov	r2, r3
 8005664:	69b9      	ldr	r1, [r7, #24]
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff fed7 	bl	800541a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	461a      	mov	r2, r3
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff feb7 	bl	80053ea <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	461a      	mov	r2, r3
 8005682:	69b9      	ldr	r1, [r7, #24]
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f7ff ff05 	bl	8005494 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d111      	bne.n	80056b6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2bff      	cmp	r3, #255	@ 0xff
 8005696:	d807      	bhi.n	80056a8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	461a      	mov	r2, r3
 800569e:	69b9      	ldr	r1, [r7, #24]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ff34 	bl	800550e <LL_GPIO_SetAFPin_0_7>
 80056a6:	e006      	b.n	80056b6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	461a      	mov	r2, r3
 80056ae:	69b9      	ldr	r1, [r7, #24]
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff ff69 	bl	8005588 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	461a      	mov	r2, r3
 80056bc:	69b9      	ldr	r1, [r7, #24]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fe56 	bl	8005370 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	3301      	adds	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	fa22 f303 	lsr.w	r3, r2, r3
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1af      	bne.n	8005638 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e2:	b084      	sub	sp, #16
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	f107 001c 	add.w	r0, r7, #28
 80056f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fa69 	bl	8005bd8 <USB_CoreReset>
 8005706:	4603      	mov	r3, r0
 8005708:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800570a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800570e:	2b00      	cmp	r3, #0
 8005710:	d106      	bne.n	8005720 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005716:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	639a      	str	r2, [r3, #56]	@ 0x38
 800571e:	e005      	b.n	800572c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005738:	b004      	add	sp, #16
 800573a:	4770      	bx	lr

0800573c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f023 0201 	bic.w	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d115      	bne.n	80057ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800578c:	200a      	movs	r0, #10
 800578e:	f7fc fbd3 	bl	8001f38 <HAL_Delay>
      ms += 10U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	330a      	adds	r3, #10
 8005796:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fa0f 	bl	8005bbc <USB_GetMode>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d01e      	beq.n	80057e2 <USB_SetCurrentMode+0x84>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80057a8:	d9f0      	bls.n	800578c <USB_SetCurrentMode+0x2e>
 80057aa:	e01a      	b.n	80057e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d115      	bne.n	80057de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80057be:	200a      	movs	r0, #10
 80057c0:	f7fc fbba 	bl	8001f38 <HAL_Delay>
      ms += 10U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	330a      	adds	r3, #10
 80057c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f000 f9f6 	bl	8005bbc <USB_GetMode>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d005      	beq.n	80057e2 <USB_SetCurrentMode+0x84>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80057da:	d9f0      	bls.n	80057be <USB_SetCurrentMode+0x60>
 80057dc:	e001      	b.n	80057e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e005      	b.n	80057ee <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2bc8      	cmp	r3, #200	@ 0xc8
 80057e6:	d101      	bne.n	80057ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057f8:	b084      	sub	sp, #16
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005812:	2300      	movs	r3, #0
 8005814:	613b      	str	r3, [r7, #16]
 8005816:	e009      	b.n	800582c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	3340      	adds	r3, #64	@ 0x40
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	2200      	movs	r2, #0
 8005824:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	3301      	adds	r3, #1
 800582a:	613b      	str	r3, [r7, #16]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b0e      	cmp	r3, #14
 8005830:	d9f2      	bls.n	8005818 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005832:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005836:	2b00      	cmp	r3, #0
 8005838:	d11c      	bne.n	8005874 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005848:	f043 0302 	orr.w	r3, r3, #2
 800584c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	e005      	b.n	8005880 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005878:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005886:	461a      	mov	r2, r3
 8005888:	2300      	movs	r3, #0
 800588a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800588c:	2103      	movs	r1, #3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f95a 	bl	8005b48 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005894:	2110      	movs	r1, #16
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f8f6 	bl	8005a88 <USB_FlushTxFifo>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f920 	bl	8005aec <USB_FlushRxFifo>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058bc:	461a      	mov	r2, r3
 80058be:	2300      	movs	r3, #0
 80058c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c8:	461a      	mov	r2, r3
 80058ca:	2300      	movs	r3, #0
 80058cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d4:	461a      	mov	r2, r3
 80058d6:	2300      	movs	r3, #0
 80058d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058da:	2300      	movs	r3, #0
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	e043      	b.n	8005968 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058f6:	d118      	bne.n	800592a <USB_DevInit+0x132>
    {
      if (i == 0U)
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800590a:	461a      	mov	r2, r3
 800590c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e013      	b.n	800593c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005920:	461a      	mov	r2, r3
 8005922:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	e008      	b.n	800593c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005936:	461a      	mov	r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800595a:	461a      	mov	r2, r3
 800595c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005960:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3301      	adds	r3, #1
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800596c:	461a      	mov	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4293      	cmp	r3, r2
 8005972:	d3b5      	bcc.n	80058e0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005974:	2300      	movs	r3, #0
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	e043      	b.n	8005a02 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800598c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005990:	d118      	bne.n	80059c4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059a4:	461a      	mov	r2, r3
 80059a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	e013      	b.n	80059d6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ba:	461a      	mov	r2, r3
 80059bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	e008      	b.n	80059d6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	461a      	mov	r2, r3
 80059d2:	2300      	movs	r3, #0
 80059d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e2:	461a      	mov	r2, r3
 80059e4:	2300      	movs	r3, #0
 80059e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f4:	461a      	mov	r2, r3
 80059f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	3301      	adds	r3, #1
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a06:	461a      	mov	r2, r3
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d3b5      	bcc.n	800597a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a20:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005a2e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f043 0210 	orr.w	r2, r3, #16
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699a      	ldr	r2, [r3, #24]
 8005a40:	4b10      	ldr	r3, [pc, #64]	@ (8005a84 <USB_DevInit+0x28c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d005      	beq.n	8005a5c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	f043 0208 	orr.w	r2, r3, #8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d107      	bne.n	8005a74 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a6c:	f043 0304 	orr.w	r3, r3, #4
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a80:	b004      	add	sp, #16
 8005a82:	4770      	bx	lr
 8005a84:	803c3800 	.word	0x803c3800

08005a88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005aa2:	d901      	bls.n	8005aa8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e01b      	b.n	8005ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	daf2      	bge.n	8005a96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	019b      	lsls	r3, r3, #6
 8005ab8:	f043 0220 	orr.w	r2, r3, #32
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005acc:	d901      	bls.n	8005ad2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e006      	b.n	8005ae0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b20      	cmp	r3, #32
 8005adc:	d0f0      	beq.n	8005ac0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b085      	sub	sp, #20
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	3301      	adds	r3, #1
 8005afc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b04:	d901      	bls.n	8005b0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e018      	b.n	8005b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	daf2      	bge.n	8005af8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2210      	movs	r2, #16
 8005b1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b28:	d901      	bls.n	8005b2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e006      	b.n	8005b3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b10      	cmp	r3, #16
 8005b38:	d0f0      	beq.n	8005b1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	460b      	mov	r3, r1
 8005b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	68f9      	ldr	r1, [r7, #12]
 8005b64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b94:	f023 0303 	bic.w	r3, r3, #3
 8005b98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ba8:	f043 0302 	orr.w	r3, r3, #2
 8005bac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3714      	adds	r7, #20
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bf0:	d901      	bls.n	8005bf6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e01b      	b.n	8005c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	daf2      	bge.n	8005be4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	3301      	adds	r3, #1
 8005c12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c1a:	d901      	bls.n	8005c20 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e006      	b.n	8005c2e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d0f0      	beq.n	8005c0e <USB_CoreReset+0x36>

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
	...

08005c3c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005c44:	4b10      	ldr	r3, [pc, #64]	@ (8005c88 <LL_mDelay+0x4c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8005c4e:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c56:	d00c      	beq.n	8005c72 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8005c5e:	e008      	b.n	8005c72 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8005c60:	4b09      	ldr	r3, [pc, #36]	@ (8005c88 <LL_mDelay+0x4c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f3      	bne.n	8005c60 <LL_mDelay+0x24>
    }
  }
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	e000e010 	.word	0xe000e010

08005c8c <memset>:
 8005c8c:	4402      	add	r2, r0
 8005c8e:	4603      	mov	r3, r0
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d100      	bne.n	8005c96 <memset+0xa>
 8005c94:	4770      	bx	lr
 8005c96:	f803 1b01 	strb.w	r1, [r3], #1
 8005c9a:	e7f9      	b.n	8005c90 <memset+0x4>

08005c9c <__libc_init_array>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4d0d      	ldr	r5, [pc, #52]	@ (8005cd4 <__libc_init_array+0x38>)
 8005ca0:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd8 <__libc_init_array+0x3c>)
 8005ca2:	1b64      	subs	r4, r4, r5
 8005ca4:	10a4      	asrs	r4, r4, #2
 8005ca6:	2600      	movs	r6, #0
 8005ca8:	42a6      	cmp	r6, r4
 8005caa:	d109      	bne.n	8005cc0 <__libc_init_array+0x24>
 8005cac:	4d0b      	ldr	r5, [pc, #44]	@ (8005cdc <__libc_init_array+0x40>)
 8005cae:	4c0c      	ldr	r4, [pc, #48]	@ (8005ce0 <__libc_init_array+0x44>)
 8005cb0:	f000 f818 	bl	8005ce4 <_init>
 8005cb4:	1b64      	subs	r4, r4, r5
 8005cb6:	10a4      	asrs	r4, r4, #2
 8005cb8:	2600      	movs	r6, #0
 8005cba:	42a6      	cmp	r6, r4
 8005cbc:	d105      	bne.n	8005cca <__libc_init_array+0x2e>
 8005cbe:	bd70      	pop	{r4, r5, r6, pc}
 8005cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc4:	4798      	blx	r3
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7ee      	b.n	8005ca8 <__libc_init_array+0xc>
 8005cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cce:	4798      	blx	r3
 8005cd0:	3601      	adds	r6, #1
 8005cd2:	e7f2      	b.n	8005cba <__libc_init_array+0x1e>
 8005cd4:	08005d4c 	.word	0x08005d4c
 8005cd8:	08005d4c 	.word	0x08005d4c
 8005cdc:	08005d4c 	.word	0x08005d4c
 8005ce0:	08005d50 	.word	0x08005d50

08005ce4 <_init>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	bf00      	nop
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr

08005cf0 <_fini>:
 8005cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf2:	bf00      	nop
 8005cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf6:	bc08      	pop	{r3}
 8005cf8:	469e      	mov	lr, r3
 8005cfa:	4770      	bx	lr
