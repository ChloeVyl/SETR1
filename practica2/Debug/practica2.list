
practica2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c5c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005de4  08005de4  00006de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e2c  08005e2c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e2c  08005e2c  00006e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e34  08005e34  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e34  08005e34  00006e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e38  08005e38  00006e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005e3c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000774  2000000c  08005e48  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08005e48  00007780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a10  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000379e  00000000  00000000  00020a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b0  00000000  00000000  000241f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001311  00000000  00000000  00025aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296df  00000000  00000000  00026db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bf67  00000000  00000000  00050490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faa12  00000000  00000000  0006c3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00166e09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069b0  00000000  00000000  00166e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  0016d7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005dcc 	.word	0x08005dcc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005dcc 	.word	0x08005dcc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	619a      	str	r2, [r3, #24]
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
    // Pulse clock
    LL_GPIO_SetOutputPin(CLOCK_PORT, LCD_CLOCK);
 80004f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fc:	f7ff ffdc 	bl	80004b8 <LL_GPIO_SetOutputPin>
    LL_mDelay(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f005 fc0f 	bl	8005d24 <LL_mDelay>
    LL_GPIO_ResetOutputPin(CLOCK_PORT, LCD_CLOCK);
 8000506:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800050a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050e:	f7ff ffe1 	bl	80004d4 <LL_GPIO_ResetOutputPin>
     //LL_mDelay(1);
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <lcd_reset>:

void lcd_reset(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
    LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 800051c:	2104      	movs	r1, #4
 800051e:	4817      	ldr	r0, [pc, #92]	@ (800057c <lcd_reset+0x64>)
 8000520:	f7ff ffd8 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT7,  LCD_7);
 8000524:	2110      	movs	r1, #16
 8000526:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800052a:	f7ff ffd3 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT4,  LCD_4);
 800052e:	2108      	movs	r1, #8
 8000530:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000534:	f7ff ffce 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(LCD_PORT56,  LCD_5 | LCD_6);
 8000538:	2112      	movs	r1, #18
 800053a:	4810      	ldr	r0, [pc, #64]	@ (800057c <lcd_reset+0x64>)
 800053c:	f7ff ffca 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin(CLOCK_PORT,  LCD_CLOCK );
 8000540:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f7ff ffc4 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
    LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4 );
 800054c:	2108      	movs	r1, #8
 800054e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000552:	f7ff ffb1 	bl	80004b8 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5 );
 8000556:	2110      	movs	r1, #16
 8000558:	4808      	ldr	r0, [pc, #32]	@ (800057c <lcd_reset+0x64>)
 800055a:	f7ff ffad 	bl	80004b8 <LL_GPIO_SetOutputPin>
    lcd_clock();
 800055e:	f7ff ffc7 	bl	80004f0 <lcd_clock>
    lcd_clock();
 8000562:	f7ff ffc5 	bl	80004f0 <lcd_clock>
    lcd_clock();
 8000566:	f7ff ffc3 	bl	80004f0 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 800056a:	2108      	movs	r1, #8
 800056c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000570:	f7ff ffb0 	bl	80004d4 <LL_GPIO_ResetOutputPin>
    lcd_clock();
 8000574:	f7ff ffbc 	bl	80004f0 <lcd_clock>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	48000400 	.word	0x48000400

08000580 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	460a      	mov	r2, r1
 800058a:	71fb      	strb	r3, [r7, #7]
 800058c:	4613      	mov	r3, r2
 800058e:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	091b      	lsrs	r3, r3, #4
 8000594:	b2db      	uxtb	r3, r3
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	2b00      	cmp	r3, #0
 800059c:	d005      	beq.n	80005aa <lcd_write+0x2a>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 800059e:	2108      	movs	r1, #8
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a4:	f7ff ff88 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80005a8:	e004      	b.n	80005b4 <lcd_write+0x34>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 80005aa:	2108      	movs	r1, #8
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f7ff ff90 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 5 ) & 1)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	095b      	lsrs	r3, r3, #5
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d004      	beq.n	80005cc <lcd_write+0x4c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 80005c2:	2110      	movs	r1, #16
 80005c4:	483f      	ldr	r0, [pc, #252]	@ (80006c4 <lcd_write+0x144>)
 80005c6:	f7ff ff77 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80005ca:	e003      	b.n	80005d4 <lcd_write+0x54>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 80005cc:	2110      	movs	r1, #16
 80005ce:	483d      	ldr	r0, [pc, #244]	@ (80006c4 <lcd_write+0x144>)
 80005d0:	f7ff ff80 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 6 ) & 1)
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	099b      	lsrs	r3, r3, #6
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d004      	beq.n	80005ec <lcd_write+0x6c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 80005e2:	2102      	movs	r1, #2
 80005e4:	4837      	ldr	r0, [pc, #220]	@ (80006c4 <lcd_write+0x144>)
 80005e6:	f7ff ff67 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80005ea:	e003      	b.n	80005f4 <lcd_write+0x74>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 80005ec:	2102      	movs	r1, #2
 80005ee:	4835      	ldr	r0, [pc, #212]	@ (80006c4 <lcd_write+0x144>)
 80005f0:	f7ff ff70 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 7 ) & 1)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	09db      	lsrs	r3, r3, #7
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d005      	beq.n	800060e <lcd_write+0x8e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 8000602:	2110      	movs	r1, #16
 8000604:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000608:	f7ff ff56 	bl	80004b8 <LL_GPIO_SetOutputPin>
 800060c:	e004      	b.n	8000618 <lcd_write+0x98>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 800060e:	2110      	movs	r1, #16
 8000610:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000614:	f7ff ff5e 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if(rs)
 8000618:	79bb      	ldrb	r3, [r7, #6]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d004      	beq.n	8000628 <lcd_write+0xa8>
        LL_GPIO_SetOutputPin(RS_PORT, LCD_RS);
 800061e:	2104      	movs	r1, #4
 8000620:	4828      	ldr	r0, [pc, #160]	@ (80006c4 <lcd_write+0x144>)
 8000622:	f7ff ff49 	bl	80004b8 <LL_GPIO_SetOutputPin>
 8000626:	e003      	b.n	8000630 <lcd_write+0xb0>
    else
        LL_GPIO_ResetOutputPin(RS_PORT, LCD_RS);
 8000628:	2104      	movs	r1, #4
 800062a:	4826      	ldr	r0, [pc, #152]	@ (80006c4 <lcd_write+0x144>)
 800062c:	f7ff ff52 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 8000630:	f7ff ff5e 	bl	80004f0 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	2b00      	cmp	r3, #0
 800063c:	d005      	beq.n	800064a <lcd_write+0xca>
        LL_GPIO_SetOutputPin(LCD_PORT4, LCD_4);
 800063e:	2108      	movs	r1, #8
 8000640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000644:	f7ff ff38 	bl	80004b8 <LL_GPIO_SetOutputPin>
 8000648:	e004      	b.n	8000654 <lcd_write+0xd4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT4, LCD_4);
 800064a:	2108      	movs	r1, #8
 800064c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000650:	f7ff ff40 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 1 ) & 1)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	085b      	lsrs	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	2b00      	cmp	r3, #0
 8000660:	d004      	beq.n	800066c <lcd_write+0xec>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_5);
 8000662:	2110      	movs	r1, #16
 8000664:	4817      	ldr	r0, [pc, #92]	@ (80006c4 <lcd_write+0x144>)
 8000666:	f7ff ff27 	bl	80004b8 <LL_GPIO_SetOutputPin>
 800066a:	e003      	b.n	8000674 <lcd_write+0xf4>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_5);
 800066c:	2110      	movs	r1, #16
 800066e:	4815      	ldr	r0, [pc, #84]	@ (80006c4 <lcd_write+0x144>)
 8000670:	f7ff ff30 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 2 ) & 1)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	089b      	lsrs	r3, r3, #2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	2b00      	cmp	r3, #0
 8000680:	d004      	beq.n	800068c <lcd_write+0x10c>
        LL_GPIO_SetOutputPin(LCD_PORT56, LCD_6);
 8000682:	2102      	movs	r1, #2
 8000684:	480f      	ldr	r0, [pc, #60]	@ (80006c4 <lcd_write+0x144>)
 8000686:	f7ff ff17 	bl	80004b8 <LL_GPIO_SetOutputPin>
 800068a:	e003      	b.n	8000694 <lcd_write+0x114>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT56, LCD_6);
 800068c:	2102      	movs	r1, #2
 800068e:	480d      	ldr	r0, [pc, #52]	@ (80006c4 <lcd_write+0x144>)
 8000690:	f7ff ff20 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    if((byte >> 3 ) & 1)
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	08db      	lsrs	r3, r3, #3
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d005      	beq.n	80006ae <lcd_write+0x12e>
        LL_GPIO_SetOutputPin(LCD_PORT7, LCD_7);
 80006a2:	2110      	movs	r1, #16
 80006a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006a8:	f7ff ff06 	bl	80004b8 <LL_GPIO_SetOutputPin>
 80006ac:	e004      	b.n	80006b8 <lcd_write+0x138>
    else
        LL_GPIO_ResetOutputPin(LCD_PORT7, LCD_7);
 80006ae:	2110      	movs	r1, #16
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006b4:	f7ff ff0e 	bl	80004d4 <LL_GPIO_ResetOutputPin>

    lcd_clock();
 80006b8:	f7ff ff1a 	bl	80004f0 <lcd_clock>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	48000400 	.word	0x48000400

080006c8 <lcd_clear>:

void lcd_clear(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 80006cc:	2100      	movs	r1, #0
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff ff56 	bl	8000580 <lcd_write>
    _lcd_char = 0;
 80006d4:	4b03      	ldr	r3, [pc, #12]	@ (80006e4 <lcd_clear+0x1c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 80006da:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <lcd_clear+0x20>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000028 	.word	0x20000028
 80006e8:	20000029 	.word	0x20000029

080006ec <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	460b      	mov	r3, r1
 80006f8:	71bb      	strb	r3, [r7, #6]
 80006fa:	4613      	mov	r3, r2
 80006fc:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	b25b      	sxtb	r3, r3
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	b25a      	sxtb	r2, r3
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	b25b      	sxtb	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b25a      	sxtb	r2, r3
 8000714:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000718:	4313      	orrs	r3, r2
 800071a:	b25b      	sxtb	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff2d 	bl	8000580 <lcd_write>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}

0800072e <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 800072e:	b580      	push	{r7, lr}
 8000730:	b082      	sub	sp, #8
 8000732:	af00      	add	r7, sp, #0
 8000734:	4603      	mov	r3, r0
 8000736:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff ff1c 	bl	8000580 <lcd_write>
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}

08000750 <lcd_cgram_address>:

void lcd_cgram_address(uint8_t address)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	lcd_write(0b01000000 | address, 0);
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff ff0b 	bl	8000580 <lcd_write>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <moveToXY>:
	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
	lcd_write( ones + 0x30,1);
}

void moveToXY(unsigned char row, unsigned char column)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	460a      	mov	r2, r1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	4613      	mov	r3, r2
 8000782:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	011a      	lsls	r2, r3, #4
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	dc0a      	bgt.n	80007aa <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	b25b      	sxtb	r3, r3
 8000798:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800079c:	b25b      	sxtb	r3, r3
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff feec 	bl	8000580 <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 80007a8:	e059      	b.n	800085e <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	dd17      	ble.n	80007e0 <moveToXY+0x6c>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b1f      	cmp	r3, #31
 80007b4:	dc14      	bgt.n	80007e0 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	425a      	negs	r2, r3
 80007ba:	f003 030f 	and.w	r3, r3, #15
 80007be:	f002 020f 	and.w	r2, r2, #15
 80007c2:	bf58      	it	pl
 80007c4:	4253      	negpl	r3, r2
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3340      	adds	r3, #64	@ 0x40
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80007d2:	b25b      	sxtb	r3, r3
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fed1 	bl	8000580 <lcd_write>
 80007de:	e03e      	b.n	800085e <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	2b28      	cmp	r3, #40	@ 0x28
 80007e4:	dd1b      	ble.n	800081e <moveToXY+0xaa>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	2b3b      	cmp	r3, #59	@ 0x3b
 80007ea:	dc18      	bgt.n	800081e <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <moveToXY+0xf4>)
 80007f0:	fb83 1302 	smull	r1, r3, r3, r2
 80007f4:	1119      	asrs	r1, r3, #4
 80007f6:	17d3      	asrs	r3, r2, #31
 80007f8:	1ac9      	subs	r1, r1, r3
 80007fa:	460b      	mov	r3, r1
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	440b      	add	r3, r1
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	1ad1      	subs	r1, r2, r3
 8000804:	b2cb      	uxtb	r3, r1
 8000806:	3314      	adds	r3, #20
 8000808:	b2db      	uxtb	r3, r3
 800080a:	b25b      	sxtb	r3, r3
 800080c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000810:	b25b      	sxtb	r3, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff feb2 	bl	8000580 <lcd_write>
 800081c:	e01f      	b.n	800085e <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b13      	cmp	r3, #19
 8000822:	dd1c      	ble.n	800085e <moveToXY+0xea>
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b27      	cmp	r3, #39	@ 0x27
 8000828:	dc19      	bgt.n	800085e <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <moveToXY+0xf8>)
 800082e:	fb83 1302 	smull	r1, r3, r3, r2
 8000832:	4413      	add	r3, r2
 8000834:	1159      	asrs	r1, r3, #5
 8000836:	17d3      	asrs	r3, r2, #31
 8000838:	1ac9      	subs	r1, r1, r3
 800083a:	460b      	mov	r3, r1
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	1a5b      	subs	r3, r3, r1
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	1ad1      	subs	r1, r2, r3
 8000844:	b2cb      	uxtb	r3, r1
 8000846:	3354      	adds	r3, #84	@ 0x54
 8000848:	b2db      	uxtb	r3, r3
 800084a:	b25b      	sxtb	r3, r3
 800084c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000850:	b25b      	sxtb	r3, r3
 8000852:	b2db      	uxtb	r3, r3
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe92 	bl	8000580 <lcd_write>
}
 800085c:	e7ff      	b.n	800085e <moveToXY+0xea>
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	66666667 	.word	0x66666667
 800086c:	88888889 	.word	0x88888889

08000870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000874:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <__NVIC_GetPriorityGrouping+0x18>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	0a1b      	lsrs	r3, r3, #8
 800087a:	f003 0307 	and.w	r3, r3, #7
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089a:	2b00      	cmp	r3, #0
 800089c:	db0b      	blt.n	80008b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	f003 021f 	and.w	r2, r3, #31
 80008a4:	4907      	ldr	r1, [pc, #28]	@ (80008c4 <__NVIC_EnableIRQ+0x38>)
 80008a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008aa:	095b      	lsrs	r3, r3, #5
 80008ac:	2001      	movs	r0, #1
 80008ae:	fa00 f202 	lsl.w	r2, r0, r2
 80008b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	@ (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	@ (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	@ 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f003 0307 	and.w	r3, r3, #7
 800092e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2b04      	cmp	r3, #4
 8000938:	bf28      	it	cs
 800093a:	2304      	movcs	r3, #4
 800093c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	3304      	adds	r3, #4
 8000942:	2b06      	cmp	r3, #6
 8000944:	d902      	bls.n	800094c <NVIC_EncodePriority+0x30>
 8000946:	69fb      	ldr	r3, [r7, #28]
 8000948:	3b03      	subs	r3, #3
 800094a:	e000      	b.n	800094e <NVIC_EncodePriority+0x32>
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	f04f 32ff 	mov.w	r2, #4294967295
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43da      	mvns	r2, r3
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000964:	f04f 31ff 	mov.w	r1, #4294967295
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	43d9      	mvns	r1, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	4313      	orrs	r3, r2
         );
}
 8000976:	4618      	mov	r0, r3
 8000978:	3724      	adds	r7, #36	@ 0x24
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
	...

08000984 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000984:	b480      	push	{r7}
 8000986:	b087      	sub	sp, #28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x03U], (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), Port << POSITION_VAL((Line >> LL_EXTI_REGISTER_PINPOS_SHFT)));
 800098e:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <LL_SYSCFG_SetEXTISource+0x6c>)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	3302      	adds	r3, #2
 8000998:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	0c1b      	lsrs	r3, r3, #16
 80009a0:	43db      	mvns	r3, r3
 80009a2:	ea02 0103 	and.w	r1, r2, r3
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	0c1b      	lsrs	r3, r3, #16
 80009aa:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	fa93 f3a3 	rbit	r3, r3
 80009b2:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <LL_SYSCFG_SetEXTISource+0x3e>
  {
    return 32U;
 80009be:	2320      	movs	r3, #32
 80009c0:	e003      	b.n	80009ca <LL_SYSCFG_SetEXTISource+0x46>
  }
  return __builtin_clz(value);
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	fa03 f202 	lsl.w	r2, r3, r2
 80009d2:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <LL_SYSCFG_SetEXTISource+0x6c>)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	430a      	orrs	r2, r1
 80009dc:	3302      	adds	r3, #2
 80009de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80009e2:	bf00      	nop
 80009e4:	371c      	adds	r7, #28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40010000 	.word	0x40010000

080009f4 <LL_GPIO_SetPinMode>:
{
 80009f4:	b480      	push	{r7}
 80009f6:	b08b      	sub	sp, #44	@ 0x2c
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa93 f3a3 	rbit	r3, r3
 8000a0e:	613b      	str	r3, [r7, #16]
  return result;
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000a1a:	2320      	movs	r3, #32
 8000a1c:	e003      	b.n	8000a26 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	fab3 f383 	clz	r3, r3
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	2103      	movs	r1, #3
 8000a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2e:	43db      	mvns	r3, r3
 8000a30:	401a      	ands	r2, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	fa93 f3a3 	rbit	r3, r3
 8000a3c:	61fb      	str	r3, [r7, #28]
  return result;
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d101      	bne.n	8000a4c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000a48:	2320      	movs	r3, #32
 8000a4a:	e003      	b.n	8000a54 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4e:	fab3 f383 	clz	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5c:	431a      	orrs	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	601a      	str	r2, [r3, #0]
}
 8000a62:	bf00      	nop
 8000a64:	372c      	adds	r7, #44	@ 0x2c
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <LL_GPIO_SetPinPull>:
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b08b      	sub	sp, #44	@ 0x2c
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	60f8      	str	r0, [r7, #12]
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	68da      	ldr	r2, [r3, #12]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	fa93 f3a3 	rbit	r3, r3
 8000a88:	613b      	str	r3, [r7, #16]
  return result;
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d101      	bne.n	8000a98 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000a94:	2320      	movs	r3, #32
 8000a96:	e003      	b.n	8000aa0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	fab3 f383 	clz	r3, r3
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	2103      	movs	r1, #3
 8000aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	401a      	ands	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	fa93 f3a3 	rbit	r3, r3
 8000ab6:	61fb      	str	r3, [r7, #28]
  return result;
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	e003      	b.n	8000ace <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac8:	fab3 f383 	clz	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	6879      	ldr	r1, [r7, #4]
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	60da      	str	r2, [r3, #12]
}
 8000adc:	bf00      	nop
 8000ade:	372c      	adds	r7, #44	@ 0x2c
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <LL_GPIO_EnablePinAnalogControl>:
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
  SET_BIT(GPIOx->ASCR, PinMask);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_GPIO_WriteOutputPort>:
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
 8000b12:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, PortValue);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	615a      	str	r2, [r3, #20]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <LL_GPIO_SetOutputPin>:
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
 8000b2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	619a      	str	r2, [r3, #24]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <LL_GPIO_ResetOutputPin>:
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b6c:	4907      	ldr	r1, [pc, #28]	@ (8000b8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b74:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000b76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
}
 8000b80:	bf00      	nop
 8000b82:	3714      	adds	r7, #20
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	40021000 	.word	0x40021000

08000b90 <snake_down2.1>:

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
void snake_down2(int i){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	f8c7 c000 	str.w	ip, [r7]
	moveToXY(0, i);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff fde6 	bl	8000774 <moveToXY>
	lcd_write(3, 1);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	2003      	movs	r0, #3
 8000bac:	f7ff fce8 	bl	8000580 <lcd_write>
	moveToXY(0, i+1);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff fdda 	bl	8000774 <moveToXY>
	lcd_write(1, 1);
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f7ff fcdc 	bl	8000580 <lcd_write>
	moveToXY(0, i+2);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	3302      	adds	r3, #2
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f7ff fdce 	bl	8000774 <moveToXY>
	lcd_write(0, 1);
 8000bd8:	2101      	movs	r1, #1
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fcd0 	bl	8000580 <lcd_write>
	moveToXY(0, i+3);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	3303      	adds	r3, #3
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	4619      	mov	r1, r3
 8000bea:	2000      	movs	r0, #0
 8000bec:	f7ff fdc2 	bl	8000774 <moveToXY>
	lcd_write(1, 1);
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f7ff fcc4 	bl	8000580 <lcd_write>
	moveToXY(0, i+4);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4619      	mov	r1, r3
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fdb6 	bl	8000774 <moveToXY>
	lcd_write(2, 1);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	2002      	movs	r0, #2
 8000c0c:	f7ff fcb8 	bl	8000580 <lcd_write>
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <main>:
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
int main(void)
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	603b      	str	r3, [r7, #0]
  HAL_Init();
 8000c24:	f001 f987 	bl	8001f36 <HAL_Init>
  SystemClock_Config();
 8000c28:	f000 f912 	bl	8000e50 <SystemClock_Config>
  MX_GPIO_Init();
 8000c2c:	f000 fadc 	bl	80011e8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000c30:	f000 f970 	bl	8000f14 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000c34:	f000 f9a6 	bl	8000f84 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000c38:	f000 f9e4 	bl	8001004 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000c3c:	f000 fa08 	bl	8001050 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000c40:	f000 fa44 	bl	80010cc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000c44:	f000 fa72 	bl	800112c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c48:	f000 faa0 	bl	800118c <MX_USB_OTG_FS_PCD_Init>
 LL_GPIO_WriteOutputPort(GPIOA, Led_LCD_Pin);
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c52:	f7ff ff5a 	bl	8000b0a <LL_GPIO_WriteOutputPort>
 lcd_reset();
 8000c56:	f7ff fc5f 	bl	8000518 <lcd_reset>
 lcd_display_settings(1,0,0);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fd44 	bl	80006ec <lcd_display_settings>
 lcd_clear();
 8000c64:	f7ff fd30 	bl	80006c8 <lcd_clear>
	lcd_write(0, 1);
	moveToXY(0, i+4);
	lcd_write(2, 1);
}

 lcd_cgram_address(0);
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f7ff fd71 	bl	8000750 <lcd_cgram_address>
  lcd_write(0x1F, 1);
 8000c6e:	2101      	movs	r1, #1
 8000c70:	201f      	movs	r0, #31
 8000c72:	f7ff fc85 	bl	8000580 <lcd_write>
  lcd_write(0x00, 1);
 8000c76:	2101      	movs	r1, #1
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fc81 	bl	8000580 <lcd_write>
  lcd_write(0x06, 1);
 8000c7e:	2101      	movs	r1, #1
 8000c80:	2006      	movs	r0, #6
 8000c82:	f7ff fc7d 	bl	8000580 <lcd_write>
  lcd_write(0x08, 1);
 8000c86:	2101      	movs	r1, #1
 8000c88:	2008      	movs	r0, #8
 8000c8a:	f7ff fc79 	bl	8000580 <lcd_write>
  lcd_write(0x06, 1);
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2006      	movs	r0, #6
 8000c92:	f7ff fc75 	bl	8000580 <lcd_write>
  lcd_write(0x00, 1);
 8000c96:	2101      	movs	r1, #1
 8000c98:	2000      	movs	r0, #0
 8000c9a:	f7ff fc71 	bl	8000580 <lcd_write>
  lcd_write(0x1F, 1);
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	201f      	movs	r0, #31
 8000ca2:	f7ff fc6d 	bl	8000580 <lcd_write>
  lcd_write(0x00, 1);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f7ff fc69 	bl	8000580 <lcd_write>


  lcd_cgram_address(8);
 8000cae:	2008      	movs	r0, #8
 8000cb0:	f7ff fd4e 	bl	8000750 <lcd_cgram_address>
   lcd_write(0x00, 1);
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff fc62 	bl	8000580 <lcd_write>
   lcd_write(0x1F, 1);
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	201f      	movs	r0, #31
 8000cc0:	f7ff fc5e 	bl	8000580 <lcd_write>
   lcd_write(0x00, 1);
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fc5a 	bl	8000580 <lcd_write>
   lcd_write(0x06, 1);
 8000ccc:	2101      	movs	r1, #1
 8000cce:	2006      	movs	r0, #6
 8000cd0:	f7ff fc56 	bl	8000580 <lcd_write>
   lcd_write(0x08, 1);
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	2008      	movs	r0, #8
 8000cd8:	f7ff fc52 	bl	8000580 <lcd_write>
   lcd_write(0x06, 1);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2006      	movs	r0, #6
 8000ce0:	f7ff fc4e 	bl	8000580 <lcd_write>
   lcd_write(0x00, 1);
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff fc4a 	bl	8000580 <lcd_write>
   lcd_write(0x1F, 1);
 8000cec:	2101      	movs	r1, #1
 8000cee:	201f      	movs	r0, #31
 8000cf0:	f7ff fc46 	bl	8000580 <lcd_write>

   lcd_cgram_address(16);
 8000cf4:	2010      	movs	r0, #16
 8000cf6:	f7ff fd2b 	bl	8000750 <lcd_cgram_address>
    lcd_write(0x1e, 1);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	201e      	movs	r0, #30
 8000cfe:	f7ff fc3f 	bl	8000580 <lcd_write>
    lcd_write(0x01, 1);
 8000d02:	2101      	movs	r1, #1
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fc3b 	bl	8000580 <lcd_write>
    lcd_write(0x05, 1);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2005      	movs	r0, #5
 8000d0e:	f7ff fc37 	bl	8000580 <lcd_write>
    lcd_write(0x05, 1);
 8000d12:	2101      	movs	r1, #1
 8000d14:	2005      	movs	r0, #5
 8000d16:	f7ff fc33 	bl	8000580 <lcd_write>
    lcd_write(0x01, 1);
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fc2f 	bl	8000580 <lcd_write>
    lcd_write(0x01, 1);
 8000d22:	2101      	movs	r1, #1
 8000d24:	2001      	movs	r0, #1
 8000d26:	f7ff fc2b 	bl	8000580 <lcd_write>
    lcd_write(0x1e, 1);
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	201e      	movs	r0, #30
 8000d2e:	f7ff fc27 	bl	8000580 <lcd_write>
    lcd_write(0x00, 1);
 8000d32:	2101      	movs	r1, #1
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff fc23 	bl	8000580 <lcd_write>

    lcd_cgram_address(24);
 8000d3a:	2018      	movs	r0, #24
 8000d3c:	f7ff fd08 	bl	8000750 <lcd_cgram_address>
    lcd_write(0x07, 1);
 8000d40:	2101      	movs	r1, #1
 8000d42:	2007      	movs	r0, #7
 8000d44:	f7ff fc1c 	bl	8000580 <lcd_write>
    lcd_write(0x08, 1);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	2008      	movs	r0, #8
 8000d4c:	f7ff fc18 	bl	8000580 <lcd_write>
    lcd_write(0x10, 1);
 8000d50:	2101      	movs	r1, #1
 8000d52:	2010      	movs	r0, #16
 8000d54:	f7ff fc14 	bl	8000580 <lcd_write>
    lcd_write(0x10, 1);
 8000d58:	2101      	movs	r1, #1
 8000d5a:	2010      	movs	r0, #16
 8000d5c:	f7ff fc10 	bl	8000580 <lcd_write>
    lcd_write(0x10, 1);
 8000d60:	2101      	movs	r1, #1
 8000d62:	2010      	movs	r0, #16
 8000d64:	f7ff fc0c 	bl	8000580 <lcd_write>
    lcd_write(0x10, 1);
 8000d68:	2101      	movs	r1, #1
 8000d6a:	2010      	movs	r0, #16
 8000d6c:	f7ff fc08 	bl	8000580 <lcd_write>
    lcd_write(0x08, 1);
 8000d70:	2101      	movs	r1, #1
 8000d72:	2008      	movs	r0, #8
 8000d74:	f7ff fc04 	bl	8000580 <lcd_write>
    lcd_write(0x07, 1);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	2007      	movs	r0, #7
 8000d7c:	f7ff fc00 	bl	8000580 <lcd_write>
//	lcd_write(0x15, 1);
//	lcd_write(0xa, 1);
//	lcd_write(0xa, 1);
//	lcd_write(0x00, 1);

   lcd_display_address(0);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fcd4 	bl	800072e <lcd_display_address>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int l = 0; l<32; l++){
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	e018      	b.n	8000dbe <main+0x1a6>

		  lcd_clear();
 8000d8c:	f7ff fc9c 	bl	80006c8 <lcd_clear>
		  snake_up2(l);
 8000d90:	463b      	mov	r3, r7
 8000d92:	469c      	mov	ip, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 f816 	bl	8000dc6 <snake_up2.0>
		  LL_mDelay(300);
 8000d9a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000d9e:	f004 ffc1 	bl	8005d24 <LL_mDelay>
		  lcd_clear();
 8000da2:	f7ff fc91 	bl	80006c8 <lcd_clear>
		  snake_down2(l);
 8000da6:	463b      	mov	r3, r7
 8000da8:	469c      	mov	ip, r3
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fef0 	bl	8000b90 <snake_down2.1>
		  LL_mDelay(300);
 8000db0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000db4:	f004 ffb6 	bl	8005d24 <LL_mDelay>
	  for(int l = 0; l<32; l++){
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b1f      	cmp	r3, #31
 8000dc2:	dde3      	ble.n	8000d8c <main+0x174>
 8000dc4:	e7df      	b.n	8000d86 <main+0x16e>

08000dc6 <snake_up2.0>:
void snake_up2(int i){
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	f8c7 c000 	str.w	ip, [r7]
	moveToXY(0, i);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff fccb 	bl	8000774 <moveToXY>
	lcd_write(3, 1);
 8000dde:	2101      	movs	r1, #1
 8000de0:	2003      	movs	r0, #3
 8000de2:	f7ff fbcd 	bl	8000580 <lcd_write>
	moveToXY(0, i+1);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4619      	mov	r1, r3
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fcbf 	bl	8000774 <moveToXY>
	lcd_write(0, 1);
 8000df6:	2101      	movs	r1, #1
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff fbc1 	bl	8000580 <lcd_write>
	moveToXY(0, i+2);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3302      	adds	r3, #2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4619      	mov	r1, r3
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fcb3 	bl	8000774 <moveToXY>
	lcd_write(1, 1);
 8000e0e:	2101      	movs	r1, #1
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff fbb5 	bl	8000580 <lcd_write>
	moveToXY(0, i+3);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	3303      	adds	r3, #3
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	4619      	mov	r1, r3
 8000e20:	2000      	movs	r0, #0
 8000e22:	f7ff fca7 	bl	8000774 <moveToXY>
	lcd_write(0, 1);
 8000e26:	2101      	movs	r1, #1
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fba9 	bl	8000580 <lcd_write>
	moveToXY(0, i+4);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	3304      	adds	r3, #4
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4619      	mov	r1, r3
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fc9b 	bl	8000774 <moveToXY>
	lcd_write(2, 1);
 8000e3e:	2101      	movs	r1, #1
 8000e40:	2002      	movs	r0, #2
 8000e42:	f7ff fb9d 	bl	8000580 <lcd_write>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b096      	sub	sp, #88	@ 0x58
 8000e54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	2244      	movs	r2, #68	@ 0x44
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f004 ff88 	bl	8005d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
 8000e70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e76:	f001 ff17 	bl	8002ca8 <HAL_PWREx_ControlVoltageScaling>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e80:	f000 fcb0 	bl	80017e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e84:	f001 fef2 	bl	8002c6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000e88:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <SystemClock_Config+0xc0>)
 8000e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e8e:	4a20      	ldr	r2, [pc, #128]	@ (8000f10 <SystemClock_Config+0xc0>)
 8000e90:	f023 0318 	bic.w	r3, r3, #24
 8000e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000e98:	2314      	movs	r3, #20
 8000e9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ea8:	2360      	movs	r3, #96	@ 0x60
 8000eaa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eac:	2302      	movs	r3, #2
 8000eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000eb8:	2328      	movs	r3, #40	@ 0x28
 8000eba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ebc:	2307      	movs	r3, #7
 8000ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 0314 	add.w	r3, r7, #20
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 f80d 	bl	8002eec <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000ed8:	f000 fc84 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	230f      	movs	r3, #15
 8000ede:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000ee4:	2390      	movs	r3, #144	@ 0x90
 8000ee6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 fbd5 	bl	80036a4 <HAL_RCC_ClockConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000f00:	f000 fc70 	bl	80017e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000f04:	f003 f8dc 	bl	80040c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000f08:	bf00      	nop
 8000f0a:	3758      	adds	r7, #88	@ 0x58
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40021000 	.word	0x40021000

08000f14 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f1a:	4a19      	ldr	r2, [pc, #100]	@ (8000f80 <MX_DFSDM1_Init+0x6c>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f42:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000f56:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <MX_DFSDM1_Init+0x68>)
 8000f6a:	f001 f963 	bl	8002234 <HAL_DFSDM_ChannelInit>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000f74:	f000 fc36 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	2000002c 	.word	0x2000002c
 8000f80:	40016020 	.word	0x40016020

08000f84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <MX_I2C2_Init+0x78>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00604E6E;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000f90:	4a1b      	ldr	r2, [pc, #108]	@ (8001000 <MX_I2C2_Init+0x7c>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000fc0:	f001 fbee 	bl	80027a0 <HAL_I2C_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000fca:	f000 fc0b 	bl	80017e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000fd2:	f001 fc80 	bl	80028d6 <HAL_I2CEx_ConfigAnalogFilter>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fdc:	f000 fc02 	bl	80017e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_I2C2_Init+0x74>)
 8000fe4:	f001 fcc2 	bl	800296c <HAL_I2CEx_ConfigDigitalFilter>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fee:	f000 fbf9 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000064 	.word	0x20000064
 8000ffc:	40005800 	.word	0x40005800
 8001000:	00604e6e 	.word	0x00604e6e

08001004 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_QUADSPI_Init+0x44>)
 800100a:	4a10      	ldr	r2, [pc, #64]	@ (800104c <MX_QUADSPI_Init+0x48>)
 800100c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_QUADSPI_Init+0x44>)
 8001010:	2202      	movs	r2, #2
 8001012:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_QUADSPI_Init+0x44>)
 8001016:	2204      	movs	r2, #4
 8001018:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	@ (8001048 <MX_QUADSPI_Init+0x44>)
 800101c:	2210      	movs	r2, #16
 800101e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001020:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_QUADSPI_Init+0x44>)
 8001022:	2217      	movs	r2, #23
 8001024:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001026:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <MX_QUADSPI_Init+0x44>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800102c:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_QUADSPI_Init+0x44>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <MX_QUADSPI_Init+0x44>)
 8001034:	f001 fe9e 	bl	8002d74 <HAL_QSPI_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800103e:	f000 fbd1 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200000b8 	.word	0x200000b8
 800104c:	a0001000 	.word	0xa0001000

08001050 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001054:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001056:	4a1c      	ldr	r2, [pc, #112]	@ (80010c8 <MX_SPI3_Init+0x78>)
 8001058:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <MX_SPI3_Init+0x74>)
 800105c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001060:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <MX_SPI3_Init+0x74>)
 800106a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800106e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001070:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_SPI3_Init+0x74>)
 800107e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001082:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001084:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_SPI3_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <MX_SPI3_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_SPI3_Init+0x74>)
 800109e:	2207      	movs	r2, #7
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <MX_SPI3_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_SPI3_Init+0x74>)
 80010aa:	2208      	movs	r2, #8
 80010ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <MX_SPI3_Init+0x74>)
 80010b0:	f003 f9e8 	bl	8004484 <HAL_SPI_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80010ba:	f000 fb93 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000fc 	.word	0x200000fc
 80010c8:	40003c00 	.word	0x40003c00

080010cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	@ (8001128 <MX_USART1_UART_Init+0x5c>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_USART1_UART_Init+0x58>)
 8001110:	f003 fa5b 	bl	80045ca <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800111a:	f000 fb63 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000160 	.word	0x20000160
 8001128:	40013800 	.word	0x40013800

0800112c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 8001132:	4a15      	ldr	r2, [pc, #84]	@ (8001188 <MX_USART3_UART_Init+0x5c>)
 8001134:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001136:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0f      	ldr	r3, [pc, #60]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b0c      	ldr	r3, [pc, #48]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_USART3_UART_Init+0x58>)
 8001170:	f003 fa2b 	bl	80045ca <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800117a:	f000 fb33 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200001e8 	.word	0x200001e8
 8001188:	40004800 	.word	0x40004800

0800118c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001192:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001196:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001198:	4b12      	ldr	r3, [pc, #72]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800119a:	2206      	movs	r2, #6
 800119c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a0:	2202      	movs	r2, #2
 80011a2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a6:	2202      	movs	r2, #2
 80011a8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d0:	f001 fc18 	bl	8002a04 <HAL_PCD_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011da:	f000 fb03 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000270 	.word	0x20000270

080011e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
 8001208:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOE);
 800120a:	2010      	movs	r0, #16
 800120c:	f7ff fca8 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001210:	2004      	movs	r0, #4
 8001212:	f7ff fca5 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fca2 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff fc9f 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOD);
 8001222:	2008      	movs	r0, #8
 8001224:	f7ff fc9c 	bl	8000b60 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin);
 8001228:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800122c:	48cd      	ldr	r0, [pc, #820]	@ (8001564 <MX_GPIO_Init+0x37c>)
 800122e:	f7ff fc88 	bl	8000b42 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001232:	f248 111c 	movw	r1, #33052	@ 0x811c
 8001236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123a:	f7ff fc82 	bl	8000b42 <LL_GPIO_ResetOutputPin>
                          |E_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 800123e:	f24f 0116 	movw	r1, #61462	@ 0xf016
 8001242:	48c9      	ldr	r0, [pc, #804]	@ (8001568 <MX_GPIO_Init+0x380>)
 8001244:	f7ff fc7d 	bl	8000b42 <LL_GPIO_ResetOutputPin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin);
 8001248:	f241 0181 	movw	r1, #4225	@ 0x1081
 800124c:	48c7      	ldr	r0, [pc, #796]	@ (800156c <MX_GPIO_Init+0x384>)
 800124e:	f7ff fc78 	bl	8000b42 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin);
 8001252:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001256:	48c6      	ldr	r0, [pc, #792]	@ (8001570 <MX_GPIO_Init+0x388>)
 8001258:	f7ff fc73 	bl	8000b42 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin);
 800125c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001260:	48c2      	ldr	r0, [pc, #776]	@ (800156c <MX_GPIO_Init+0x384>)
 8001262:	f7ff fc60 	bl	8000b26 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin);
 8001266:	2120      	movs	r1, #32
 8001268:	48bf      	ldr	r0, [pc, #764]	@ (8001568 <MX_GPIO_Init+0x380>)
 800126a:	f7ff fc5c 	bl	8000b26 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin);
 800126e:	2101      	movs	r1, #1
 8001270:	48bc      	ldr	r0, [pc, #752]	@ (8001564 <MX_GPIO_Init+0x37c>)
 8001272:	f7ff fc58 	bl	8000b26 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001276:	f240 1315 	movw	r3, #277	@ 0x115
 800127a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800127c:	2301      	movs	r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	4619      	mov	r1, r3
 8001290:	48b4      	ldr	r0, [pc, #720]	@ (8001564 <MX_GPIO_Init+0x37c>)
 8001292:	f004 fa2c 	bl	80056ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001296:	233f      	movs	r3, #63	@ 0x3f
 8001298:	607b      	str	r3, [r7, #4]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800129a:	2303      	movs	r3, #3
 800129c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	48b2      	ldr	r0, [pc, #712]	@ (8001570 <MX_GPIO_Init+0x388>)
 80012a8:	f004 fa21 	bl	80056ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80012ac:	2303      	movs	r3, #3
 80012ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012b0:	2302      	movs	r3, #2
 80012b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80012c0:	2308      	movs	r3, #8
 80012c2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012cc:	f004 fa0f 	bl	80056ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 80012d0:	f248 131c 	movw	r3, #33052	@ 0x811c
 80012d4:	607b      	str	r3, [r7, #4]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012d6:	2301      	movs	r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ee:	f004 f9fe 	bl	80056ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80012f2:	23e0      	movs	r3, #224	@ 0xe0
 80012f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012f6:	2302      	movs	r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001306:	2305      	movs	r3, #5
 8001308:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001312:	f004 f9ec 	bl	80056ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001316:	f24f 0336 	movw	r3, #61494	@ 0xf036
 800131a:	607b      	str	r3, [r7, #4]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800131c:	2301      	movs	r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001328:	2300      	movs	r3, #0
 800132a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4619      	mov	r1, r3
 8001330:	488d      	ldr	r0, [pc, #564]	@ (8001568 <MX_GPIO_Init+0x380>)
 8001332:	f004 f9dc 	bl	80056ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001336:	f243 0381 	movw	r3, #12417	@ 0x3081
 800133a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800133c:	2301      	movs	r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4886      	ldr	r0, [pc, #536]	@ (800156c <MX_GPIO_Init+0x384>)
 8001352:	f004 f9cc 	bl	80056ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001356:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800135a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800135c:	2301      	movs	r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4619      	mov	r1, r3
 8001370:	487f      	ldr	r0, [pc, #508]	@ (8001570 <MX_GPIO_Init+0x388>)
 8001372:	f004 f9bc 	bl	80056ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001376:	2302      	movs	r3, #2
 8001378:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800137a:	2302      	movs	r3, #2
 800137c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800137e:	2303      	movs	r3, #3
 8001380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800138a:	2305      	movs	r3, #5
 800138c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800138e:	1d3b      	adds	r3, r7, #4
 8001390:	4619      	mov	r1, r3
 8001392:	4876      	ldr	r0, [pc, #472]	@ (800156c <MX_GPIO_Init+0x384>)
 8001394:	f004 f9ab 	bl	80056ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001398:	2378      	movs	r3, #120	@ 0x78
 800139a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800139c:	2302      	movs	r3, #2
 800139e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80013ac:	2307      	movs	r3, #7
 80013ae:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	486d      	ldr	r0, [pc, #436]	@ (800156c <MX_GPIO_Init+0x384>)
 80013b6:	f004 f99a 	bl	80056ee <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80013ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013c0:	2302      	movs	r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80013c8:	2301      	movs	r3, #1
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80013d0:	2304      	movs	r3, #4
 80013d2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4863      	ldr	r0, [pc, #396]	@ (8001568 <MX_GPIO_Init+0x380>)
 80013da:	f004 f988 	bl	80056ee <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE3);
 80013de:	f04f 4170 	mov.w	r1, #4026531840	@ 0xf0000000
 80013e2:	2004      	movs	r0, #4
 80013e4:	f7ff face 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE5);
 80013e8:	4962      	ldr	r1, [pc, #392]	@ (8001574 <MX_GPIO_Init+0x38c>)
 80013ea:	2004      	movs	r0, #4
 80013ec:	f7ff faca 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE6);
 80013f0:	4961      	ldr	r1, [pc, #388]	@ (8001578 <MX_GPIO_Init+0x390>)
 80013f2:	2004      	movs	r0, #4
 80013f4:	f7ff fac6 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80013f8:	4960      	ldr	r1, [pc, #384]	@ (800157c <MX_GPIO_Init+0x394>)
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7ff fac2 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 8001400:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff fabd 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE10);
 800140a:	495d      	ldr	r1, [pc, #372]	@ (8001580 <MX_GPIO_Init+0x398>)
 800140c:	2003      	movs	r0, #3
 800140e:	f7ff fab9 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE11);
 8001412:	495c      	ldr	r1, [pc, #368]	@ (8001584 <MX_GPIO_Init+0x39c>)
 8001414:	2003      	movs	r0, #3
 8001416:	f7ff fab5 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE14);
 800141a:	495b      	ldr	r1, [pc, #364]	@ (8001588 <MX_GPIO_Init+0x3a0>)
 800141c:	2003      	movs	r0, #3
 800141e:	f7ff fab1 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE15);
 8001422:	495a      	ldr	r1, [pc, #360]	@ (800158c <MX_GPIO_Init+0x3a4>)
 8001424:	2003      	movs	r0, #3
 8001426:	f7ff faad 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE7);
 800142a:	4959      	ldr	r1, [pc, #356]	@ (8001590 <MX_GPIO_Init+0x3a8>)
 800142c:	2002      	movs	r0, #2
 800142e:	f7ff faa9 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE8);
 8001432:	4958      	ldr	r1, [pc, #352]	@ (8001594 <MX_GPIO_Init+0x3ac>)
 8001434:	2002      	movs	r0, #2
 8001436:	f7ff faa5 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE2);
 800143a:	f04f 6170 	mov.w	r1, #251658240	@ 0xf000000
 800143e:	2003      	movs	r0, #3
 8001440:	f7ff faa0 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 8001444:	f44f 0170 	mov.w	r1, #15728640	@ 0xf00000
 8001448:	2004      	movs	r0, #4
 800144a:	f7ff fa9b 	bl	8000984 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 800144e:	2308      	movs	r3, #8
 8001450:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001456:	2301      	movs	r3, #1
 8001458:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001462:	2301      	movs	r3, #1
 8001464:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4618      	mov	r0, r3
 800146e:	f003 feff 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8001472:	2320      	movs	r3, #32
 8001474:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800147a:	2301      	movs	r3, #1
 800147c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001480:	2300      	movs	r3, #0
 8001482:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001486:	2301      	movs	r3, #1
 8001488:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4618      	mov	r0, r3
 8001492:	f003 feed 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8001496:	2340      	movs	r3, #64	@ 0x40
 8001498:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 fedb 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80014ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014be:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014c4:	2301      	movs	r3, #1
 80014c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80014d0:	2302      	movs	r3, #2
 80014d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4618      	mov	r0, r3
 80014dc:	f003 fec8 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4618      	mov	r0, r3
 8001500:	f003 feb6 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8001504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001508:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800150e:	2301      	movs	r3, #1
 8001510:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001514:	2300      	movs	r3, #0
 8001516:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800151a:	2301      	movs	r3, #1
 800151c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4618      	mov	r0, r3
 8001526:	f003 fea3 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 800152a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800152e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001534:	2301      	movs	r3, #1
 8001536:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800153a:	2300      	movs	r3, #0
 800153c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001540:	2301      	movs	r3, #1
 8001542:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fe90 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8001550:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001554:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800155a:	2301      	movs	r3, #1
 800155c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001560:	e01a      	b.n	8001598 <MX_GPIO_Init+0x3b0>
 8001562:	bf00      	nop
 8001564:	48001000 	.word	0x48001000
 8001568:	48000400 	.word	0x48000400
 800156c:	48000c00 	.word	0x48000c00
 8001570:	48000800 	.word	0x48000800
 8001574:	00f00001 	.word	0x00f00001
 8001578:	0f000001 	.word	0x0f000001
 800157c:	00f00003 	.word	0x00f00003
 8001580:	0f000002 	.word	0x0f000002
 8001584:	f0000002 	.word	0xf0000002
 8001588:	0f000003 	.word	0x0f000003
 800158c:	f0000003 	.word	0xf0000003
 8001590:	f0000001 	.word	0xf0000001
 8001594:	000f0002 	.word	0x000f0002
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fe61 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80015ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015b2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80015be:	2300      	movs	r3, #0
 80015c0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80015ca:	f107 031c 	add.w	r3, r7, #28
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fe4e 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 80015d4:	2380      	movs	r3, #128	@ 0x80
 80015d6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80015dc:	2301      	movs	r3, #1
 80015de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fe3c 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 80015f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015fc:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001602:	2301      	movs	r3, #1
 8001604:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800160e:	2301      	movs	r3, #1
 8001610:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4618      	mov	r0, r3
 800161a:	f003 fe29 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800161e:	2304      	movs	r3, #4
 8001620:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001632:	2301      	movs	r3, #1
 8001634:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4618      	mov	r0, r3
 800163e:	f003 fe17 	bl	8005270 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001642:	2302      	movs	r3, #2
 8001644:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800164a:	2301      	movs	r3, #1
 800164c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001650:	2300      	movs	r3, #0
 8001652:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001656:	2301      	movs	r3, #1
 8001658:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fe05 	bl	8005270 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_PULL_NO);
 8001666:	2200      	movs	r2, #0
 8001668:	2108      	movs	r1, #8
 800166a:	485a      	ldr	r0, [pc, #360]	@ (80017d4 <MX_GPIO_Init+0x5ec>)
 800166c:	f7ff f9ff 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_PULL_NO);
 8001670:	2200      	movs	r2, #0
 8001672:	2120      	movs	r1, #32
 8001674:	4857      	ldr	r0, [pc, #348]	@ (80017d4 <MX_GPIO_Init+0x5ec>)
 8001676:	f7ff f9fa 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_PULL_NO);
 800167a:	2200      	movs	r2, #0
 800167c:	2140      	movs	r1, #64	@ 0x40
 800167e:	4855      	ldr	r0, [pc, #340]	@ (80017d4 <MX_GPIO_Init+0x5ec>)
 8001680:	f7ff f9f5 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_PULL_NO);
 8001684:	2200      	movs	r2, #0
 8001686:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800168a:	4853      	ldr	r0, [pc, #332]	@ (80017d8 <MX_GPIO_Init+0x5f0>)
 800168c:	f7ff f9ef 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_PULL_NO);
 8001690:	2200      	movs	r2, #0
 8001692:	2101      	movs	r1, #1
 8001694:	4851      	ldr	r0, [pc, #324]	@ (80017dc <MX_GPIO_Init+0x5f4>)
 8001696:	f7ff f9ea 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_PULL_NO);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016a0:	484f      	ldr	r0, [pc, #316]	@ (80017e0 <MX_GPIO_Init+0x5f8>)
 80016a2:	f7ff f9e4 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_PULL_NO);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80016ac:	484c      	ldr	r0, [pc, #304]	@ (80017e0 <MX_GPIO_Init+0x5f8>)
 80016ae:	f7ff f9de 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_PULL_NO);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016b8:	4849      	ldr	r0, [pc, #292]	@ (80017e0 <MX_GPIO_Init+0x5f8>)
 80016ba:	f7ff f9d8 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_PULL_NO);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016c4:	4846      	ldr	r0, [pc, #280]	@ (80017e0 <MX_GPIO_Init+0x5f8>)
 80016c6:	f7ff f9d2 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_PULL_NO);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2180      	movs	r1, #128	@ 0x80
 80016ce:	4842      	ldr	r0, [pc, #264]	@ (80017d8 <MX_GPIO_Init+0x5f0>)
 80016d0:	f7ff f9cd 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_PULL_NO);
 80016d4:	2200      	movs	r2, #0
 80016d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016da:	483f      	ldr	r0, [pc, #252]	@ (80017d8 <MX_GPIO_Init+0x5f0>)
 80016dc:	f7ff f9c7 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_PULL_NO);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2104      	movs	r1, #4
 80016e4:	483e      	ldr	r0, [pc, #248]	@ (80017e0 <MX_GPIO_Init+0x5f8>)
 80016e6:	f7ff f9c2 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_PULL_NO);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2102      	movs	r1, #2
 80016ee:	4839      	ldr	r0, [pc, #228]	@ (80017d4 <MX_GPIO_Init+0x5ec>)
 80016f0:	f7ff f9bd 	bl	8000a6e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USB_OTG_FS_OVRCR_EXTI3_GPIO_Port, USB_OTG_FS_OVRCR_EXTI3_Pin, LL_GPIO_MODE_INPUT);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2108      	movs	r1, #8
 80016f8:	4836      	ldr	r0, [pc, #216]	@ (80017d4 <MX_GPIO_Init+0x5ec>)
 80016fa:	f7ff f97b 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPSGRF_915_GPIO3_EXTI5_GPIO_Port, SPSGRF_915_GPIO3_EXTI5_Pin, LL_GPIO_MODE_INPUT);
 80016fe:	2200      	movs	r2, #0
 8001700:	2120      	movs	r1, #32
 8001702:	4834      	ldr	r0, [pc, #208]	@ (80017d4 <MX_GPIO_Init+0x5ec>)
 8001704:	f7ff f976 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(SPBTLE_RF_IRQ_EXTI6_GPIO_Port, SPBTLE_RF_IRQ_EXTI6_Pin, LL_GPIO_MODE_INPUT);
 8001708:	2200      	movs	r2, #0
 800170a:	2140      	movs	r1, #64	@ 0x40
 800170c:	4831      	ldr	r0, [pc, #196]	@ (80017d4 <MX_GPIO_Init+0x5ec>)
 800170e:	f7ff f971 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BUTTON_EXTI13_GPIO_Port, BUTTON_EXTI13_Pin, LL_GPIO_MODE_INPUT);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001718:	482f      	ldr	r0, [pc, #188]	@ (80017d8 <MX_GPIO_Init+0x5f0>)
 800171a:	f7ff f96b 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D3_GPIO_Port, ARD_D3_Pin, LL_GPIO_MODE_INPUT);
 800171e:	2200      	movs	r2, #0
 8001720:	2101      	movs	r1, #1
 8001722:	482e      	ldr	r0, [pc, #184]	@ (80017dc <MX_GPIO_Init+0x5f4>)
 8001724:	f7ff f966 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LPS22HB_INT_DRDY_EXTI0_GPIO_Port, LPS22HB_INT_DRDY_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800172e:	482c      	ldr	r0, [pc, #176]	@ (80017e0 <MX_GPIO_Init+0x5f8>)
 8001730:	f7ff f960 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM6DSL_INT1_EXTI11_GPIO_Port, LSM6DSL_INT1_EXTI11_Pin, LL_GPIO_MODE_INPUT);
 8001734:	2200      	movs	r2, #0
 8001736:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800173a:	4829      	ldr	r0, [pc, #164]	@ (80017e0 <MX_GPIO_Init+0x5f8>)
 800173c:	f7ff f95a 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ARD_D2_GPIO_Port, ARD_D2_Pin, LL_GPIO_MODE_INPUT);
 8001740:	2200      	movs	r2, #0
 8001742:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001746:	4826      	ldr	r0, [pc, #152]	@ (80017e0 <MX_GPIO_Init+0x5f8>)
 8001748:	f7ff f954 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(HTS221_DRDY_EXTI15_GPIO_Port, HTS221_DRDY_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001752:	4823      	ldr	r0, [pc, #140]	@ (80017e0 <MX_GPIO_Init+0x5f8>)
 8001754:	f7ff f94e 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(VL53L0X_GPIO1_EXTI7_GPIO_Port, VL53L0X_GPIO1_EXTI7_Pin, LL_GPIO_MODE_INPUT);
 8001758:	2200      	movs	r2, #0
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	481e      	ldr	r0, [pc, #120]	@ (80017d8 <MX_GPIO_Init+0x5f0>)
 800175e:	f7ff f949 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(LSM3MDL_DRDY_EXTI8_GPIO_Port, LSM3MDL_DRDY_EXTI8_Pin, LL_GPIO_MODE_INPUT);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001768:	481b      	ldr	r0, [pc, #108]	@ (80017d8 <MX_GPIO_Init+0x5f0>)
 800176a:	f7ff f943 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(PMOD_IRQ_EXTI12_GPIO_Port, PMOD_IRQ_EXTI12_Pin, LL_GPIO_MODE_INPUT);
 800176e:	2200      	movs	r2, #0
 8001770:	2104      	movs	r1, #4
 8001772:	481b      	ldr	r0, [pc, #108]	@ (80017e0 <MX_GPIO_Init+0x5f8>)
 8001774:	f7ff f93e 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ISM43362_DRDY_EXTI1_GPIO_Port, ISM43362_DRDY_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001778:	2200      	movs	r2, #0
 800177a:	2102      	movs	r1, #2
 800177c:	4815      	ldr	r0, [pc, #84]	@ (80017d4 <MX_GPIO_Init+0x5ec>)
 800177e:	f7ff f939 	bl	80009f4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_EnablePinAnalogControl(GPIOC, ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001782:	213f      	movs	r1, #63	@ 0x3f
 8001784:	4814      	ldr	r0, [pc, #80]	@ (80017d8 <MX_GPIO_Init+0x5f0>)
 8001786:	f7ff f9af 	bl	8000ae8 <LL_GPIO_EnablePinAnalogControl>
                          |ARD_A1_Pin|ARD_A0_Pin);

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800178a:	f7ff f871 	bl	8000870 <__NVIC_GetPriorityGrouping>
 800178e:	4603      	mov	r3, r0
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff f8c1 	bl	800091c <NVIC_EncodePriority>
 800179a:	4603      	mov	r3, r0
 800179c:	4619      	mov	r1, r3
 800179e:	2017      	movs	r0, #23
 80017a0:	f7ff f892 	bl	80008c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017a4:	2017      	movs	r0, #23
 80017a6:	f7ff f871 	bl	800088c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80017aa:	f7ff f861 	bl	8000870 <__NVIC_GetPriorityGrouping>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff f8b1 	bl	800091c <NVIC_EncodePriority>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4619      	mov	r1, r3
 80017be:	2028      	movs	r0, #40	@ 0x28
 80017c0:	f7ff f882 	bl	80008c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017c4:	2028      	movs	r0, #40	@ 0x28
 80017c6:	f7ff f861 	bl	800088c <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	@ 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	48001000 	.word	0x48001000
 80017d8:	48000800 	.word	0x48000800
 80017dc:	48000400 	.word	0x48000400
 80017e0:	48000c00 	.word	0x48000c00

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <Error_Handler+0x8>

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001834 <HAL_MspInit+0x44>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fa:	4a0e      	ldr	r2, [pc, #56]	@ (8001834 <HAL_MspInit+0x44>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6613      	str	r3, [r2, #96]	@ 0x60
 8001802:	4b0c      	ldr	r3, [pc, #48]	@ (8001834 <HAL_MspInit+0x44>)
 8001804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_MspInit+0x44>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001812:	4a08      	ldr	r2, [pc, #32]	@ (8001834 <HAL_MspInit+0x44>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001818:	6593      	str	r3, [r2, #88]	@ 0x58
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_MspInit+0x44>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800181e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000

08001838 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b0ac      	sub	sp, #176	@ 0xb0
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2288      	movs	r2, #136	@ 0x88
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f004 fa8b 	bl	8005d74 <memset>
  if(DFSDM1_Init == 0)
 800185e:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d142      	bne.n	80018ec <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001866:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800186a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4618      	mov	r0, r3
 8001878:	f002 f938 	bl	8003aec <HAL_RCCEx_PeriphCLKConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001882:	f7ff ffaf 	bl	80017e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001886:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188a:	4a1b      	ldr	r2, [pc, #108]	@ (80018f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800188c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001890:	6613      	str	r3, [r2, #96]	@ 0x60
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001896:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800189e:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a15      	ldr	r2, [pc, #84]	@ (80018f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80018a4:	f043 0310 	orr.w	r3, r3, #16
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0310 	and.w	r3, r3, #16
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80018b6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80018ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018d0:	2306      	movs	r3, #6
 80018d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018da:	4619      	mov	r1, r3
 80018dc:	4807      	ldr	r0, [pc, #28]	@ (80018fc <HAL_DFSDM_ChannelMspInit+0xc4>)
 80018de:	f000 fdb5 	bl	800244c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 80018e2:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	4a02      	ldr	r2, [pc, #8]	@ (80018f4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80018ea:	6013      	str	r3, [r2, #0]
  }

}
 80018ec:	bf00      	nop
 80018ee:	37b0      	adds	r7, #176	@ 0xb0
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000754 	.word	0x20000754
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48001000 	.word	0x48001000

08001900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b0ac      	sub	sp, #176	@ 0xb0
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2288      	movs	r2, #136	@ 0x88
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f004 fa27 	bl	8005d74 <memset>
  if(hi2c->Instance==I2C2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a21      	ldr	r2, [pc, #132]	@ (80019b0 <HAL_I2C_MspInit+0xb0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d13b      	bne.n	80019a8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001934:	2300      	movs	r3, #0
 8001936:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4618      	mov	r0, r3
 800193e:	f002 f8d5 	bl	8003aec <HAL_RCCEx_PeriphCLKConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001948:	f7ff ff4c 	bl	80017e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_I2C_MspInit+0xb4>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001950:	4a18      	ldr	r2, [pc, #96]	@ (80019b4 <HAL_I2C_MspInit+0xb4>)
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001958:	4b16      	ldr	r3, [pc, #88]	@ (80019b4 <HAL_I2C_MspInit+0xb4>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001964:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001968:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196c:	2312      	movs	r3, #18
 800196e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001972:	2301      	movs	r3, #1
 8001974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800197e:	2304      	movs	r3, #4
 8001980:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001988:	4619      	mov	r1, r3
 800198a:	480b      	ldr	r0, [pc, #44]	@ (80019b8 <HAL_I2C_MspInit+0xb8>)
 800198c:	f000 fd5e 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001990:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <HAL_I2C_MspInit+0xb4>)
 8001992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001994:	4a07      	ldr	r2, [pc, #28]	@ (80019b4 <HAL_I2C_MspInit+0xb4>)
 8001996:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800199a:	6593      	str	r3, [r2, #88]	@ 0x58
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_I2C_MspInit+0xb4>)
 800199e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80019a8:	bf00      	nop
 80019aa:	37b0      	adds	r7, #176	@ 0xb0
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40005800 	.word	0x40005800
 80019b4:	40021000 	.word	0x40021000
 80019b8:	48000400 	.word	0x48000400

080019bc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	@ 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a17      	ldr	r2, [pc, #92]	@ (8001a38 <HAL_QSPI_MspInit+0x7c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d128      	bne.n	8001a30 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80019de:	4b17      	ldr	r3, [pc, #92]	@ (8001a3c <HAL_QSPI_MspInit+0x80>)
 80019e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019e2:	4a16      	ldr	r2, [pc, #88]	@ (8001a3c <HAL_QSPI_MspInit+0x80>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80019ea:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <HAL_QSPI_MspInit+0x80>)
 80019ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80019ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f6:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <HAL_QSPI_MspInit+0x80>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019fa:	4a10      	ldr	r2, [pc, #64]	@ (8001a3c <HAL_QSPI_MspInit+0x80>)
 80019fc:	f043 0310 	orr.w	r3, r3, #16
 8001a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a02:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <HAL_QSPI_MspInit+0x80>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001a0e:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001a12:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a20:	230a      	movs	r3, #10
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4805      	ldr	r0, [pc, #20]	@ (8001a40 <HAL_QSPI_MspInit+0x84>)
 8001a2c:	f000 fd0e 	bl	800244c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001a30:	bf00      	nop
 8001a32:	3728      	adds	r7, #40	@ 0x28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	a0001000 	.word	0xa0001000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48001000 	.word	0x48001000

08001a44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	@ 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a17      	ldr	r2, [pc, #92]	@ (8001ac0 <HAL_SPI_MspInit+0x7c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d128      	bne.n	8001ab8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a66:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <HAL_SPI_MspInit+0x80>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	4a16      	ldr	r2, [pc, #88]	@ (8001ac4 <HAL_SPI_MspInit+0x80>)
 8001a6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <HAL_SPI_MspInit+0x80>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <HAL_SPI_MspInit+0x80>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	4a10      	ldr	r2, [pc, #64]	@ (8001ac4 <HAL_SPI_MspInit+0x80>)
 8001a84:	f043 0304 	orr.w	r3, r3, #4
 8001a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <HAL_SPI_MspInit+0x80>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a96:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aa8:	2306      	movs	r3, #6
 8001aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <HAL_SPI_MspInit+0x84>)
 8001ab4:	f000 fcca 	bl	800244c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	@ 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40003c00 	.word	0x40003c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	48000800 	.word	0x48000800

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b0ae      	sub	sp, #184	@ 0xb8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	2288      	movs	r2, #136	@ 0x88
 8001aea:	2100      	movs	r1, #0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f004 f941 	bl	8005d74 <memset>
  if(huart->Instance==USART1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a42      	ldr	r2, [pc, #264]	@ (8001c00 <HAL_UART_MspInit+0x134>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d13b      	bne.n	8001b74 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001afc:	2301      	movs	r3, #1
 8001afe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b00:	2300      	movs	r3, #0
 8001b02:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b04:	f107 031c 	add.w	r3, r7, #28
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 ffef 	bl	8003aec <HAL_RCCEx_PeriphCLKConfig>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b14:	f7ff fe66 	bl	80017e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b18:	4b3a      	ldr	r3, [pc, #232]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1c:	4a39      	ldr	r2, [pc, #228]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001b1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b22:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b24:	4b37      	ldr	r3, [pc, #220]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001b26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b30:	4b34      	ldr	r3, [pc, #208]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001b32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b34:	4a33      	ldr	r2, [pc, #204]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b3c:	4b31      	ldr	r3, [pc, #196]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b48:	23c0      	movs	r3, #192	@ 0xc0
 8001b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b60:	2307      	movs	r3, #7
 8001b62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4826      	ldr	r0, [pc, #152]	@ (8001c08 <HAL_UART_MspInit+0x13c>)
 8001b6e:	f000 fc6d 	bl	800244c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b72:	e040      	b.n	8001bf6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a24      	ldr	r2, [pc, #144]	@ (8001c0c <HAL_UART_MspInit+0x140>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d13b      	bne.n	8001bf6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b82:	2300      	movs	r3, #0
 8001b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f001 ffae 	bl	8003aec <HAL_RCCEx_PeriphCLKConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001b96:	f7ff fe25 	bl	80017e4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	4a19      	ldr	r2, [pc, #100]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba6:	4b17      	ldr	r3, [pc, #92]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb6:	4a13      	ldr	r2, [pc, #76]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001bb8:	f043 0308 	orr.w	r3, r3, #8
 8001bbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bbe:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <HAL_UART_MspInit+0x138>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001be4:	2307      	movs	r3, #7
 8001be6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4807      	ldr	r0, [pc, #28]	@ (8001c10 <HAL_UART_MspInit+0x144>)
 8001bf2:	f000 fc2b 	bl	800244c <HAL_GPIO_Init>
}
 8001bf6:	bf00      	nop
 8001bf8:	37b8      	adds	r7, #184	@ 0xb8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40021000 	.word	0x40021000
 8001c08:	48000400 	.word	0x48000400
 8001c0c:	40004800 	.word	0x40004800
 8001c10:	48000c00 	.word	0x48000c00

08001c14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b0ac      	sub	sp, #176	@ 0xb0
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	2288      	movs	r2, #136	@ 0x88
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 f89d 	bl	8005d74 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c42:	d17c      	bne.n	8001d3e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001c44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c48:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001c4a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001c4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001c5a:	2318      	movs	r3, #24
 8001c5c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c5e:	2307      	movs	r3, #7
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c62:	2302      	movs	r3, #2
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c66:	2302      	movs	r3, #2
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c6a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c6e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 ff39 	bl	8003aec <HAL_RCCEx_PeriphCLKConfig>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001c80:	f7ff fdb0 	bl	80017e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b30      	ldr	r3, [pc, #192]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c88:	4a2f      	ldr	r2, [pc, #188]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c90:	4b2d      	ldr	r3, [pc, #180]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cba:	f000 fbc7 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001cbe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cd8:	230a      	movs	r3, #10
 8001cda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cde:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ce8:	f000 fbb0 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cec:	4b16      	ldr	r3, [pc, #88]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001cee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf0:	4a15      	ldr	r2, [pc, #84]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001cf2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d04:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d114      	bne.n	8001d3a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d10:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d14:	4a0c      	ldr	r2, [pc, #48]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001d16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001d28:	f001 f814 	bl	8002d54 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <HAL_PCD_MspInit+0x134>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001d38:	e001      	b.n	8001d3e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001d3a:	f001 f80b 	bl	8002d54 <HAL_PWREx_EnableVddUSB>
}
 8001d3e:	bf00      	nop
 8001d40:	37b0      	adds	r7, #176	@ 0xb0
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000

08001d4c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d101      	bne.n	8001d66 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40010400 	.word	0x40010400

08001d78 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001d80:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6153      	str	r3, [r2, #20]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40010400 	.word	0x40010400

08001d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <NMI_Handler+0x4>

08001da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <HardFault_Handler+0x4>

08001da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <MemManage_Handler+0x4>

08001db0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	bf00      	nop
 8001dbe:	e7fd      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	af00      	add	r7, sp, #0
//
//		estado = 1;
//	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dee:	f000 f8f7 	bl	8001fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_5) != RESET)
 8001dfa:	2020      	movs	r0, #32
 8001dfc:	f7ff ffa6 	bl	8001d4c <LL_EXTI_IsActiveFlag_0_31>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <EXTI9_5_IRQHandler+0x16>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_5);
 8001e06:	2020      	movs	r0, #32
 8001e08:	f7ff ffb6 	bl	8001d78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_5 */

    /* USER CODE END LL_EXTI_LINE_5 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_6) != RESET)
 8001e0c:	2040      	movs	r0, #64	@ 0x40
 8001e0e:	f7ff ff9d 	bl	8001d4c <LL_EXTI_IsActiveFlag_0_31>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <EXTI9_5_IRQHandler+0x28>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_6);
 8001e18:	2040      	movs	r0, #64	@ 0x40
 8001e1a:	f7ff ffad 	bl	8001d78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_6 */

    /* USER CODE END LL_EXTI_LINE_6 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_7) != RESET)
 8001e1e:	2080      	movs	r0, #128	@ 0x80
 8001e20:	f7ff ff94 	bl	8001d4c <LL_EXTI_IsActiveFlag_0_31>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <EXTI9_5_IRQHandler+0x3a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_7);
 8001e2a:	2080      	movs	r0, #128	@ 0x80
 8001e2c:	f7ff ffa4 	bl	8001d78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_7 */

    /* USER CODE END LL_EXTI_LINE_7 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8001e30:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e34:	f7ff ff8a 	bl	8001d4c <LL_EXTI_IsActiveFlag_0_31>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <EXTI9_5_IRQHandler+0x50>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 8001e3e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e42:	f7ff ff99 	bl	8001d78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_10) != RESET)
 8001e4e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e52:	f7ff ff7b 	bl	8001d4c <LL_EXTI_IsActiveFlag_0_31>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <EXTI15_10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_10);
 8001e5c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e60:	f7ff ff8a 	bl	8001d78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_10 */

    /* USER CODE END LL_EXTI_LINE_10 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_11) != RESET)
 8001e64:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e68:	f7ff ff70 	bl	8001d4c <LL_EXTI_IsActiveFlag_0_31>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <EXTI15_10_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_11);
 8001e72:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e76:	f7ff ff7f 	bl	8001d78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_11 */

    /* USER CODE END LL_EXTI_LINE_11 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_13) != RESET)
 8001e7a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e7e:	f7ff ff65 	bl	8001d4c <LL_EXTI_IsActiveFlag_0_31>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_13);
 8001e88:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e8c:	f7ff ff74 	bl	8001d78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_13 */

    /* USER CODE END LL_EXTI_LINE_13 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8001e90:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e94:	f7ff ff5a 	bl	8001d4c <LL_EXTI_IsActiveFlag_0_31>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8001e9e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ea2:	f7ff ff69 	bl	8001d78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */

    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8001ea6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001eaa:	f7ff ff4f 	bl	8001d4c <LL_EXTI_IsActiveFlag_0_31>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <EXTI15_10_IRQHandler+0x72>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8001eb4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001eb8:	f7ff ff5e 	bl	8001d78 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <SystemInit+0x20>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <SystemInit+0x20>)
 8001ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee8:	f7ff ffea 	bl	8001ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eec:	480c      	ldr	r0, [pc, #48]	@ (8001f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eee:	490d      	ldr	r1, [pc, #52]	@ (8001f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <LoopForever+0xe>)
  movs r3, #0
 8001ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ef4:	e002      	b.n	8001efc <LoopCopyDataInit>

08001ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001efa:	3304      	adds	r3, #4

08001efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f00:	d3f9      	bcc.n	8001ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f04:	4c0a      	ldr	r4, [pc, #40]	@ (8001f30 <LoopForever+0x16>)
  movs r3, #0
 8001f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f08:	e001      	b.n	8001f0e <LoopFillZerobss>

08001f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f0c:	3204      	adds	r2, #4

08001f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f10:	d3fb      	bcc.n	8001f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f12:	f003 ff37 	bl	8005d84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f16:	f7fe fe7f 	bl	8000c18 <main>

08001f1a <LoopForever>:

LoopForever:
    b LoopForever
 8001f1a:	e7fe      	b.n	8001f1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f1c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f28:	08005e3c 	.word	0x08005e3c
  ldr r2, =_sbss
 8001f2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f30:	20000780 	.word	0x20000780

08001f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC1_2_IRQHandler>

08001f36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 f943 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 f80e 	bl	8001f68 <HAL_InitTick>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	e001      	b.n	8001f5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f58:	f7ff fc4a 	bl	80017f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f74:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <HAL_InitTick+0x6c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d023      	beq.n	8001fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f7c:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <HAL_InitTick+0x70>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <HAL_InitTick+0x6c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	4619      	mov	r1, r3
 8001f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f000 f941 	bl	800221a <HAL_SYSTICK_Config>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10f      	bne.n	8001fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2b0f      	cmp	r3, #15
 8001fa2:	d809      	bhi.n	8001fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f000 f919 	bl	80021e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001fdc <HAL_InitTick+0x74>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e007      	b.n	8001fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e004      	b.n	8001fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	e001      	b.n	8001fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000004 	.word	0x20000004

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000008 	.word	0x20000008
 8002004:	20000758 	.word	0x20000758

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	@ (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000758 	.word	0x20000758

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800203a:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000008 	.word	0x20000008

08002068 <__NVIC_SetPriorityGrouping>:
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_SetPriority>:
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	@ (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	@ (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	@ 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	@ 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f7ff ff8e 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	@ (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff47 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff5c 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff8e 	bl	8002120 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5d 	bl	80020cc <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ffb0 	bl	8002188 <SysTick_Config>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0ac      	b.n	80023a0 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f8b2 	bl	80023b4 <DFSDM_GetChannelFromInstance>
 8002250:	4603      	mov	r3, r0
 8002252:	4a55      	ldr	r2, [pc, #340]	@ (80023a8 <HAL_DFSDM_ChannelInit+0x174>)
 8002254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e09f      	b.n	80023a0 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff fae9 	bl	8001838 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002266:	4b51      	ldr	r3, [pc, #324]	@ (80023ac <HAL_DFSDM_ChannelInit+0x178>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4a4f      	ldr	r2, [pc, #316]	@ (80023ac <HAL_DFSDM_ChannelInit+0x178>)
 800226e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002270:	4b4e      	ldr	r3, [pc, #312]	@ (80023ac <HAL_DFSDM_ChannelInit+0x178>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d125      	bne.n	80022c4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002278:	4b4d      	ldr	r3, [pc, #308]	@ (80023b0 <HAL_DFSDM_ChannelInit+0x17c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a4c      	ldr	r2, [pc, #304]	@ (80023b0 <HAL_DFSDM_ChannelInit+0x17c>)
 800227e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002282:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002284:	4b4a      	ldr	r3, [pc, #296]	@ (80023b0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	4948      	ldr	r1, [pc, #288]	@ (80023b0 <HAL_DFSDM_ChannelInit+0x17c>)
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002292:	4b47      	ldr	r3, [pc, #284]	@ (80023b0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a46      	ldr	r2, [pc, #280]	@ (80023b0 <HAL_DFSDM_ChannelInit+0x17c>)
 8002298:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 800229c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	791b      	ldrb	r3, [r3, #4]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d108      	bne.n	80022b8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80022a6:	4b42      	ldr	r3, [pc, #264]	@ (80023b0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	493f      	ldr	r1, [pc, #252]	@ (80023b0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80022b8:	4b3d      	ldr	r3, [pc, #244]	@ (80023b0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a3c      	ldr	r2, [pc, #240]	@ (80023b0 <HAL_DFSDM_ChannelInit+0x17c>)
 80022be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022c2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80022d2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6819      	ldr	r1, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022e2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80022e8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 020f 	bic.w	r2, r2, #15
 8002300:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6819      	ldr	r1, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8002328:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6899      	ldr	r1, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002338:	3b01      	subs	r3, #1
 800233a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f002 0207 	and.w	r2, r2, #7
 8002354:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002360:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002380:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f810 	bl	80023b4 <DFSDM_GetChannelFromInstance>
 8002394:	4602      	mov	r2, r0
 8002396:	4904      	ldr	r1, [pc, #16]	@ (80023a8 <HAL_DFSDM_ChannelInit+0x174>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000760 	.word	0x20000760
 80023ac:	2000075c 	.word	0x2000075c
 80023b0:	40016000 	.word	0x40016000

080023b4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a1c      	ldr	r2, [pc, #112]	@ (8002430 <DFSDM_GetChannelFromInstance+0x7c>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d102      	bne.n	80023ca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e02b      	b.n	8002422 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a19      	ldr	r2, [pc, #100]	@ (8002434 <DFSDM_GetChannelFromInstance+0x80>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d102      	bne.n	80023d8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e024      	b.n	8002422 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a17      	ldr	r2, [pc, #92]	@ (8002438 <DFSDM_GetChannelFromInstance+0x84>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d102      	bne.n	80023e6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80023e0:	2302      	movs	r3, #2
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	e01d      	b.n	8002422 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a14      	ldr	r2, [pc, #80]	@ (800243c <DFSDM_GetChannelFromInstance+0x88>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d102      	bne.n	80023f4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80023ee:	2304      	movs	r3, #4
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	e016      	b.n	8002422 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a12      	ldr	r2, [pc, #72]	@ (8002440 <DFSDM_GetChannelFromInstance+0x8c>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d102      	bne.n	8002402 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80023fc:	2305      	movs	r3, #5
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	e00f      	b.n	8002422 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a0f      	ldr	r2, [pc, #60]	@ (8002444 <DFSDM_GetChannelFromInstance+0x90>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d102      	bne.n	8002410 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800240a:	2306      	movs	r3, #6
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e008      	b.n	8002422 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a0d      	ldr	r2, [pc, #52]	@ (8002448 <DFSDM_GetChannelFromInstance+0x94>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d102      	bne.n	800241e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002418:	2307      	movs	r3, #7
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	e001      	b.n	8002422 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800241e:	2303      	movs	r3, #3
 8002420:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002422:	68fb      	ldr	r3, [r7, #12]
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	40016000 	.word	0x40016000
 8002434:	40016020 	.word	0x40016020
 8002438:	40016040 	.word	0x40016040
 800243c:	40016080 	.word	0x40016080
 8002440:	400160a0 	.word	0x400160a0
 8002444:	400160c0 	.word	0x400160c0
 8002448:	400160e0 	.word	0x400160e0

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245a:	e17f      	b.n	800275c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8171 	beq.w	8002756 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d005      	beq.n	800248c <HAL_GPIO_Init+0x40>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d130      	bne.n	80024ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c2:	2201      	movs	r2, #1
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0201 	and.w	r2, r3, #1
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d118      	bne.n	800252c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002500:	2201      	movs	r2, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	08db      	lsrs	r3, r3, #3
 8002516:	f003 0201 	and.w	r2, r3, #1
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b03      	cmp	r3, #3
 8002536:	d017      	beq.n	8002568 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d123      	bne.n	80025bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	220f      	movs	r2, #15
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	6939      	ldr	r1, [r7, #16]
 80025b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0203 	and.w	r2, r3, #3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80ac 	beq.w	8002756 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	4b5f      	ldr	r3, [pc, #380]	@ (800277c <HAL_GPIO_Init+0x330>)
 8002600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002602:	4a5e      	ldr	r2, [pc, #376]	@ (800277c <HAL_GPIO_Init+0x330>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6613      	str	r3, [r2, #96]	@ 0x60
 800260a:	4b5c      	ldr	r3, [pc, #368]	@ (800277c <HAL_GPIO_Init+0x330>)
 800260c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002616:	4a5a      	ldr	r2, [pc, #360]	@ (8002780 <HAL_GPIO_Init+0x334>)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3302      	adds	r3, #2
 800261e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	220f      	movs	r2, #15
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4013      	ands	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002640:	d025      	beq.n	800268e <HAL_GPIO_Init+0x242>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4f      	ldr	r2, [pc, #316]	@ (8002784 <HAL_GPIO_Init+0x338>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01f      	beq.n	800268a <HAL_GPIO_Init+0x23e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4e      	ldr	r2, [pc, #312]	@ (8002788 <HAL_GPIO_Init+0x33c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d019      	beq.n	8002686 <HAL_GPIO_Init+0x23a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4d      	ldr	r2, [pc, #308]	@ (800278c <HAL_GPIO_Init+0x340>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_GPIO_Init+0x236>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4c      	ldr	r2, [pc, #304]	@ (8002790 <HAL_GPIO_Init+0x344>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00d      	beq.n	800267e <HAL_GPIO_Init+0x232>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4b      	ldr	r2, [pc, #300]	@ (8002794 <HAL_GPIO_Init+0x348>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <HAL_GPIO_Init+0x22e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4a      	ldr	r2, [pc, #296]	@ (8002798 <HAL_GPIO_Init+0x34c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d101      	bne.n	8002676 <HAL_GPIO_Init+0x22a>
 8002672:	2306      	movs	r3, #6
 8002674:	e00c      	b.n	8002690 <HAL_GPIO_Init+0x244>
 8002676:	2307      	movs	r3, #7
 8002678:	e00a      	b.n	8002690 <HAL_GPIO_Init+0x244>
 800267a:	2305      	movs	r3, #5
 800267c:	e008      	b.n	8002690 <HAL_GPIO_Init+0x244>
 800267e:	2304      	movs	r3, #4
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x244>
 8002682:	2303      	movs	r3, #3
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x244>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x244>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x244>
 800268e:	2300      	movs	r3, #0
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	f002 0203 	and.w	r2, r2, #3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4093      	lsls	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026a0:	4937      	ldr	r1, [pc, #220]	@ (8002780 <HAL_GPIO_Init+0x334>)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ae:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_GPIO_Init+0x350>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026d2:	4a32      	ldr	r2, [pc, #200]	@ (800279c <HAL_GPIO_Init+0x350>)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026d8:	4b30      	ldr	r3, [pc, #192]	@ (800279c <HAL_GPIO_Init+0x350>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026fc:	4a27      	ldr	r2, [pc, #156]	@ (800279c <HAL_GPIO_Init+0x350>)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002702:	4b26      	ldr	r3, [pc, #152]	@ (800279c <HAL_GPIO_Init+0x350>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002726:	4a1d      	ldr	r2, [pc, #116]	@ (800279c <HAL_GPIO_Init+0x350>)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_GPIO_Init+0x350>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	43db      	mvns	r3, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002750:	4a12      	ldr	r2, [pc, #72]	@ (800279c <HAL_GPIO_Init+0x350>)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3301      	adds	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	f47f ae78 	bne.w	800245c <HAL_GPIO_Init+0x10>
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	40010000 	.word	0x40010000
 8002784:	48000400 	.word	0x48000400
 8002788:	48000800 	.word	0x48000800
 800278c:	48000c00 	.word	0x48000c00
 8002790:	48001000 	.word	0x48001000
 8002794:	48001400 	.word	0x48001400
 8002798:	48001800 	.word	0x48001800
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e08d      	b.n	80028ce <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff f89a 	bl	8001900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2224      	movs	r2, #36	@ 0x24
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002800:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	e006      	b.n	8002828 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689a      	ldr	r2, [r3, #8]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002826:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b02      	cmp	r3, #2
 800282e:	d108      	bne.n	8002842 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	e007      	b.n	8002852 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002850:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002864:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002874:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69d9      	ldr	r1, [r3, #28]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1a      	ldr	r2, [r3, #32]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_I2CEx_ConfigAnalogFilter>:
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	d138      	bne.n	800295e <HAL_I2CEx_ConfigAnalogFilter+0x88>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e032      	b.n	8002960 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2224      	movs	r2, #36	@ 0x24
 8002906:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6819      	ldr	r1, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f042 0201 	orr.w	r2, r2, #1
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800295e:	2302      	movs	r3, #2
 8002960:	4618      	mov	r0, r3
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_I2CEx_ConfigDigitalFilter>:
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b20      	cmp	r3, #32
 8002980:	d139      	bne.n	80029f6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800298c:	2302      	movs	r3, #2
 800298e:	e033      	b.n	80029f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2224      	movs	r2, #36	@ 0x24
 800299c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f022 0201 	bic.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f042 0201 	orr.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029f6:	2302      	movs	r3, #2
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_PCD_Init>:
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_PCD_Init+0x12>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e101      	b.n	8002c1a <HAL_PCD_Init+0x216>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_PCD_Init+0x2c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff f8f2 	bl	8001c14 <HAL_PCD_MspInit>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2203      	movs	r2, #3
 8002a34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	719a      	strb	r2, [r3, #6]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 feee 	bl	8005824 <USB_DisableGlobalInt>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7c1a      	ldrb	r2, [r3, #16]
 8002a50:	f88d 2000 	strb.w	r2, [sp]
 8002a54:	3304      	adds	r3, #4
 8002a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a58:	f002 feb7 	bl	80057ca <USB_CoreInit>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_PCD_Init+0x6a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0d5      	b.n	8002c1a <HAL_PCD_Init+0x216>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2100      	movs	r1, #0
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fee6 	bl	8005846 <USB_SetCurrentMode>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_PCD_Init+0x88>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0c6      	b.n	8002c1a <HAL_PCD_Init+0x216>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	e04a      	b.n	8002b28 <HAL_PCD_Init+0x124>
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3315      	adds	r3, #21
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	7bfa      	ldrb	r2, [r7, #15]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	3314      	adds	r3, #20
 8002ab6:	7bfa      	ldrb	r2, [r7, #15]
 8002ab8:	701a      	strb	r2, [r3, #0]
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	b298      	uxth	r0, r3
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	332e      	adds	r3, #46	@ 0x2e
 8002ace:	4602      	mov	r2, r0
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3318      	adds	r3, #24
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	331c      	adds	r3, #28
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	3320      	adds	r3, #32
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3324      	adds	r3, #36	@ 0x24
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	3301      	adds	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	791b      	ldrb	r3, [r3, #4]
 8002b2c:	7bfa      	ldrb	r2, [r7, #15]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d3af      	bcc.n	8002a92 <HAL_PCD_Init+0x8e>
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
 8002b36:	e044      	b.n	8002bc2 <HAL_PCD_Init+0x1be>
 8002b38:	7bfa      	ldrb	r2, [r7, #15]
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	73fb      	strb	r3, [r7, #15]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	791b      	ldrb	r3, [r3, #4]
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d3b5      	bcc.n	8002b38 <HAL_PCD_Init+0x134>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7c1a      	ldrb	r2, [r3, #16]
 8002bd4:	f88d 2000 	strb.w	r2, [sp]
 8002bd8:	3304      	adds	r3, #4
 8002bda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bdc:	f002 fe80 	bl	80058e0 <USB_DevInit>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_PCD_Init+0x1ee>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2202      	movs	r2, #2
 8002bea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e013      	b.n	8002c1a <HAL_PCD_Init+0x216>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	745a      	strb	r2, [r3, #17]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7b1b      	ldrb	r3, [r3, #12]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d102      	bne.n	8002c0e <HAL_PCD_Init+0x20a>
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f80a 	bl	8002c22 <HAL_PCDEx_ActivateLPM>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 f825 	bl	8005c62 <USB_DevDisconnect>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_PCDEx_ActivateLPM>:
 8002c22:	b480      	push	{r7}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	619a      	str	r2, [r3, #24]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c54:	f043 0303 	orr.w	r3, r3, #3
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	6553      	str	r3, [r2, #84]	@ 0x54
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_PWR_EnableBkUpAccess>:
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40007000 	.word	0x40007000

08002c8c <HAL_PWREx_GetVoltageRange>:
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40007000 	.word	0x40007000

08002ca8 <HAL_PWREx_ControlVoltageScaling>:
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cb6:	d130      	bne.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x72>
 8002cb8:	4b23      	ldr	r3, [pc, #140]	@ (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cc4:	d038      	beq.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x90>
 8002cc6:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cce:	4a1e      	ldr	r2, [pc, #120]	@ (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2232      	movs	r2, #50	@ 0x32
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0c9b      	lsrs	r3, r3, #18
 8002ce8:	3301      	adds	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e002      	b.n	8002cf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	4b14      	ldr	r3, [pc, #80]	@ (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d00:	d102      	bne.n	8002d08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f2      	bne.n	8002cee <HAL_PWREx_ControlVoltageScaling+0x46>
 8002d08:	4b0f      	ldr	r3, [pc, #60]	@ (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d14:	d110      	bne.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x90>
 8002d16:	2303      	movs	r3, #3
 8002d18:	e00f      	b.n	8002d3a <HAL_PWREx_ControlVoltageScaling+0x92>
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d26:	d007      	beq.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x90>
 8002d28:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d30:	4a05      	ldr	r2, [pc, #20]	@ (8002d48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	20000000 	.word	0x20000000
 8002d50:	431bde83 	.word	0x431bde83

08002d54 <HAL_PWREx_EnableVddUSB>:
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4b05      	ldr	r3, [pc, #20]	@ (8002d70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a04      	ldr	r2, [pc, #16]	@ (8002d70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d62:	6053      	str	r3, [r2, #4]
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40007000 	.word	0x40007000

08002d74 <HAL_QSPI_Init>:
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	f7ff f944 	bl	8002008 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_QSPI_Init+0x18>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e063      	b.n	8002e54 <HAL_QSPI_Init+0xe0>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10b      	bne.n	8002db0 <HAL_QSPI_Init+0x3c>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7fe fe0b 	bl	80019bc <HAL_QSPI_MspInit>
 8002da6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f858 	bl	8002e60 <HAL_QSPI_SetTimeout>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	021a      	lsls	r2, r3, #8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f850 	bl	8002e7c <QSPI_WaitFlagStateUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	72fb      	strb	r3, [r7, #11]
 8002de0:	7afb      	ldrb	r3, [r7, #11]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d131      	bne.n	8002e4a <HAL_QSPI_Init+0xd6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002df0:	f023 0310 	bic.w	r3, r3, #16
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6852      	ldr	r2, [r2, #4]
 8002df8:	0611      	lsls	r1, r2, #24
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68d2      	ldr	r2, [r2, #12]
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6812      	ldr	r2, [r2, #0]
 8002e04:	430b      	orrs	r3, r1
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685a      	ldr	r2, [r3, #4]
 8002e0e:	4b13      	ldr	r3, [pc, #76]	@ (8002e5c <HAL_QSPI_Init+0xe8>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6912      	ldr	r2, [r2, #16]
 8002e16:	0411      	lsls	r1, r2, #16
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6952      	ldr	r2, [r2, #20]
 8002e1c:	4311      	orrs	r1, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6992      	ldr	r2, [r2, #24]
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6053      	str	r3, [r2, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002e52:	7afb      	ldrb	r3, [r7, #11]
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	ffe0f8fe 	.word	0xffe0f8fe

08002e60 <HAL_QSPI_SetTimeout>:
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <QSPI_WaitFlagStateUntilTimeout>:
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	71fb      	strb	r3, [r7, #7]
 8002e8c:	e01a      	b.n	8002ec4 <QSPI_WaitFlagStateUntilTimeout+0x48>
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d016      	beq.n	8002ec4 <QSPI_WaitFlagStateUntilTimeout+0x48>
 8002e96:	f7ff f8b7 	bl	8002008 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d302      	bcc.n	8002eac <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d10b      	bne.n	8002ec4 <QSPI_WaitFlagStateUntilTimeout+0x48>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e00e      	b.n	8002ee2 <QSPI_WaitFlagStateUntilTimeout+0x66>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d1d6      	bne.n	8002e8e <QSPI_WaitFlagStateUntilTimeout+0x12>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3710      	adds	r7, #16
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <HAL_RCC_OscConfig>:
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_OscConfig+0x12>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e3ca      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8002efe:	4b97      	ldr	r3, [pc, #604]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	4b94      	ldr	r3, [pc, #592]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 80e4 	beq.w	80030e8 <HAL_RCC_OscConfig+0x1fc>
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_RCC_OscConfig+0x4a>
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	f040 808b 	bne.w	8003044 <HAL_RCC_OscConfig+0x158>
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	f040 8087 	bne.w	8003044 <HAL_RCC_OscConfig+0x158>
 8002f36:	4b89      	ldr	r3, [pc, #548]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d005      	beq.n	8002f4e <HAL_RCC_OscConfig+0x62>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_RCC_OscConfig+0x62>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e3a2      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a1a      	ldr	r2, [r3, #32]
 8002f52:	4b82      	ldr	r3, [pc, #520]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <HAL_RCC_OscConfig+0x7c>
 8002f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f66:	e005      	b.n	8002f74 <HAL_RCC_OscConfig+0x88>
 8002f68:	4b7c      	ldr	r3, [pc, #496]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d223      	bcs.n	8002fc0 <HAL_RCC_OscConfig+0xd4>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f000 fd55 	bl	8003a2c <RCC_SetFlashLatencyFromMSIRange>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_OscConfig+0xa0>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e383      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8002f8c:	4b73      	ldr	r3, [pc, #460]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a72      	ldr	r2, [pc, #456]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f92:	f043 0308 	orr.w	r3, r3, #8
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b70      	ldr	r3, [pc, #448]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	496d      	ldr	r1, [pc, #436]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]
 8002faa:	4b6c      	ldr	r3, [pc, #432]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	4968      	ldr	r1, [pc, #416]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
 8002fbe:	e025      	b.n	800300c <HAL_RCC_OscConfig+0x120>
 8002fc0:	4b66      	ldr	r3, [pc, #408]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a65      	ldr	r2, [pc, #404]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fc6:	f043 0308 	orr.w	r3, r3, #8
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b63      	ldr	r3, [pc, #396]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	4960      	ldr	r1, [pc, #384]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]
 8002fde:	4b5f      	ldr	r3, [pc, #380]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	495b      	ldr	r1, [pc, #364]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	604b      	str	r3, [r1, #4]
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d109      	bne.n	800300c <HAL_RCC_OscConfig+0x120>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fd15 	bl	8003a2c <RCC_SetFlashLatencyFromMSIRange>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_RCC_OscConfig+0x120>
 8003008:	2301      	movs	r3, #1
 800300a:	e343      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 800300c:	f000 fc4a 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8003010:	4602      	mov	r2, r0
 8003012:	4b52      	ldr	r3, [pc, #328]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	4950      	ldr	r1, [pc, #320]	@ (8003160 <HAL_RCC_OscConfig+0x274>)
 800301e:	5ccb      	ldrb	r3, [r1, r3]
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	fa22 f303 	lsr.w	r3, r2, r3
 8003028:	4a4e      	ldr	r2, [pc, #312]	@ (8003164 <HAL_RCC_OscConfig+0x278>)
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b4e      	ldr	r3, [pc, #312]	@ (8003168 <HAL_RCC_OscConfig+0x27c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe ff99 	bl	8001f68 <HAL_InitTick>
 8003036:	4603      	mov	r3, r0
 8003038:	73fb      	strb	r3, [r7, #15]
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d052      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1fa>
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	e327      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d032      	beq.n	80030b2 <HAL_RCC_OscConfig+0x1c6>
 800304c:	4b43      	ldr	r3, [pc, #268]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a42      	ldr	r2, [pc, #264]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	f7fe ffd6 	bl	8002008 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x186>
 8003060:	f7fe ffd2 	bl	8002008 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x186>
 800306e:	2303      	movs	r3, #3
 8003070:	e310      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8003072:	4b3a      	ldr	r3, [pc, #232]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x174>
 800307e:	4b37      	ldr	r3, [pc, #220]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a36      	ldr	r2, [pc, #216]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b34      	ldr	r3, [pc, #208]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	4931      	ldr	r1, [pc, #196]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003098:	4313      	orrs	r3, r2
 800309a:	600b      	str	r3, [r1, #0]
 800309c:	4b2f      	ldr	r3, [pc, #188]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	492c      	ldr	r1, [pc, #176]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
 80030b0:	e01a      	b.n	80030e8 <HAL_RCC_OscConfig+0x1fc>
 80030b2:	4b2a      	ldr	r3, [pc, #168]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a29      	ldr	r2, [pc, #164]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	f7fe ffa3 	bl	8002008 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x1ec>
 80030c6:	f7fe ff9f 	bl	8002008 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x1ec>
 80030d4:	2303      	movs	r3, #3
 80030d6:	e2dd      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 80030d8:	4b20      	ldr	r3, [pc, #128]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x1da>
 80030e4:	e000      	b.n	80030e8 <HAL_RCC_OscConfig+0x1fc>
 80030e6:	bf00      	nop
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d074      	beq.n	80031de <HAL_RCC_OscConfig+0x2f2>
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d005      	beq.n	8003106 <HAL_RCC_OscConfig+0x21a>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b0c      	cmp	r3, #12
 80030fe:	d10e      	bne.n	800311e <HAL_RCC_OscConfig+0x232>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b03      	cmp	r3, #3
 8003104:	d10b      	bne.n	800311e <HAL_RCC_OscConfig+0x232>
 8003106:	4b15      	ldr	r3, [pc, #84]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d064      	beq.n	80031dc <HAL_RCC_OscConfig+0x2f0>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d160      	bne.n	80031dc <HAL_RCC_OscConfig+0x2f0>
 800311a:	2301      	movs	r3, #1
 800311c:	e2ba      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x24a>
 8003128:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0b      	ldr	r2, [pc, #44]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e026      	b.n	8003184 <HAL_RCC_OscConfig+0x298>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800313e:	d115      	bne.n	800316c <HAL_RCC_OscConfig+0x280>
 8003140:	4b06      	ldr	r3, [pc, #24]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a05      	ldr	r2, [pc, #20]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003146:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800314a:	6013      	str	r3, [r2, #0]
 800314c:	4b03      	ldr	r3, [pc, #12]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a02      	ldr	r2, [pc, #8]	@ (800315c <HAL_RCC_OscConfig+0x270>)
 8003152:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	e014      	b.n	8003184 <HAL_RCC_OscConfig+0x298>
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	08005de4 	.word	0x08005de4
 8003164:	20000000 	.word	0x20000000
 8003168:	20000004 	.word	0x20000004
 800316c:	4ba0      	ldr	r3, [pc, #640]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a9f      	ldr	r2, [pc, #636]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b9d      	ldr	r3, [pc, #628]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a9c      	ldr	r2, [pc, #624]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800317e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <HAL_RCC_OscConfig+0x2c8>
 800318c:	f7fe ff3c 	bl	8002008 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x2ba>
 8003194:	f7fe ff38 	bl	8002008 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	@ 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x2ba>
 80031a2:	2303      	movs	r3, #3
 80031a4:	e276      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 80031a6:	4b92      	ldr	r3, [pc, #584]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x2a8>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x2f2>
 80031b4:	f7fe ff28 	bl	8002008 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x2e2>
 80031bc:	f7fe ff24 	bl	8002008 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	@ 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x2e2>
 80031ca:	2303      	movs	r3, #3
 80031cc:	e262      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 80031ce:	4b88      	ldr	r3, [pc, #544]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x2d0>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x2f2>
 80031dc:	bf00      	nop
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d060      	beq.n	80032ac <HAL_RCC_OscConfig+0x3c0>
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_OscConfig+0x310>
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d119      	bne.n	800322a <HAL_RCC_OscConfig+0x33e>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d116      	bne.n	800322a <HAL_RCC_OscConfig+0x33e>
 80031fc:	4b7c      	ldr	r3, [pc, #496]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_OscConfig+0x328>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_OscConfig+0x328>
 8003210:	2301      	movs	r3, #1
 8003212:	e23f      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8003214:	4b76      	ldr	r3, [pc, #472]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	4973      	ldr	r1, [pc, #460]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
 8003228:	e040      	b.n	80032ac <HAL_RCC_OscConfig+0x3c0>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d023      	beq.n	800327a <HAL_RCC_OscConfig+0x38e>
 8003232:	4b6f      	ldr	r3, [pc, #444]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6e      	ldr	r2, [pc, #440]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	f7fe fee3 	bl	8002008 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x36c>
 8003246:	f7fe fedf 	bl	8002008 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x36c>
 8003254:	2303      	movs	r3, #3
 8003256:	e21d      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8003258:	4b65      	ldr	r3, [pc, #404]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x35a>
 8003264:	4b62      	ldr	r3, [pc, #392]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	495f      	ldr	r1, [pc, #380]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	e018      	b.n	80032ac <HAL_RCC_OscConfig+0x3c0>
 800327a:	4b5d      	ldr	r3, [pc, #372]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a5c      	ldr	r2, [pc, #368]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	f7fe febf 	bl	8002008 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x3b4>
 800328e:	f7fe febb 	bl	8002008 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x3b4>
 800329c:	2303      	movs	r3, #3
 800329e:	e1f9      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 80032a0:	4b53      	ldr	r3, [pc, #332]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x3a2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d03c      	beq.n	8003332 <HAL_RCC_OscConfig+0x446>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01c      	beq.n	80032fa <HAL_RCC_OscConfig+0x40e>
 80032c0:	4b4b      	ldr	r3, [pc, #300]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032c6:	4a4a      	ldr	r2, [pc, #296]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80032d0:	f7fe fe9a 	bl	8002008 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x3fe>
 80032d8:	f7fe fe96 	bl	8002008 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x3fe>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e1d4      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 80032ea:	4b41      	ldr	r3, [pc, #260]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ef      	beq.n	80032d8 <HAL_RCC_OscConfig+0x3ec>
 80032f8:	e01b      	b.n	8003332 <HAL_RCC_OscConfig+0x446>
 80032fa:	4b3d      	ldr	r3, [pc, #244]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003300:	4a3b      	ldr	r2, [pc, #236]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800330a:	f7fe fe7d 	bl	8002008 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x438>
 8003312:	f7fe fe79 	bl	8002008 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x438>
 8003320:	2303      	movs	r3, #3
 8003322:	e1b7      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8003324:	4b32      	ldr	r3, [pc, #200]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ef      	bne.n	8003312 <HAL_RCC_OscConfig+0x426>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80a6 	beq.w	800348c <HAL_RCC_OscConfig+0x5a0>
 8003340:	2300      	movs	r3, #0
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	4b2a      	ldr	r3, [pc, #168]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10d      	bne.n	800336c <HAL_RCC_OscConfig+0x480>
 8003350:	4b27      	ldr	r3, [pc, #156]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003354:	4a26      	ldr	r2, [pc, #152]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800335a:	6593      	str	r3, [r2, #88]	@ 0x58
 800335c:	4b24      	ldr	r3, [pc, #144]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	2301      	movs	r3, #1
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	4b21      	ldr	r3, [pc, #132]	@ (80033f4 <HAL_RCC_OscConfig+0x508>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d118      	bne.n	80033aa <HAL_RCC_OscConfig+0x4be>
 8003378:	4b1e      	ldr	r3, [pc, #120]	@ (80033f4 <HAL_RCC_OscConfig+0x508>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <HAL_RCC_OscConfig+0x508>)
 800337e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	f7fe fe40 	bl	8002008 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x4b2>
 800338c:	f7fe fe3c 	bl	8002008 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x4b2>
 800339a:	2303      	movs	r3, #3
 800339c:	e17a      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 800339e:	4b15      	ldr	r3, [pc, #84]	@ (80033f4 <HAL_RCC_OscConfig+0x508>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x4a0>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d108      	bne.n	80033c4 <HAL_RCC_OscConfig+0x4d8>
 80033b2:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b8:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033c2:	e029      	b.n	8003418 <HAL_RCC_OscConfig+0x52c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d115      	bne.n	80033f8 <HAL_RCC_OscConfig+0x50c>
 80033cc:	4b08      	ldr	r3, [pc, #32]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d2:	4a07      	ldr	r2, [pc, #28]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033dc:	4b04      	ldr	r3, [pc, #16]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e2:	4a03      	ldr	r2, [pc, #12]	@ (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ec:	e014      	b.n	8003418 <HAL_RCC_OscConfig+0x52c>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
 80033f8:	4b9c      	ldr	r3, [pc, #624]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fe:	4a9b      	ldr	r2, [pc, #620]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003408:	4b98      	ldr	r3, [pc, #608]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340e:	4a97      	ldr	r2, [pc, #604]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d016      	beq.n	800344e <HAL_RCC_OscConfig+0x562>
 8003420:	f7fe fdf2 	bl	8002008 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x552>
 8003428:	f7fe fdee 	bl	8002008 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x552>
 800343a:	2303      	movs	r3, #3
 800343c:	e12a      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 800343e:	4b8b      	ldr	r3, [pc, #556]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ed      	beq.n	8003428 <HAL_RCC_OscConfig+0x53c>
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x58e>
 800344e:	f7fe fddb 	bl	8002008 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x580>
 8003456:	f7fe fdd7 	bl	8002008 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x580>
 8003468:	2303      	movs	r3, #3
 800346a:	e113      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 800346c:	4b7f      	ldr	r3, [pc, #508]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1ed      	bne.n	8003456 <HAL_RCC_OscConfig+0x56a>
 800347a:	7ffb      	ldrb	r3, [r7, #31]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <HAL_RCC_OscConfig+0x5a0>
 8003480:	4b7a      	ldr	r3, [pc, #488]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003484:	4a79      	ldr	r2, [pc, #484]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003486:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800348a:	6593      	str	r3, [r2, #88]	@ 0x58
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80fe 	beq.w	8003692 <HAL_RCC_OscConfig+0x7a6>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349a:	2b02      	cmp	r3, #2
 800349c:	f040 80d0 	bne.w	8003640 <HAL_RCC_OscConfig+0x754>
 80034a0:	4b72      	ldr	r3, [pc, #456]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 0203 	and.w	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d130      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034be:	3b01      	subs	r3, #1
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d127      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d11f      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034e0:	2a07      	cmp	r2, #7
 80034e2:	bf14      	ite	ne
 80034e4:	2201      	movne	r2, #1
 80034e6:	2200      	moveq	r2, #0
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d113      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	3b01      	subs	r3, #1
 80034fc:	055b      	lsls	r3, r3, #21
 80034fe:	429a      	cmp	r2, r3
 8003500:	d109      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350c:	085b      	lsrs	r3, r3, #1
 800350e:	3b01      	subs	r3, #1
 8003510:	065b      	lsls	r3, r3, #25
 8003512:	429a      	cmp	r2, r3
 8003514:	d06e      	beq.n	80035f4 <HAL_RCC_OscConfig+0x708>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b0c      	cmp	r3, #12
 800351a:	d069      	beq.n	80035f0 <HAL_RCC_OscConfig+0x704>
 800351c:	4b53      	ldr	r3, [pc, #332]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_RCC_OscConfig+0x648>
 8003528:	4b50      	ldr	r3, [pc, #320]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_RCC_OscConfig+0x64c>
 8003534:	2301      	movs	r3, #1
 8003536:	e0ad      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8003538:	4b4c      	ldr	r3, [pc, #304]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a4b      	ldr	r2, [pc, #300]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800353e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	f7fe fd60 	bl	8002008 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x672>
 800354c:	f7fe fd5c 	bl	8002008 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x672>
 800355a:	2303      	movs	r3, #3
 800355c:	e09a      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 800355e:	4b43      	ldr	r3, [pc, #268]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x660>
 800356a:	4b40      	ldr	r3, [pc, #256]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	4b40      	ldr	r3, [pc, #256]	@ (8003670 <HAL_RCC_OscConfig+0x784>)
 8003570:	4013      	ands	r3, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800357a:	3a01      	subs	r2, #1
 800357c:	0112      	lsls	r2, r2, #4
 800357e:	4311      	orrs	r1, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003584:	0212      	lsls	r2, r2, #8
 8003586:	4311      	orrs	r1, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800358c:	0852      	lsrs	r2, r2, #1
 800358e:	3a01      	subs	r2, #1
 8003590:	0552      	lsls	r2, r2, #21
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003598:	0852      	lsrs	r2, r2, #1
 800359a:	3a01      	subs	r2, #1
 800359c:	0652      	lsls	r2, r2, #25
 800359e:	4311      	orrs	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035a4:	0912      	lsrs	r2, r2, #4
 80035a6:	0452      	lsls	r2, r2, #17
 80035a8:	430a      	orrs	r2, r1
 80035aa:	4930      	ldr	r1, [pc, #192]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	60cb      	str	r3, [r1, #12]
 80035b0:	4b2e      	ldr	r3, [pc, #184]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2d      	ldr	r2, [pc, #180]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a2a      	ldr	r2, [pc, #168]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c6:	60d3      	str	r3, [r2, #12]
 80035c8:	f7fe fd1e 	bl	8002008 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x6f6>
 80035d0:	f7fe fd1a 	bl	8002008 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x6f6>
 80035de:	2303      	movs	r3, #3
 80035e0:	e058      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 80035e2:	4b22      	ldr	r3, [pc, #136]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x6e4>
 80035ee:	e050      	b.n	8003692 <HAL_RCC_OscConfig+0x7a6>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e04f      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 80035f4:	4b1d      	ldr	r3, [pc, #116]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d148      	bne.n	8003692 <HAL_RCC_OscConfig+0x7a6>
 8003600:	4b1a      	ldr	r3, [pc, #104]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a19      	ldr	r2, [pc, #100]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003606:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b17      	ldr	r3, [pc, #92]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a16      	ldr	r2, [pc, #88]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003616:	60d3      	str	r3, [r2, #12]
 8003618:	f7fe fcf6 	bl	8002008 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x746>
 8003620:	f7fe fcf2 	bl	8002008 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x746>
 800362e:	2303      	movs	r3, #3
 8003630:	e030      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8003632:	4b0e      	ldr	r3, [pc, #56]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x734>
 800363e:	e028      	b.n	8003692 <HAL_RCC_OscConfig+0x7a6>
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	2b0c      	cmp	r3, #12
 8003644:	d023      	beq.n	800368e <HAL_RCC_OscConfig+0x7a2>
 8003646:	4b09      	ldr	r3, [pc, #36]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a08      	ldr	r2, [pc, #32]	@ (800366c <HAL_RCC_OscConfig+0x780>)
 800364c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	f7fe fcd9 	bl	8002008 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]
 8003658:	e00c      	b.n	8003674 <HAL_RCC_OscConfig+0x788>
 800365a:	f7fe fcd5 	bl	8002008 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d905      	bls.n	8003674 <HAL_RCC_OscConfig+0x788>
 8003668:	2303      	movs	r3, #3
 800366a:	e013      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 800366c:	40021000 	.word	0x40021000
 8003670:	f99d808c 	.word	0xf99d808c
 8003674:	4b09      	ldr	r3, [pc, #36]	@ (800369c <HAL_RCC_OscConfig+0x7b0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ec      	bne.n	800365a <HAL_RCC_OscConfig+0x76e>
 8003680:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_OscConfig+0x7b0>)
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	4905      	ldr	r1, [pc, #20]	@ (800369c <HAL_RCC_OscConfig+0x7b0>)
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <HAL_RCC_OscConfig+0x7b4>)
 8003688:	4013      	ands	r3, r2
 800368a:	60cb      	str	r3, [r1, #12]
 800368c:	e001      	b.n	8003692 <HAL_RCC_OscConfig+0x7a6>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_RCC_OscConfig+0x7a8>
 8003692:	2300      	movs	r3, #0
 8003694:	4618      	mov	r0, r3
 8003696:	3720      	adds	r7, #32
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	feeefffc 	.word	0xfeeefffc

080036a4 <HAL_RCC_ClockConfig>:
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0e7      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
 80036b8:	4b75      	ldr	r3, [pc, #468]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d910      	bls.n	80036e8 <HAL_RCC_ClockConfig+0x44>
 80036c6:	4b72      	ldr	r3, [pc, #456]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 0207 	bic.w	r2, r3, #7
 80036ce:	4970      	ldr	r1, [pc, #448]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
 80036d6:	4b6e      	ldr	r3, [pc, #440]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x44>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0cf      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d010      	beq.n	8003716 <HAL_RCC_ClockConfig+0x72>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	4b66      	ldr	r3, [pc, #408]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003700:	429a      	cmp	r2, r3
 8003702:	d908      	bls.n	8003716 <HAL_RCC_ClockConfig+0x72>
 8003704:	4b63      	ldr	r3, [pc, #396]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4960      	ldr	r1, [pc, #384]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d04c      	beq.n	80037bc <HAL_RCC_ClockConfig+0x118>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0x96>
 800372a:	4b5a      	ldr	r3, [pc, #360]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d121      	bne.n	800377a <HAL_RCC_ClockConfig+0xd6>
 8003736:	2301      	movs	r3, #1
 8003738:	e0a6      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
 8003742:	4b54      	ldr	r3, [pc, #336]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d115      	bne.n	800377a <HAL_RCC_ClockConfig+0xd6>
 800374e:	2301      	movs	r3, #1
 8003750:	e09a      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d107      	bne.n	800376a <HAL_RCC_ClockConfig+0xc6>
 800375a:	4b4e      	ldr	r3, [pc, #312]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_RCC_ClockConfig+0xd6>
 8003766:	2301      	movs	r3, #1
 8003768:	e08e      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
 800376a:	4b4a      	ldr	r3, [pc, #296]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_ClockConfig+0xd6>
 8003776:	2301      	movs	r3, #1
 8003778:	e086      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
 800377a:	4b46      	ldr	r3, [pc, #280]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f023 0203 	bic.w	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	4943      	ldr	r1, [pc, #268]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	4313      	orrs	r3, r2
 800378a:	608b      	str	r3, [r1, #8]
 800378c:	f7fe fc3c 	bl	8002008 <HAL_GetTick>
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	e00a      	b.n	80037aa <HAL_RCC_ClockConfig+0x106>
 8003794:	f7fe fc38 	bl	8002008 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x106>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e06e      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
 80037aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 020c 	and.w	r2, r3, #12
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d1eb      	bne.n	8003794 <HAL_RCC_ClockConfig+0xf0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d010      	beq.n	80037ea <HAL_RCC_ClockConfig+0x146>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	4b31      	ldr	r3, [pc, #196]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d208      	bcs.n	80037ea <HAL_RCC_ClockConfig+0x146>
 80037d8:	4b2e      	ldr	r3, [pc, #184]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	492b      	ldr	r1, [pc, #172]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
 80037ea:	4b29      	ldr	r3, [pc, #164]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d210      	bcs.n	800381a <HAL_RCC_ClockConfig+0x176>
 80037f8:	4b25      	ldr	r3, [pc, #148]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 0207 	bic.w	r2, r3, #7
 8003800:	4923      	ldr	r1, [pc, #140]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]
 8003808:	4b21      	ldr	r3, [pc, #132]	@ (8003890 <HAL_RCC_ClockConfig+0x1ec>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d001      	beq.n	800381a <HAL_RCC_ClockConfig+0x176>
 8003816:	2301      	movs	r3, #1
 8003818:	e036      	b.n	8003888 <HAL_RCC_ClockConfig+0x1e4>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_RCC_ClockConfig+0x194>
 8003826:	4b1b      	ldr	r3, [pc, #108]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	4918      	ldr	r1, [pc, #96]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d009      	beq.n	8003858 <HAL_RCC_ClockConfig+0x1b4>
 8003844:	4b13      	ldr	r3, [pc, #76]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4910      	ldr	r1, [pc, #64]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003854:	4313      	orrs	r3, r2
 8003856:	608b      	str	r3, [r1, #8]
 8003858:	f000 f824 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b0d      	ldr	r3, [pc, #52]	@ (8003894 <HAL_RCC_ClockConfig+0x1f0>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	091b      	lsrs	r3, r3, #4
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	490b      	ldr	r1, [pc, #44]	@ (8003898 <HAL_RCC_ClockConfig+0x1f4>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
 8003874:	4a09      	ldr	r2, [pc, #36]	@ (800389c <HAL_RCC_ClockConfig+0x1f8>)
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_RCC_ClockConfig+0x1fc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe fb73 	bl	8001f68 <HAL_InitTick>
 8003882:	4603      	mov	r3, r0
 8003884:	72fb      	strb	r3, [r7, #11]
 8003886:	7afb      	ldrb	r3, [r7, #11]
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	40022000 	.word	0x40022000
 8003894:	40021000 	.word	0x40021000
 8003898:	08005de4 	.word	0x08005de4
 800389c:	20000000 	.word	0x20000000
 80038a0:	20000004 	.word	0x20000004

080038a4 <HAL_RCC_GetSysClockFreq>:
 80038a4:	b480      	push	{r7}
 80038a6:	b089      	sub	sp, #36	@ 0x24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
 80038ae:	2300      	movs	r3, #0
 80038b0:	61bb      	str	r3, [r7, #24]
 80038b2:	4b3e      	ldr	r3, [pc, #248]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	4b3b      	ldr	r3, [pc, #236]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0303 	and.w	r3, r3, #3
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_GetSysClockFreq+0x34>
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d121      	bne.n	8003916 <HAL_RCC_GetSysClockFreq+0x72>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d11e      	bne.n	8003916 <HAL_RCC_GetSysClockFreq+0x72>
 80038d8:	4b34      	ldr	r3, [pc, #208]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0x50>
 80038e4:	4b31      	ldr	r3, [pc, #196]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 80038e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e005      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x5c>
 80038f4:	4b2d      	ldr	r3, [pc, #180]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	61fb      	str	r3, [r7, #28]
 8003900:	4a2b      	ldr	r2, [pc, #172]	@ (80039b0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10d      	bne.n	800392c <HAL_RCC_GetSysClockFreq+0x88>
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	61bb      	str	r3, [r7, #24]
 8003914:	e00a      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x88>
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	2b04      	cmp	r3, #4
 800391a:	d102      	bne.n	8003922 <HAL_RCC_GetSysClockFreq+0x7e>
 800391c:	4b25      	ldr	r3, [pc, #148]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800391e:	61bb      	str	r3, [r7, #24]
 8003920:	e004      	b.n	800392c <HAL_RCC_GetSysClockFreq+0x88>
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d101      	bne.n	800392c <HAL_RCC_GetSysClockFreq+0x88>
 8003928:	4b23      	ldr	r3, [pc, #140]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x114>)
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b0c      	cmp	r3, #12
 8003930:	d134      	bne.n	800399c <HAL_RCC_GetSysClockFreq+0xf8>
 8003932:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d003      	beq.n	800394a <HAL_RCC_GetSysClockFreq+0xa6>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d003      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0xac>
 8003948:	e005      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0xb2>
 800394a:	4b1a      	ldr	r3, [pc, #104]	@ (80039b4 <HAL_RCC_GetSysClockFreq+0x110>)
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e005      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xb8>
 8003950:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	e002      	b.n	800395c <HAL_RCC_GetSysClockFreq+0xb8>
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	bf00      	nop
 800395c:	4b13      	ldr	r3, [pc, #76]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	091b      	lsrs	r3, r3, #4
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	3301      	adds	r3, #1
 8003968:	607b      	str	r3, [r7, #4]
 800396a:	4b10      	ldr	r3, [pc, #64]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	fb03 f202 	mul.w	r2, r3, r2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	4b0a      	ldr	r3, [pc, #40]	@ (80039ac <HAL_RCC_GetSysClockFreq+0x108>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	0e5b      	lsrs	r3, r3, #25
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	3301      	adds	r3, #1
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	603b      	str	r3, [r7, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	fbb2 f3f3 	udiv	r3, r2, r3
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	4618      	mov	r0, r3
 80039a0:	3724      	adds	r7, #36	@ 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	08005dfc 	.word	0x08005dfc
 80039b4:	00f42400 	.word	0x00f42400
 80039b8:	007a1200 	.word	0x007a1200

080039bc <HAL_RCC_GetHCLKFreq>:
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4b03      	ldr	r3, [pc, #12]	@ (80039d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	20000000 	.word	0x20000000

080039d4 <HAL_RCC_GetPCLK1Freq>:
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	f7ff fff0 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4904      	ldr	r1, [pc, #16]	@ (80039fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	f003 031f 	and.w	r3, r3, #31
 80039f0:	fa22 f303 	lsr.w	r3, r2, r3
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08005df4 	.word	0x08005df4

08003a00 <HAL_RCC_GetPCLK2Freq>:
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	f7ff ffda 	bl	80039bc <HAL_RCC_GetHCLKFreq>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	4b06      	ldr	r3, [pc, #24]	@ (8003a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	0adb      	lsrs	r3, r3, #11
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	4904      	ldr	r1, [pc, #16]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a16:	5ccb      	ldrb	r3, [r1, r3]
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08005df4 	.word	0x08005df4

08003a2c <RCC_SetFlashLatencyFromMSIRange>:
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <RCC_SetFlashLatencyFromMSIRange+0x20>
 8003a44:	f7ff f922 	bl	8002c8c <HAL_PWREx_GetVoltageRange>
 8003a48:	6178      	str	r0, [r7, #20]
 8003a4a:	e014      	b.n	8003a76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8003a4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	4a24      	ldr	r2, [pc, #144]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a58:	4b22      	ldr	r3, [pc, #136]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f7ff f912 	bl	8002c8c <HAL_PWREx_GetVoltageRange>
 8003a68:	6178      	str	r0, [r7, #20]
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a7c:	d10b      	bne.n	8003a96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b80      	cmp	r3, #128	@ 0x80
 8003a82:	d919      	bls.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a88:	d902      	bls.n	8003a90 <RCC_SetFlashLatencyFromMSIRange+0x64>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	e013      	b.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003a90:	2301      	movs	r3, #1
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	e010      	b.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b80      	cmp	r3, #128	@ 0x80
 8003a9a:	d902      	bls.n	8003aa2 <RCC_SetFlashLatencyFromMSIRange+0x76>
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	e00a      	b.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b80      	cmp	r3, #128	@ 0x80
 8003aa6:	d102      	bne.n	8003aae <RCC_SetFlashLatencyFromMSIRange+0x82>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	613b      	str	r3, [r7, #16]
 8003aac:	e004      	b.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2b70      	cmp	r3, #112	@ 0x70
 8003ab2:	d101      	bne.n	8003ab8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 0207 	bic.w	r2, r3, #7
 8003ac0:	4909      	ldr	r1, [pc, #36]	@ (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	600b      	str	r3, [r1, #0]
 8003ac8:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d001      	beq.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0xae>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8003ada:	2300      	movs	r3, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40022000 	.word	0x40022000

08003aec <HAL_RCCEx_PeriphCLKConfig>:
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	2300      	movs	r3, #0
 8003af6:	74fb      	strb	r3, [r7, #19]
 8003af8:	2300      	movs	r3, #0
 8003afa:	74bb      	strb	r3, [r7, #18]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d041      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b10:	d02a      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b16:	d824      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b1c:	d008      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b22:	d81e      	bhi.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b2c:	d010      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b2e:	e018      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b30:	4b86      	ldr	r3, [pc, #536]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a85      	ldr	r2, [pc, #532]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b3a:	60d3      	str	r3, [r2, #12]
 8003b3c:	e015      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3304      	adds	r3, #4
 8003b42:	2100      	movs	r1, #0
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 facb 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	74fb      	strb	r3, [r7, #19]
 8003b4e:	e00c      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3320      	adds	r3, #32
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fbb6 	bl	80042c8 <RCCEx_PLLSAI2_Config>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	74fb      	strb	r3, [r7, #19]
 8003b60:	e003      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003b62:	2301      	movs	r3, #1
 8003b64:	74fb      	strb	r3, [r7, #19]
 8003b66:	e000      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003b68:	bf00      	nop
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003b70:	4b76      	ldr	r3, [pc, #472]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b7e:	4973      	ldr	r1, [pc, #460]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b86:	e001      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003b88:	7cfb      	ldrb	r3, [r7, #19]
 8003b8a:	74bb      	strb	r3, [r7, #18]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d041      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ba0:	d02a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ba2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ba6:	d824      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ba8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bac:	d008      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003bae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bb2:	d81e      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00a      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bbc:	d010      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bbe:	e018      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bc0:	4b62      	ldr	r3, [pc, #392]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a61      	ldr	r2, [pc, #388]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bca:	60d3      	str	r3, [r2, #12]
 8003bcc:	e015      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fa83 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	74fb      	strb	r3, [r7, #19]
 8003bde:	e00c      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3320      	adds	r3, #32
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fb6e 	bl	80042c8 <RCCEx_PLLSAI2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	74fb      	strb	r3, [r7, #19]
 8003bf0:	e003      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	74fb      	strb	r3, [r7, #19]
 8003bf6:	e000      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8003bf8:	bf00      	nop
 8003bfa:	7cfb      	ldrb	r3, [r7, #19]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10b      	bne.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003c00:	4b52      	ldr	r3, [pc, #328]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c0e:	494f      	ldr	r1, [pc, #316]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c16:	e001      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80a0 	beq.w	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	747b      	strb	r3, [r7, #17]
 8003c2e:	4b47      	ldr	r3, [pc, #284]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003c44:	4b41      	ldr	r3, [pc, #260]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c48:	4a40      	ldr	r2, [pc, #256]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c50:	4b3e      	ldr	r3, [pc, #248]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	747b      	strb	r3, [r7, #17]
 8003c60:	4b3b      	ldr	r3, [pc, #236]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a3a      	ldr	r2, [pc, #232]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	f7fe f9cc 	bl	8002008 <HAL_GetTick>
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	e009      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003c74:	f7fe f9c8 	bl	8002008 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d902      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003c82:	2303      	movs	r3, #3
 8003c84:	74fb      	strb	r3, [r7, #19]
 8003c86:	e005      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003c88:	4b31      	ldr	r3, [pc, #196]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ef      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d15c      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x268>
 8003c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01f      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d019      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003cb8:	4b24      	ldr	r3, [pc, #144]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	4b21      	ldr	r3, [pc, #132]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cca:	4a20      	ldr	r2, [pc, #128]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cda:	4a1c      	ldr	r2, [pc, #112]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ce0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ce4:	4a19      	ldr	r2, [pc, #100]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003cf6:	f7fe f987 	bl	8002008 <HAL_GetTick>
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	e00b      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003cfe:	f7fe f983 	bl	8002008 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d902      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003d10:	2303      	movs	r3, #3
 8003d12:	74fb      	strb	r3, [r7, #19]
 8003d14:	e006      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ec      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003d24:	7cfb      	ldrb	r3, [r7, #19]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003d2a:	4b08      	ldr	r3, [pc, #32]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d3a:	4904      	ldr	r1, [pc, #16]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d42:	e009      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	74bb      	strb	r3, [r7, #18]
 8003d48:	e006      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40007000 	.word	0x40007000
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	74bb      	strb	r3, [r7, #18]
 8003d58:	7c7b      	ldrb	r3, [r7, #17]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003d5e:	4b9e      	ldr	r3, [pc, #632]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d62:	4a9d      	ldr	r2, [pc, #628]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 8003d76:	4b98      	ldr	r3, [pc, #608]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7c:	f023 0203 	bic.w	r2, r3, #3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	4994      	ldr	r1, [pc, #592]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d98:	4b8f      	ldr	r3, [pc, #572]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9e:	f023 020c 	bic.w	r2, r3, #12
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	498c      	ldr	r1, [pc, #560]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8003dba:	4b87      	ldr	r3, [pc, #540]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	4983      	ldr	r1, [pc, #524]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003ddc:	4b7e      	ldr	r3, [pc, #504]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dea:	497b      	ldr	r1, [pc, #492]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0310 	and.w	r3, r3, #16
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8003dfe:	4b76      	ldr	r3, [pc, #472]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e0c:	4972      	ldr	r1, [pc, #456]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003e20:	4b6d      	ldr	r3, [pc, #436]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e2e:	496a      	ldr	r1, [pc, #424]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003e42:	4b65      	ldr	r3, [pc, #404]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e50:	4961      	ldr	r1, [pc, #388]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003e64:	4b5c      	ldr	r3, [pc, #368]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e72:	4959      	ldr	r1, [pc, #356]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8003e86:	4b54      	ldr	r3, [pc, #336]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e94:	4950      	ldr	r1, [pc, #320]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8003ea8:	4b4b      	ldr	r3, [pc, #300]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb6:	4948      	ldr	r1, [pc, #288]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003eca:	4b43      	ldr	r3, [pc, #268]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed8:	493f      	ldr	r1, [pc, #252]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d028      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003eec:	4b3a      	ldr	r3, [pc, #232]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003efa:	4937      	ldr	r1, [pc, #220]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003f0c:	4b32      	ldr	r3, [pc, #200]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a31      	ldr	r2, [pc, #196]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f16:	60d3      	str	r3, [r2, #12]
 8003f18:	e011      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f22:	d10c      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f8d8 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	74fb      	strb	r3, [r7, #19]
 8003f34:	7cfb      	ldrb	r3, [r7, #19]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003f3a:	7cfb      	ldrb	r3, [r7, #19]
 8003f3c:	74bb      	strb	r3, [r7, #18]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d028      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f4a:	4b23      	ldr	r3, [pc, #140]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f50:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f58:	491f      	ldr	r1, [pc, #124]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f68:	d106      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f70:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f74:	60d3      	str	r3, [r2, #12]
 8003f76:	e011      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3304      	adds	r3, #4
 8003f86:	2101      	movs	r1, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f8a9 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	74fb      	strb	r3, [r7, #19]
 8003f92:	7cfb      	ldrb	r3, [r7, #19]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	74bb      	strb	r3, [r7, #18]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d02b      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb6:	4908      	ldr	r1, [pc, #32]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fc6:	d109      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003fc8:	4b03      	ldr	r3, [pc, #12]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4a02      	ldr	r2, [pc, #8]	@ (8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fd2:	60d3      	str	r3, [r2, #12]
 8003fd4:	e014      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fe0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3304      	adds	r3, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f877 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	74fb      	strb	r3, [r7, #19]
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d02f      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x580>
 800400c:	4b2b      	ldr	r3, [pc, #172]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004012:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800401a:	4928      	ldr	r1, [pc, #160]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004026:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800402a:	d10d      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3304      	adds	r3, #4
 8004030:	2102      	movs	r1, #2
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f854 	bl	80040e0 <RCCEx_PLLSAI1_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	74fb      	strb	r3, [r7, #19]
 800403c:	7cfb      	ldrb	r3, [r7, #19]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d014      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004042:	7cfb      	ldrb	r3, [r7, #19]
 8004044:	74bb      	strb	r3, [r7, #18]
 8004046:	e011      	b.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800404c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004050:	d10c      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3320      	adds	r3, #32
 8004056:	2102      	movs	r1, #2
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f935 	bl	80042c8 <RCCEx_PLLSAI2_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	74fb      	strb	r3, [r7, #19]
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004068:	7cfb      	ldrb	r3, [r7, #19]
 800406a:	74bb      	strb	r3, [r7, #18]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00a      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004078:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800407e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004086:	490d      	ldr	r1, [pc, #52]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
 800409a:	4b08      	ldr	r3, [pc, #32]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800409c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040aa:	4904      	ldr	r1, [pc, #16]	@ (80040bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80040b2:	7cbb      	ldrb	r3, [r7, #18]
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000

080040c0 <HAL_RCCEx_EnableMSIPLLMode>:
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a04      	ldr	r2, [pc, #16]	@ (80040dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80040ca:	f043 0304 	orr.w	r3, r3, #4
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40021000 	.word	0x40021000

080040e0 <RCCEx_PLLSAI1_Config>:
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
 80040ee:	4b75      	ldr	r3, [pc, #468]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d018      	beq.n	800412c <RCCEx_PLLSAI1_Config+0x4c>
 80040fa:	4b72      	ldr	r3, [pc, #456]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f003 0203 	and.w	r2, r3, #3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d10d      	bne.n	8004126 <RCCEx_PLLSAI1_Config+0x46>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d009      	beq.n	8004126 <RCCEx_PLLSAI1_Config+0x46>
 8004112:	4b6c      	ldr	r3, [pc, #432]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	429a      	cmp	r2, r3
 8004124:	d047      	beq.n	80041b6 <RCCEx_PLLSAI1_Config+0xd6>
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
 800412a:	e044      	b.n	80041b6 <RCCEx_PLLSAI1_Config+0xd6>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d018      	beq.n	8004166 <RCCEx_PLLSAI1_Config+0x86>
 8004134:	2b03      	cmp	r3, #3
 8004136:	d825      	bhi.n	8004184 <RCCEx_PLLSAI1_Config+0xa4>
 8004138:	2b01      	cmp	r3, #1
 800413a:	d002      	beq.n	8004142 <RCCEx_PLLSAI1_Config+0x62>
 800413c:	2b02      	cmp	r3, #2
 800413e:	d009      	beq.n	8004154 <RCCEx_PLLSAI1_Config+0x74>
 8004140:	e020      	b.n	8004184 <RCCEx_PLLSAI1_Config+0xa4>
 8004142:	4b60      	ldr	r3, [pc, #384]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11d      	bne.n	800418a <RCCEx_PLLSAI1_Config+0xaa>
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
 8004152:	e01a      	b.n	800418a <RCCEx_PLLSAI1_Config+0xaa>
 8004154:	4b5b      	ldr	r3, [pc, #364]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800415c:	2b00      	cmp	r3, #0
 800415e:	d116      	bne.n	800418e <RCCEx_PLLSAI1_Config+0xae>
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
 8004164:	e013      	b.n	800418e <RCCEx_PLLSAI1_Config+0xae>
 8004166:	4b57      	ldr	r3, [pc, #348]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10f      	bne.n	8004192 <RCCEx_PLLSAI1_Config+0xb2>
 8004172:	4b54      	ldr	r3, [pc, #336]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d109      	bne.n	8004192 <RCCEx_PLLSAI1_Config+0xb2>
 800417e:	2301      	movs	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
 8004182:	e006      	b.n	8004192 <RCCEx_PLLSAI1_Config+0xb2>
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
 8004188:	e004      	b.n	8004194 <RCCEx_PLLSAI1_Config+0xb4>
 800418a:	bf00      	nop
 800418c:	e002      	b.n	8004194 <RCCEx_PLLSAI1_Config+0xb4>
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <RCCEx_PLLSAI1_Config+0xb4>
 8004192:	bf00      	nop
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10d      	bne.n	80041b6 <RCCEx_PLLSAI1_Config+0xd6>
 800419a:	4b4a      	ldr	r3, [pc, #296]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6819      	ldr	r1, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	430b      	orrs	r3, r1
 80041b0:	4944      	ldr	r1, [pc, #272]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60cb      	str	r3, [r1, #12]
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d17d      	bne.n	80042b8 <RCCEx_PLLSAI1_Config+0x1d8>
 80041bc:	4b41      	ldr	r3, [pc, #260]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a40      	ldr	r2, [pc, #256]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	f7fd ff1e 	bl	8002008 <HAL_GetTick>
 80041cc:	60b8      	str	r0, [r7, #8]
 80041ce:	e009      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0x104>
 80041d0:	f7fd ff1a 	bl	8002008 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d902      	bls.n	80041e4 <RCCEx_PLLSAI1_Config+0x104>
 80041de:	2303      	movs	r3, #3
 80041e0:	73fb      	strb	r3, [r7, #15]
 80041e2:	e005      	b.n	80041f0 <RCCEx_PLLSAI1_Config+0x110>
 80041e4:	4b37      	ldr	r3, [pc, #220]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1ef      	bne.n	80041d0 <RCCEx_PLLSAI1_Config+0xf0>
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d160      	bne.n	80042b8 <RCCEx_PLLSAI1_Config+0x1d8>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d111      	bne.n	8004220 <RCCEx_PLLSAI1_Config+0x140>
 80041fc:	4b31      	ldr	r3, [pc, #196]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6892      	ldr	r2, [r2, #8]
 800420c:	0211      	lsls	r1, r2, #8
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68d2      	ldr	r2, [r2, #12]
 8004212:	0912      	lsrs	r2, r2, #4
 8004214:	0452      	lsls	r2, r2, #17
 8004216:	430a      	orrs	r2, r1
 8004218:	492a      	ldr	r1, [pc, #168]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	610b      	str	r3, [r1, #16]
 800421e:	e027      	b.n	8004270 <RCCEx_PLLSAI1_Config+0x190>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d112      	bne.n	800424c <RCCEx_PLLSAI1_Config+0x16c>
 8004226:	4b27      	ldr	r3, [pc, #156]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800422e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6892      	ldr	r2, [r2, #8]
 8004236:	0211      	lsls	r1, r2, #8
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6912      	ldr	r2, [r2, #16]
 800423c:	0852      	lsrs	r2, r2, #1
 800423e:	3a01      	subs	r2, #1
 8004240:	0552      	lsls	r2, r2, #21
 8004242:	430a      	orrs	r2, r1
 8004244:	491f      	ldr	r1, [pc, #124]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004246:	4313      	orrs	r3, r2
 8004248:	610b      	str	r3, [r1, #16]
 800424a:	e011      	b.n	8004270 <RCCEx_PLLSAI1_Config+0x190>
 800424c:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004254:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6892      	ldr	r2, [r2, #8]
 800425c:	0211      	lsls	r1, r2, #8
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6952      	ldr	r2, [r2, #20]
 8004262:	0852      	lsrs	r2, r2, #1
 8004264:	3a01      	subs	r2, #1
 8004266:	0652      	lsls	r2, r2, #25
 8004268:	430a      	orrs	r2, r1
 800426a:	4916      	ldr	r1, [pc, #88]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800426c:	4313      	orrs	r3, r2
 800426e:	610b      	str	r3, [r1, #16]
 8004270:	4b14      	ldr	r3, [pc, #80]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a13      	ldr	r2, [pc, #76]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004276:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	f7fd fec4 	bl	8002008 <HAL_GetTick>
 8004280:	60b8      	str	r0, [r7, #8]
 8004282:	e009      	b.n	8004298 <RCCEx_PLLSAI1_Config+0x1b8>
 8004284:	f7fd fec0 	bl	8002008 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b02      	cmp	r3, #2
 8004290:	d902      	bls.n	8004298 <RCCEx_PLLSAI1_Config+0x1b8>
 8004292:	2303      	movs	r3, #3
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	e005      	b.n	80042a4 <RCCEx_PLLSAI1_Config+0x1c4>
 8004298:	4b0a      	ldr	r3, [pc, #40]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0ef      	beq.n	8004284 <RCCEx_PLLSAI1_Config+0x1a4>
 80042a4:	7bfb      	ldrb	r3, [r7, #15]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <RCCEx_PLLSAI1_Config+0x1d8>
 80042aa:	4b06      	ldr	r3, [pc, #24]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042ac:	691a      	ldr	r2, [r3, #16]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	4904      	ldr	r1, [pc, #16]	@ (80042c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	610b      	str	r3, [r1, #16]
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40021000 	.word	0x40021000

080042c8 <RCCEx_PLLSAI2_Config>:
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
 80042d2:	2300      	movs	r3, #0
 80042d4:	73fb      	strb	r3, [r7, #15]
 80042d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d018      	beq.n	8004314 <RCCEx_PLLSAI2_Config+0x4c>
 80042e2:	4b67      	ldr	r3, [pc, #412]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0203 	and.w	r2, r3, #3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d10d      	bne.n	800430e <RCCEx_PLLSAI2_Config+0x46>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d009      	beq.n	800430e <RCCEx_PLLSAI2_Config+0x46>
 80042fa:	4b61      	ldr	r3, [pc, #388]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	091b      	lsrs	r3, r3, #4
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	429a      	cmp	r2, r3
 800430c:	d047      	beq.n	800439e <RCCEx_PLLSAI2_Config+0xd6>
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
 8004312:	e044      	b.n	800439e <RCCEx_PLLSAI2_Config+0xd6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d018      	beq.n	800434e <RCCEx_PLLSAI2_Config+0x86>
 800431c:	2b03      	cmp	r3, #3
 800431e:	d825      	bhi.n	800436c <RCCEx_PLLSAI2_Config+0xa4>
 8004320:	2b01      	cmp	r3, #1
 8004322:	d002      	beq.n	800432a <RCCEx_PLLSAI2_Config+0x62>
 8004324:	2b02      	cmp	r3, #2
 8004326:	d009      	beq.n	800433c <RCCEx_PLLSAI2_Config+0x74>
 8004328:	e020      	b.n	800436c <RCCEx_PLLSAI2_Config+0xa4>
 800432a:	4b55      	ldr	r3, [pc, #340]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d11d      	bne.n	8004372 <RCCEx_PLLSAI2_Config+0xaa>
 8004336:	2301      	movs	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
 800433a:	e01a      	b.n	8004372 <RCCEx_PLLSAI2_Config+0xaa>
 800433c:	4b50      	ldr	r3, [pc, #320]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004344:	2b00      	cmp	r3, #0
 8004346:	d116      	bne.n	8004376 <RCCEx_PLLSAI2_Config+0xae>
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e013      	b.n	8004376 <RCCEx_PLLSAI2_Config+0xae>
 800434e:	4b4c      	ldr	r3, [pc, #304]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10f      	bne.n	800437a <RCCEx_PLLSAI2_Config+0xb2>
 800435a:	4b49      	ldr	r3, [pc, #292]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d109      	bne.n	800437a <RCCEx_PLLSAI2_Config+0xb2>
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
 800436a:	e006      	b.n	800437a <RCCEx_PLLSAI2_Config+0xb2>
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
 8004370:	e004      	b.n	800437c <RCCEx_PLLSAI2_Config+0xb4>
 8004372:	bf00      	nop
 8004374:	e002      	b.n	800437c <RCCEx_PLLSAI2_Config+0xb4>
 8004376:	bf00      	nop
 8004378:	e000      	b.n	800437c <RCCEx_PLLSAI2_Config+0xb4>
 800437a:	bf00      	nop
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10d      	bne.n	800439e <RCCEx_PLLSAI2_Config+0xd6>
 8004382:	4b3f      	ldr	r3, [pc, #252]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6819      	ldr	r1, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	3b01      	subs	r3, #1
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	430b      	orrs	r3, r1
 8004398:	4939      	ldr	r1, [pc, #228]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	60cb      	str	r3, [r1, #12]
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d167      	bne.n	8004474 <RCCEx_PLLSAI2_Config+0x1ac>
 80043a4:	4b36      	ldr	r3, [pc, #216]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a35      	ldr	r2, [pc, #212]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	f7fd fe2a 	bl	8002008 <HAL_GetTick>
 80043b4:	60b8      	str	r0, [r7, #8]
 80043b6:	e009      	b.n	80043cc <RCCEx_PLLSAI2_Config+0x104>
 80043b8:	f7fd fe26 	bl	8002008 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d902      	bls.n	80043cc <RCCEx_PLLSAI2_Config+0x104>
 80043c6:	2303      	movs	r3, #3
 80043c8:	73fb      	strb	r3, [r7, #15]
 80043ca:	e005      	b.n	80043d8 <RCCEx_PLLSAI2_Config+0x110>
 80043cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1ef      	bne.n	80043b8 <RCCEx_PLLSAI2_Config+0xf0>
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d14a      	bne.n	8004474 <RCCEx_PLLSAI2_Config+0x1ac>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d111      	bne.n	8004408 <RCCEx_PLLSAI2_Config+0x140>
 80043e4:	4b26      	ldr	r3, [pc, #152]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80043ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6892      	ldr	r2, [r2, #8]
 80043f4:	0211      	lsls	r1, r2, #8
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	68d2      	ldr	r2, [r2, #12]
 80043fa:	0912      	lsrs	r2, r2, #4
 80043fc:	0452      	lsls	r2, r2, #17
 80043fe:	430a      	orrs	r2, r1
 8004400:	491f      	ldr	r1, [pc, #124]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004402:	4313      	orrs	r3, r2
 8004404:	614b      	str	r3, [r1, #20]
 8004406:	e011      	b.n	800442c <RCCEx_PLLSAI2_Config+0x164>
 8004408:	4b1d      	ldr	r3, [pc, #116]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004410:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6892      	ldr	r2, [r2, #8]
 8004418:	0211      	lsls	r1, r2, #8
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6912      	ldr	r2, [r2, #16]
 800441e:	0852      	lsrs	r2, r2, #1
 8004420:	3a01      	subs	r2, #1
 8004422:	0652      	lsls	r2, r2, #25
 8004424:	430a      	orrs	r2, r1
 8004426:	4916      	ldr	r1, [pc, #88]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004428:	4313      	orrs	r3, r2
 800442a:	614b      	str	r3, [r1, #20]
 800442c:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a13      	ldr	r2, [pc, #76]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	f7fd fde6 	bl	8002008 <HAL_GetTick>
 800443c:	60b8      	str	r0, [r7, #8]
 800443e:	e009      	b.n	8004454 <RCCEx_PLLSAI2_Config+0x18c>
 8004440:	f7fd fde2 	bl	8002008 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d902      	bls.n	8004454 <RCCEx_PLLSAI2_Config+0x18c>
 800444e:	2303      	movs	r3, #3
 8004450:	73fb      	strb	r3, [r7, #15]
 8004452:	e005      	b.n	8004460 <RCCEx_PLLSAI2_Config+0x198>
 8004454:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0ef      	beq.n	8004440 <RCCEx_PLLSAI2_Config+0x178>
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <RCCEx_PLLSAI2_Config+0x1ac>
 8004466:	4b06      	ldr	r3, [pc, #24]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	4904      	ldr	r1, [pc, #16]	@ (8004480 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004470:	4313      	orrs	r3, r2
 8004472:	614b      	str	r3, [r1, #20]
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000

08004484 <HAL_SPI_Init>:
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_SPI_Init+0x12>
 8004492:	2301      	movs	r3, #1
 8004494:	e095      	b.n	80045c2 <HAL_SPI_Init+0x13e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449a:	2b00      	cmp	r3, #0
 800449c:	d108      	bne.n	80044b0 <HAL_SPI_Init+0x2c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044a6:	d009      	beq.n	80044bc <HAL_SPI_Init+0x38>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	61da      	str	r2, [r3, #28]
 80044ae:	e005      	b.n	80044bc <HAL_SPI_Init+0x38>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	611a      	str	r2, [r3, #16]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	615a      	str	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <HAL_SPI_Init+0x58>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fd fab4 	bl	8001a44 <HAL_SPI_MspInit>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044fc:	d902      	bls.n	8004504 <HAL_SPI_Init+0x80>
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	e002      	b.n	800450a <HAL_SPI_Init+0x86>
 8004504:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004512:	d007      	beq.n	8004524 <HAL_SPI_Init+0xa0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800451c:	d002      	beq.n	8004524 <HAL_SPI_Init+0xa0>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	629a      	str	r2, [r3, #40]	@ 0x28
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004566:	ea42 0103 	orr.w	r1, r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	f003 0204 	and.w	r2, r3, #4
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004588:	f003 0310 	and.w	r3, r3, #16
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80045a0:	ea42 0103 	orr.w	r1, r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	661a      	str	r2, [r3, #96]	@ 0x60
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80045c0:	2300      	movs	r3, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_UART_Init>:
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_UART_Init+0x12>
 80045d8:	2301      	movs	r3, #1
 80045da:	e040      	b.n	800465e <HAL_UART_Init+0x94>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d106      	bne.n	80045f2 <HAL_UART_Init+0x28>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fd fa6d 	bl	8001acc <HAL_UART_MspInit>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2224      	movs	r2, #36	@ 0x24
 80045f6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_UART_Init+0x4c>
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fae1 	bl	8004bd8 <UART_AdvFeatureConfig>
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f826 	bl	8004668 <UART_SetConfig>
 800461c:	4603      	mov	r3, r0
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <HAL_UART_Init+0x5c>
 8004622:	2301      	movs	r3, #1
 8004624:	e01b      	b.n	800465e <HAL_UART_Init+0x94>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004644:	609a      	str	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f042 0201 	orr.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fb60 	bl	8004d1c <UART_CheckIdleState>
 800465c:	4603      	mov	r3, r0
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <UART_SetConfig>:
 8004668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800466c:	b08a      	sub	sp, #40	@ 0x28
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	2300      	movs	r3, #0
 8004674:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	431a      	orrs	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	431a      	orrs	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4313      	orrs	r3, r2
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4ba4      	ldr	r3, [pc, #656]	@ (8004928 <UART_SetConfig+0x2c0>)
 8004698:	4013      	ands	r3, r2
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	605a      	str	r2, [r3, #4]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a99      	ldr	r2, [pc, #612]	@ (800492c <UART_SetConfig+0x2c4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <UART_SetConfig+0x6c>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d0:	4313      	orrs	r3, r2
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e4:	430a      	orrs	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a90      	ldr	r2, [pc, #576]	@ (8004930 <UART_SetConfig+0x2c8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d126      	bne.n	8004740 <UART_SetConfig+0xd8>
 80046f2:	4b90      	ldr	r3, [pc, #576]	@ (8004934 <UART_SetConfig+0x2cc>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d81b      	bhi.n	8004738 <UART_SetConfig+0xd0>
 8004700:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <UART_SetConfig+0xa0>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	08004719 	.word	0x08004719
 800470c:	08004729 	.word	0x08004729
 8004710:	08004721 	.word	0x08004721
 8004714:	08004731 	.word	0x08004731
 8004718:	2301      	movs	r3, #1
 800471a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471e:	e116      	b.n	800494e <UART_SetConfig+0x2e6>
 8004720:	2302      	movs	r3, #2
 8004722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004726:	e112      	b.n	800494e <UART_SetConfig+0x2e6>
 8004728:	2304      	movs	r3, #4
 800472a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472e:	e10e      	b.n	800494e <UART_SetConfig+0x2e6>
 8004730:	2308      	movs	r3, #8
 8004732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004736:	e10a      	b.n	800494e <UART_SetConfig+0x2e6>
 8004738:	2310      	movs	r3, #16
 800473a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473e:	e106      	b.n	800494e <UART_SetConfig+0x2e6>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a7c      	ldr	r2, [pc, #496]	@ (8004938 <UART_SetConfig+0x2d0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d138      	bne.n	80047bc <UART_SetConfig+0x154>
 800474a:	4b7a      	ldr	r3, [pc, #488]	@ (8004934 <UART_SetConfig+0x2cc>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004750:	f003 030c 	and.w	r3, r3, #12
 8004754:	2b0c      	cmp	r3, #12
 8004756:	d82d      	bhi.n	80047b4 <UART_SetConfig+0x14c>
 8004758:	a201      	add	r2, pc, #4	@ (adr r2, 8004760 <UART_SetConfig+0xf8>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004795 	.word	0x08004795
 8004764:	080047b5 	.word	0x080047b5
 8004768:	080047b5 	.word	0x080047b5
 800476c:	080047b5 	.word	0x080047b5
 8004770:	080047a5 	.word	0x080047a5
 8004774:	080047b5 	.word	0x080047b5
 8004778:	080047b5 	.word	0x080047b5
 800477c:	080047b5 	.word	0x080047b5
 8004780:	0800479d 	.word	0x0800479d
 8004784:	080047b5 	.word	0x080047b5
 8004788:	080047b5 	.word	0x080047b5
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047ad 	.word	0x080047ad
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479a:	e0d8      	b.n	800494e <UART_SetConfig+0x2e6>
 800479c:	2302      	movs	r3, #2
 800479e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047a2:	e0d4      	b.n	800494e <UART_SetConfig+0x2e6>
 80047a4:	2304      	movs	r3, #4
 80047a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047aa:	e0d0      	b.n	800494e <UART_SetConfig+0x2e6>
 80047ac:	2308      	movs	r3, #8
 80047ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047b2:	e0cc      	b.n	800494e <UART_SetConfig+0x2e6>
 80047b4:	2310      	movs	r3, #16
 80047b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ba:	e0c8      	b.n	800494e <UART_SetConfig+0x2e6>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a5e      	ldr	r2, [pc, #376]	@ (800493c <UART_SetConfig+0x2d4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d125      	bne.n	8004812 <UART_SetConfig+0x1aa>
 80047c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004934 <UART_SetConfig+0x2cc>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047d0:	2b30      	cmp	r3, #48	@ 0x30
 80047d2:	d016      	beq.n	8004802 <UART_SetConfig+0x19a>
 80047d4:	2b30      	cmp	r3, #48	@ 0x30
 80047d6:	d818      	bhi.n	800480a <UART_SetConfig+0x1a2>
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d00a      	beq.n	80047f2 <UART_SetConfig+0x18a>
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d814      	bhi.n	800480a <UART_SetConfig+0x1a2>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <UART_SetConfig+0x182>
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d008      	beq.n	80047fa <UART_SetConfig+0x192>
 80047e8:	e00f      	b.n	800480a <UART_SetConfig+0x1a2>
 80047ea:	2300      	movs	r3, #0
 80047ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f0:	e0ad      	b.n	800494e <UART_SetConfig+0x2e6>
 80047f2:	2302      	movs	r3, #2
 80047f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f8:	e0a9      	b.n	800494e <UART_SetConfig+0x2e6>
 80047fa:	2304      	movs	r3, #4
 80047fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004800:	e0a5      	b.n	800494e <UART_SetConfig+0x2e6>
 8004802:	2308      	movs	r3, #8
 8004804:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004808:	e0a1      	b.n	800494e <UART_SetConfig+0x2e6>
 800480a:	2310      	movs	r3, #16
 800480c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004810:	e09d      	b.n	800494e <UART_SetConfig+0x2e6>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a4a      	ldr	r2, [pc, #296]	@ (8004940 <UART_SetConfig+0x2d8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d125      	bne.n	8004868 <UART_SetConfig+0x200>
 800481c:	4b45      	ldr	r3, [pc, #276]	@ (8004934 <UART_SetConfig+0x2cc>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004822:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004826:	2bc0      	cmp	r3, #192	@ 0xc0
 8004828:	d016      	beq.n	8004858 <UART_SetConfig+0x1f0>
 800482a:	2bc0      	cmp	r3, #192	@ 0xc0
 800482c:	d818      	bhi.n	8004860 <UART_SetConfig+0x1f8>
 800482e:	2b80      	cmp	r3, #128	@ 0x80
 8004830:	d00a      	beq.n	8004848 <UART_SetConfig+0x1e0>
 8004832:	2b80      	cmp	r3, #128	@ 0x80
 8004834:	d814      	bhi.n	8004860 <UART_SetConfig+0x1f8>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <UART_SetConfig+0x1d8>
 800483a:	2b40      	cmp	r3, #64	@ 0x40
 800483c:	d008      	beq.n	8004850 <UART_SetConfig+0x1e8>
 800483e:	e00f      	b.n	8004860 <UART_SetConfig+0x1f8>
 8004840:	2300      	movs	r3, #0
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004846:	e082      	b.n	800494e <UART_SetConfig+0x2e6>
 8004848:	2302      	movs	r3, #2
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484e:	e07e      	b.n	800494e <UART_SetConfig+0x2e6>
 8004850:	2304      	movs	r3, #4
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004856:	e07a      	b.n	800494e <UART_SetConfig+0x2e6>
 8004858:	2308      	movs	r3, #8
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800485e:	e076      	b.n	800494e <UART_SetConfig+0x2e6>
 8004860:	2310      	movs	r3, #16
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004866:	e072      	b.n	800494e <UART_SetConfig+0x2e6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a35      	ldr	r2, [pc, #212]	@ (8004944 <UART_SetConfig+0x2dc>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d12a      	bne.n	80048c8 <UART_SetConfig+0x260>
 8004872:	4b30      	ldr	r3, [pc, #192]	@ (8004934 <UART_SetConfig+0x2cc>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800487c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004880:	d01a      	beq.n	80048b8 <UART_SetConfig+0x250>
 8004882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004886:	d81b      	bhi.n	80048c0 <UART_SetConfig+0x258>
 8004888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800488c:	d00c      	beq.n	80048a8 <UART_SetConfig+0x240>
 800488e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004892:	d815      	bhi.n	80048c0 <UART_SetConfig+0x258>
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <UART_SetConfig+0x238>
 8004898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800489c:	d008      	beq.n	80048b0 <UART_SetConfig+0x248>
 800489e:	e00f      	b.n	80048c0 <UART_SetConfig+0x258>
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a6:	e052      	b.n	800494e <UART_SetConfig+0x2e6>
 80048a8:	2302      	movs	r3, #2
 80048aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ae:	e04e      	b.n	800494e <UART_SetConfig+0x2e6>
 80048b0:	2304      	movs	r3, #4
 80048b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048b6:	e04a      	b.n	800494e <UART_SetConfig+0x2e6>
 80048b8:	2308      	movs	r3, #8
 80048ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048be:	e046      	b.n	800494e <UART_SetConfig+0x2e6>
 80048c0:	2310      	movs	r3, #16
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c6:	e042      	b.n	800494e <UART_SetConfig+0x2e6>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a17      	ldr	r2, [pc, #92]	@ (800492c <UART_SetConfig+0x2c4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d13a      	bne.n	8004948 <UART_SetConfig+0x2e0>
 80048d2:	4b18      	ldr	r3, [pc, #96]	@ (8004934 <UART_SetConfig+0x2cc>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048e0:	d01a      	beq.n	8004918 <UART_SetConfig+0x2b0>
 80048e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048e6:	d81b      	bhi.n	8004920 <UART_SetConfig+0x2b8>
 80048e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048ec:	d00c      	beq.n	8004908 <UART_SetConfig+0x2a0>
 80048ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048f2:	d815      	bhi.n	8004920 <UART_SetConfig+0x2b8>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d003      	beq.n	8004900 <UART_SetConfig+0x298>
 80048f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048fc:	d008      	beq.n	8004910 <UART_SetConfig+0x2a8>
 80048fe:	e00f      	b.n	8004920 <UART_SetConfig+0x2b8>
 8004900:	2300      	movs	r3, #0
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004906:	e022      	b.n	800494e <UART_SetConfig+0x2e6>
 8004908:	2302      	movs	r3, #2
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490e:	e01e      	b.n	800494e <UART_SetConfig+0x2e6>
 8004910:	2304      	movs	r3, #4
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004916:	e01a      	b.n	800494e <UART_SetConfig+0x2e6>
 8004918:	2308      	movs	r3, #8
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800491e:	e016      	b.n	800494e <UART_SetConfig+0x2e6>
 8004920:	2310      	movs	r3, #16
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004926:	e012      	b.n	800494e <UART_SetConfig+0x2e6>
 8004928:	efff69f3 	.word	0xefff69f3
 800492c:	40008000 	.word	0x40008000
 8004930:	40013800 	.word	0x40013800
 8004934:	40021000 	.word	0x40021000
 8004938:	40004400 	.word	0x40004400
 800493c:	40004800 	.word	0x40004800
 8004940:	40004c00 	.word	0x40004c00
 8004944:	40005000 	.word	0x40005000
 8004948:	2310      	movs	r3, #16
 800494a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a9f      	ldr	r2, [pc, #636]	@ (8004bd0 <UART_SetConfig+0x568>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d17a      	bne.n	8004a4e <UART_SetConfig+0x3e6>
 8004958:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800495c:	2b08      	cmp	r3, #8
 800495e:	d824      	bhi.n	80049aa <UART_SetConfig+0x342>
 8004960:	a201      	add	r2, pc, #4	@ (adr r2, 8004968 <UART_SetConfig+0x300>)
 8004962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004966:	bf00      	nop
 8004968:	0800498d 	.word	0x0800498d
 800496c:	080049ab 	.word	0x080049ab
 8004970:	08004995 	.word	0x08004995
 8004974:	080049ab 	.word	0x080049ab
 8004978:	0800499b 	.word	0x0800499b
 800497c:	080049ab 	.word	0x080049ab
 8004980:	080049ab 	.word	0x080049ab
 8004984:	080049ab 	.word	0x080049ab
 8004988:	080049a3 	.word	0x080049a3
 800498c:	f7ff f822 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8004990:	61f8      	str	r0, [r7, #28]
 8004992:	e010      	b.n	80049b6 <UART_SetConfig+0x34e>
 8004994:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd4 <UART_SetConfig+0x56c>)
 8004996:	61fb      	str	r3, [r7, #28]
 8004998:	e00d      	b.n	80049b6 <UART_SetConfig+0x34e>
 800499a:	f7fe ff83 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 800499e:	61f8      	str	r0, [r7, #28]
 80049a0:	e009      	b.n	80049b6 <UART_SetConfig+0x34e>
 80049a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a6:	61fb      	str	r3, [r7, #28]
 80049a8:	e005      	b.n	80049b6 <UART_SetConfig+0x34e>
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049b4:	bf00      	nop
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80fb 	beq.w	8004bb4 <UART_SetConfig+0x54c>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4413      	add	r3, r2
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d305      	bcc.n	80049da <UART_SetConfig+0x372>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	031b      	lsls	r3, r3, #12
 80049d4:	69fa      	ldr	r2, [r7, #28]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d903      	bls.n	80049e2 <UART_SetConfig+0x37a>
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049e0:	e0e8      	b.n	8004bb4 <UART_SetConfig+0x54c>
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2200      	movs	r2, #0
 80049e6:	461c      	mov	r4, r3
 80049e8:	4615      	mov	r5, r2
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	022b      	lsls	r3, r5, #8
 80049f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049f8:	0222      	lsls	r2, r4, #8
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	6849      	ldr	r1, [r1, #4]
 80049fe:	0849      	lsrs	r1, r1, #1
 8004a00:	2000      	movs	r0, #0
 8004a02:	4688      	mov	r8, r1
 8004a04:	4681      	mov	r9, r0
 8004a06:	eb12 0a08 	adds.w	sl, r2, r8
 8004a0a:	eb43 0b09 	adc.w	fp, r3, r9
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	603b      	str	r3, [r7, #0]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a1c:	4650      	mov	r0, sl
 8004a1e:	4659      	mov	r1, fp
 8004a20:	f7fb fbd2 	bl	80001c8 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a32:	d308      	bcc.n	8004a46 <UART_SetConfig+0x3de>
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a3a:	d204      	bcs.n	8004a46 <UART_SetConfig+0x3de>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	60da      	str	r2, [r3, #12]
 8004a44:	e0b6      	b.n	8004bb4 <UART_SetConfig+0x54c>
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a4c:	e0b2      	b.n	8004bb4 <UART_SetConfig+0x54c>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a56:	d15e      	bne.n	8004b16 <UART_SetConfig+0x4ae>
 8004a58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d828      	bhi.n	8004ab2 <UART_SetConfig+0x44a>
 8004a60:	a201      	add	r2, pc, #4	@ (adr r2, 8004a68 <UART_SetConfig+0x400>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	08004ab3 	.word	0x08004ab3
 8004a78:	08004aa3 	.word	0x08004aa3
 8004a7c:	08004ab3 	.word	0x08004ab3
 8004a80:	08004ab3 	.word	0x08004ab3
 8004a84:	08004ab3 	.word	0x08004ab3
 8004a88:	08004aab 	.word	0x08004aab
 8004a8c:	f7fe ffa2 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8004a90:	61f8      	str	r0, [r7, #28]
 8004a92:	e014      	b.n	8004abe <UART_SetConfig+0x456>
 8004a94:	f7fe ffb4 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8004a98:	61f8      	str	r0, [r7, #28]
 8004a9a:	e010      	b.n	8004abe <UART_SetConfig+0x456>
 8004a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8004bd4 <UART_SetConfig+0x56c>)
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e00d      	b.n	8004abe <UART_SetConfig+0x456>
 8004aa2:	f7fe feff 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8004aa6:	61f8      	str	r0, [r7, #28]
 8004aa8:	e009      	b.n	8004abe <UART_SetConfig+0x456>
 8004aaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aae:	61fb      	str	r3, [r7, #28]
 8004ab0:	e005      	b.n	8004abe <UART_SetConfig+0x456>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	61fb      	str	r3, [r7, #28]
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004abc:	bf00      	nop
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d077      	beq.n	8004bb4 <UART_SetConfig+0x54c>
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	005a      	lsls	r2, r3, #1
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	085b      	lsrs	r3, r3, #1
 8004ace:	441a      	add	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b0f      	cmp	r3, #15
 8004ade:	d916      	bls.n	8004b0e <UART_SetConfig+0x4a6>
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ae6:	d212      	bcs.n	8004b0e <UART_SetConfig+0x4a6>
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f023 030f 	bic.w	r3, r3, #15
 8004af0:	82fb      	strh	r3, [r7, #22]
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	085b      	lsrs	r3, r3, #1
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	8afb      	ldrh	r3, [r7, #22]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	82fb      	strh	r3, [r7, #22]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	8afa      	ldrh	r2, [r7, #22]
 8004b0a:	60da      	str	r2, [r3, #12]
 8004b0c:	e052      	b.n	8004bb4 <UART_SetConfig+0x54c>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b14:	e04e      	b.n	8004bb4 <UART_SetConfig+0x54c>
 8004b16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d827      	bhi.n	8004b6e <UART_SetConfig+0x506>
 8004b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <UART_SetConfig+0x4bc>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b51 	.word	0x08004b51
 8004b2c:	08004b59 	.word	0x08004b59
 8004b30:	08004b6f 	.word	0x08004b6f
 8004b34:	08004b5f 	.word	0x08004b5f
 8004b38:	08004b6f 	.word	0x08004b6f
 8004b3c:	08004b6f 	.word	0x08004b6f
 8004b40:	08004b6f 	.word	0x08004b6f
 8004b44:	08004b67 	.word	0x08004b67
 8004b48:	f7fe ff44 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8004b4c:	61f8      	str	r0, [r7, #28]
 8004b4e:	e014      	b.n	8004b7a <UART_SetConfig+0x512>
 8004b50:	f7fe ff56 	bl	8003a00 <HAL_RCC_GetPCLK2Freq>
 8004b54:	61f8      	str	r0, [r7, #28]
 8004b56:	e010      	b.n	8004b7a <UART_SetConfig+0x512>
 8004b58:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd4 <UART_SetConfig+0x56c>)
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	e00d      	b.n	8004b7a <UART_SetConfig+0x512>
 8004b5e:	f7fe fea1 	bl	80038a4 <HAL_RCC_GetSysClockFreq>
 8004b62:	61f8      	str	r0, [r7, #28]
 8004b64:	e009      	b.n	8004b7a <UART_SetConfig+0x512>
 8004b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	e005      	b.n	8004b7a <UART_SetConfig+0x512>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
 8004b72:	2301      	movs	r3, #1
 8004b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b78:	bf00      	nop
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d019      	beq.n	8004bb4 <UART_SetConfig+0x54c>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	085a      	lsrs	r2, r3, #1
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	441a      	add	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b0f      	cmp	r3, #15
 8004b98:	d909      	bls.n	8004bae <UART_SetConfig+0x546>
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba0:	d205      	bcs.n	8004bae <UART_SetConfig+0x546>
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60da      	str	r2, [r3, #12]
 8004bac:	e002      	b.n	8004bb4 <UART_SetConfig+0x54c>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	669a      	str	r2, [r3, #104]	@ 0x68
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004bc0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3728      	adds	r7, #40	@ 0x28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bce:	bf00      	nop
 8004bd0:	40008000 	.word	0x40008000
 8004bd4:	00f42400 	.word	0x00f42400

08004bd8 <UART_AdvFeatureConfig>:
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <UART_AdvFeatureConfig+0x2a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <UART_AdvFeatureConfig+0x4c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	605a      	str	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <UART_AdvFeatureConfig+0x6e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00a      	beq.n	8004c68 <UART_AdvFeatureConfig+0x90>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <UART_AdvFeatureConfig+0xb2>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	609a      	str	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	f003 0320 	and.w	r3, r3, #32
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0xd4>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d01a      	beq.n	8004cee <UART_AdvFeatureConfig+0x116>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cd6:	d10a      	bne.n	8004cee <UART_AdvFeatureConfig+0x116>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <UART_AdvFeatureConfig+0x138>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	605a      	str	r2, [r3, #4]
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_CheckIdleState>:
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b098      	sub	sp, #96	@ 0x60
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004d2c:	f7fd f96c 	bl	8002008 <HAL_GetTick>
 8004d30:	6578      	str	r0, [r7, #84]	@ 0x54
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d12e      	bne.n	8004d9e <UART_CheckIdleState+0x82>
 8004d40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f88c 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d021      	beq.n	8004d9e <UART_CheckIdleState+0x82>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e6      	bne.n	8004d5a <UART_CheckIdleState+0x3e>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e062      	b.n	8004e64 <UART_CheckIdleState+0x148>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d149      	bne.n	8004e40 <UART_CheckIdleState+0x124>
 8004dac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db4:	2200      	movs	r2, #0
 8004db6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f856 	bl	8004e6c <UART_WaitOnFlagUntilTimeout>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d03c      	beq.n	8004e40 <UART_CheckIdleState+0x124>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	623b      	str	r3, [r7, #32]
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004de4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_CheckIdleState+0xaa>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3308      	adds	r3, #8
 8004e16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e18:	61fa      	str	r2, [r7, #28]
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	69b9      	ldr	r1, [r7, #24]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	617b      	str	r3, [r7, #20]
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e5      	bne.n	8004df8 <UART_CheckIdleState+0xdc>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e011      	b.n	8004e64 <UART_CheckIdleState+0x148>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	665a      	str	r2, [r3, #100]	@ 0x64
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8004e62:	2300      	movs	r3, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	3758      	adds	r7, #88	@ 0x58
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_WaitOnFlagUntilTimeout>:
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
 8004e7c:	e04f      	b.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e84:	d04b      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e86:	f7fd f8bf 	bl	8002008 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d302      	bcc.n	8004e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <UART_WaitOnFlagUntilTimeout+0x34>
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e04e      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xd2>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d037      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	2b80      	cmp	r3, #128	@ 0x80
 8004eb2:	d034      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b40      	cmp	r3, #64	@ 0x40
 8004eb8:	d031      	beq.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d110      	bne.n	8004eea <UART_WaitOnFlagUntilTimeout+0x7e>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2208      	movs	r2, #8
 8004ece:	621a      	str	r2, [r3, #32]
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f838 	bl	8004f46 <UART_EndRxTransfer>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2208      	movs	r2, #8
 8004eda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e029      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xd2>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ef8:	d111      	bne.n	8004f1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f02:	621a      	str	r2, [r3, #32]
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f81e 	bl	8004f46 <UART_EndRxTransfer>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e00f      	b.n	8004f3e <UART_WaitOnFlagUntilTimeout+0xd2>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4013      	ands	r3, r2
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	bf0c      	ite	eq
 8004f2e:	2301      	moveq	r3, #1
 8004f30:	2300      	movne	r3, #0
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d0a0      	beq.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x12>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <UART_EndRxTransfer>:
 8004f46:	b480      	push	{r7}
 8004f48:	b095      	sub	sp, #84	@ 0x54
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e6      	bne.n	8004f4e <UART_EndRxTransfer+0x8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	3308      	adds	r3, #8
 8004f86:	623b      	str	r3, [r7, #32]
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f023 0301 	bic.w	r3, r3, #1
 8004f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3308      	adds	r3, #8
 8004f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e5      	bne.n	8004f80 <UART_EndRxTransfer+0x3a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d118      	bne.n	8004fee <UART_EndRxTransfer+0xa8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	e853 3f00 	ldrex	r3, [r3]
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f023 0310 	bic.w	r3, r3, #16
 8004fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fda:	61bb      	str	r3, [r7, #24]
 8004fdc:	617a      	str	r2, [r7, #20]
 8004fde:	6979      	ldr	r1, [r7, #20]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	e841 2300 	strex	r3, r2, [r1]
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e6      	bne.n	8004fbc <UART_EndRxTransfer+0x76>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	661a      	str	r2, [r3, #96]	@ 0x60
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	669a      	str	r2, [r3, #104]	@ 0x68
 8005002:	bf00      	nop
 8005004:	3754      	adds	r7, #84	@ 0x54
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <LL_EXTI_EnableIT_0_31>:
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	4b05      	ldr	r3, [pc, #20]	@ (8005030 <LL_EXTI_EnableIT_0_31+0x20>)
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	4904      	ldr	r1, [pc, #16]	@ (8005030 <LL_EXTI_EnableIT_0_31+0x20>)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4313      	orrs	r3, r2
 8005022:	600b      	str	r3, [r1, #0]
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	40010400 	.word	0x40010400

08005034 <LL_EXTI_EnableIT_32_63>:
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <LL_EXTI_EnableIT_32_63+0x20>)
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	4904      	ldr	r1, [pc, #16]	@ (8005054 <LL_EXTI_EnableIT_32_63+0x20>)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4313      	orrs	r3, r2
 8005046:	620b      	str	r3, [r1, #32]
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	40010400 	.word	0x40010400

08005058 <LL_EXTI_DisableIT_0_31>:
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	4b06      	ldr	r3, [pc, #24]	@ (800507c <LL_EXTI_DisableIT_0_31+0x24>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	43db      	mvns	r3, r3
 8005068:	4904      	ldr	r1, [pc, #16]	@ (800507c <LL_EXTI_DisableIT_0_31+0x24>)
 800506a:	4013      	ands	r3, r2
 800506c:	600b      	str	r3, [r1, #0]
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40010400 	.word	0x40010400

08005080 <LL_EXTI_DisableIT_32_63>:
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <LL_EXTI_DisableIT_32_63+0x24>)
 800508a:	6a1a      	ldr	r2, [r3, #32]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	43db      	mvns	r3, r3
 8005090:	4904      	ldr	r1, [pc, #16]	@ (80050a4 <LL_EXTI_DisableIT_32_63+0x24>)
 8005092:	4013      	ands	r3, r2
 8005094:	620b      	str	r3, [r1, #32]
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40010400 	.word	0x40010400

080050a8 <LL_EXTI_EnableEvent_0_31>:
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	4904      	ldr	r1, [pc, #16]	@ (80050c8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	604b      	str	r3, [r1, #4]
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40010400 	.word	0x40010400

080050cc <LL_EXTI_EnableEvent_32_63>:
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <LL_EXTI_EnableEvent_32_63+0x20>)
 80050d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050d8:	4904      	ldr	r1, [pc, #16]	@ (80050ec <LL_EXTI_EnableEvent_32_63+0x20>)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4313      	orrs	r3, r2
 80050de:	624b      	str	r3, [r1, #36]	@ 0x24
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40010400 	.word	0x40010400

080050f0 <LL_EXTI_DisableEvent_0_31>:
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <LL_EXTI_DisableEvent_0_31+0x24>)
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	43db      	mvns	r3, r3
 8005100:	4904      	ldr	r1, [pc, #16]	@ (8005114 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005102:	4013      	ands	r3, r2
 8005104:	604b      	str	r3, [r1, #4]
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	40010400 	.word	0x40010400

08005118 <LL_EXTI_DisableEvent_32_63>:
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	4b06      	ldr	r3, [pc, #24]	@ (800513c <LL_EXTI_DisableEvent_32_63+0x24>)
 8005122:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	43db      	mvns	r3, r3
 8005128:	4904      	ldr	r1, [pc, #16]	@ (800513c <LL_EXTI_DisableEvent_32_63+0x24>)
 800512a:	4013      	ands	r3, r2
 800512c:	624b      	str	r3, [r1, #36]	@ 0x24
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40010400 	.word	0x40010400

08005140 <LL_EXTI_EnableRisingTrig_0_31>:
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	4b05      	ldr	r3, [pc, #20]	@ (8005160 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	4904      	ldr	r1, [pc, #16]	@ (8005160 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4313      	orrs	r3, r2
 8005152:	608b      	str	r3, [r1, #8]
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40010400 	.word	0x40010400

08005164 <LL_EXTI_EnableRisingTrig_32_63>:
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	4b05      	ldr	r3, [pc, #20]	@ (8005184 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800516e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005170:	4904      	ldr	r1, [pc, #16]	@ (8005184 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4313      	orrs	r3, r2
 8005176:	628b      	str	r3, [r1, #40]	@ 0x28
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40010400 	.word	0x40010400

08005188 <LL_EXTI_DisableRisingTrig_0_31>:
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	4b06      	ldr	r3, [pc, #24]	@ (80051ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	43db      	mvns	r3, r3
 8005198:	4904      	ldr	r1, [pc, #16]	@ (80051ac <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800519a:	4013      	ands	r3, r2
 800519c:	608b      	str	r3, [r1, #8]
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010400 	.word	0x40010400

080051b0 <LL_EXTI_DisableRisingTrig_32_63>:
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	4b06      	ldr	r3, [pc, #24]	@ (80051d4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80051ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	43db      	mvns	r3, r3
 80051c0:	4904      	ldr	r1, [pc, #16]	@ (80051d4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	628b      	str	r3, [r1, #40]	@ 0x28
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	40010400 	.word	0x40010400

080051d8 <LL_EXTI_EnableFallingTrig_0_31>:
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	4b05      	ldr	r3, [pc, #20]	@ (80051f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80051e2:	68da      	ldr	r2, [r3, #12]
 80051e4:	4904      	ldr	r1, [pc, #16]	@ (80051f8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60cb      	str	r3, [r1, #12]
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	40010400 	.word	0x40010400

080051fc <LL_EXTI_EnableFallingTrig_32_63>:
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	4b05      	ldr	r3, [pc, #20]	@ (800521c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8005206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005208:	4904      	ldr	r1, [pc, #16]	@ (800521c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4313      	orrs	r3, r2
 800520e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40010400 	.word	0x40010400

08005220 <LL_EXTI_DisableFallingTrig_0_31>:
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	43db      	mvns	r3, r3
 8005230:	4904      	ldr	r1, [pc, #16]	@ (8005244 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005232:	4013      	ands	r3, r2
 8005234:	60cb      	str	r3, [r1, #12]
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010400 	.word	0x40010400

08005248 <LL_EXTI_DisableFallingTrig_32_63>:
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	4b06      	ldr	r3, [pc, #24]	@ (800526c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8005252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	43db      	mvns	r3, r3
 8005258:	4904      	ldr	r1, [pc, #16]	@ (800526c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800525a:	4013      	ands	r3, r2
 800525c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	40010400 	.word	0x40010400

08005270 <LL_EXTI_Init>:
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	2300      	movs	r3, #0
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7a1b      	ldrb	r3, [r3, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80d0 	beq.w	8005426 <LL_EXTI_Init+0x1b6>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d063      	beq.n	8005356 <LL_EXTI_Init+0xe6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	7a5b      	ldrb	r3, [r3, #9]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d01c      	beq.n	80052d0 <LL_EXTI_Init+0x60>
 8005296:	2b02      	cmp	r3, #2
 8005298:	dc25      	bgt.n	80052e6 <LL_EXTI_Init+0x76>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d002      	beq.n	80052a4 <LL_EXTI_Init+0x34>
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d00b      	beq.n	80052ba <LL_EXTI_Init+0x4a>
 80052a2:	e020      	b.n	80052e6 <LL_EXTI_Init+0x76>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff ff21 	bl	80050f0 <LL_EXTI_DisableEvent_0_31>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff feac 	bl	8005010 <LL_EXTI_EnableIT_0_31>
 80052b8:	e018      	b.n	80052ec <LL_EXTI_Init+0x7c>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff feca 	bl	8005058 <LL_EXTI_DisableIT_0_31>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff feed 	bl	80050a8 <LL_EXTI_EnableEvent_0_31>
 80052ce:	e00d      	b.n	80052ec <LL_EXTI_Init+0x7c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7ff fe9b 	bl	8005010 <LL_EXTI_EnableIT_0_31>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fee2 	bl	80050a8 <LL_EXTI_EnableEvent_0_31>
 80052e4:	e002      	b.n	80052ec <LL_EXTI_Init+0x7c>
 80052e6:	2301      	movs	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	bf00      	nop
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	7a9b      	ldrb	r3, [r3, #10]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d030      	beq.n	8005356 <LL_EXTI_Init+0xe6>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	7a9b      	ldrb	r3, [r3, #10]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d01c      	beq.n	8005336 <LL_EXTI_Init+0xc6>
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	dc25      	bgt.n	800534c <LL_EXTI_Init+0xdc>
 8005300:	2b01      	cmp	r3, #1
 8005302:	d002      	beq.n	800530a <LL_EXTI_Init+0x9a>
 8005304:	2b02      	cmp	r3, #2
 8005306:	d00b      	beq.n	8005320 <LL_EXTI_Init+0xb0>
 8005308:	e020      	b.n	800534c <LL_EXTI_Init+0xdc>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff ff86 	bl	8005220 <LL_EXTI_DisableFallingTrig_0_31>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ff11 	bl	8005140 <LL_EXTI_EnableRisingTrig_0_31>
 800531e:	e01a      	b.n	8005356 <LL_EXTI_Init+0xe6>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff ff2f 	bl	8005188 <LL_EXTI_DisableRisingTrig_0_31>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff ff52 	bl	80051d8 <LL_EXTI_EnableFallingTrig_0_31>
 8005334:	e00f      	b.n	8005356 <LL_EXTI_Init+0xe6>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff ff00 	bl	8005140 <LL_EXTI_EnableRisingTrig_0_31>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff ff47 	bl	80051d8 <LL_EXTI_EnableFallingTrig_0_31>
 800534a:	e004      	b.n	8005356 <LL_EXTI_Init+0xe6>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	bf00      	nop
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d077      	beq.n	800544e <LL_EXTI_Init+0x1de>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	7a5b      	ldrb	r3, [r3, #9]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d01c      	beq.n	80053a0 <LL_EXTI_Init+0x130>
 8005366:	2b02      	cmp	r3, #2
 8005368:	dc25      	bgt.n	80053b6 <LL_EXTI_Init+0x146>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <LL_EXTI_Init+0x104>
 800536e:	2b01      	cmp	r3, #1
 8005370:	d00b      	beq.n	800538a <LL_EXTI_Init+0x11a>
 8005372:	e020      	b.n	80053b6 <LL_EXTI_Init+0x146>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fecd 	bl	8005118 <LL_EXTI_DisableEvent_32_63>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff fe56 	bl	8005034 <LL_EXTI_EnableIT_32_63>
 8005388:	e01a      	b.n	80053c0 <LL_EXTI_Init+0x150>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fe76 	bl	8005080 <LL_EXTI_DisableIT_32_63>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff fe97 	bl	80050cc <LL_EXTI_EnableEvent_32_63>
 800539e:	e00f      	b.n	80053c0 <LL_EXTI_Init+0x150>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff fe45 	bl	8005034 <LL_EXTI_EnableIT_32_63>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fe8c 	bl	80050cc <LL_EXTI_EnableEvent_32_63>
 80053b4:	e004      	b.n	80053c0 <LL_EXTI_Init+0x150>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f043 0304 	orr.w	r3, r3, #4
 80053bc:	60fb      	str	r3, [r7, #12]
 80053be:	bf00      	nop
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7a9b      	ldrb	r3, [r3, #10]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d042      	beq.n	800544e <LL_EXTI_Init+0x1de>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	7a9b      	ldrb	r3, [r3, #10]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d01c      	beq.n	800540a <LL_EXTI_Init+0x19a>
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	dc25      	bgt.n	8005420 <LL_EXTI_Init+0x1b0>
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d002      	beq.n	80053de <LL_EXTI_Init+0x16e>
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d00b      	beq.n	80053f4 <LL_EXTI_Init+0x184>
 80053dc:	e020      	b.n	8005420 <LL_EXTI_Init+0x1b0>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7ff ff30 	bl	8005248 <LL_EXTI_DisableFallingTrig_32_63>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff feb9 	bl	8005164 <LL_EXTI_EnableRisingTrig_32_63>
 80053f2:	e02c      	b.n	800544e <LL_EXTI_Init+0x1de>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fed9 	bl	80051b0 <LL_EXTI_DisableRisingTrig_32_63>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fefa 	bl	80051fc <LL_EXTI_EnableFallingTrig_32_63>
 8005408:	e021      	b.n	800544e <LL_EXTI_Init+0x1de>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fea8 	bl	8005164 <LL_EXTI_EnableRisingTrig_32_63>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff feef 	bl	80051fc <LL_EXTI_EnableFallingTrig_32_63>
 800541e:	e016      	b.n	800544e <LL_EXTI_Init+0x1de>
 8005420:	2301      	movs	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	e013      	b.n	800544e <LL_EXTI_Init+0x1de>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff fe14 	bl	8005058 <LL_EXTI_DisableIT_0_31>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fe5b 	bl	80050f0 <LL_EXTI_DisableEvent_0_31>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fe1e 	bl	8005080 <LL_EXTI_DisableIT_32_63>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fe65 	bl	8005118 <LL_EXTI_DisableEvent_32_63>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <LL_GPIO_SetPinMode>:
 8005458:	b480      	push	{r7}
 800545a:	b08b      	sub	sp, #44	@ 0x2c
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	fa93 f3a3 	rbit	r3, r3
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <LL_GPIO_SetPinMode+0x2a>
 800547e:	2320      	movs	r3, #32
 8005480:	e003      	b.n	800548a <LL_GPIO_SetPinMode+0x32>
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	fab3 f383 	clz	r3, r3
 8005488:	b2db      	uxtb	r3, r3
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	2103      	movs	r1, #3
 800548e:	fa01 f303 	lsl.w	r3, r1, r3
 8005492:	43db      	mvns	r3, r3
 8005494:	401a      	ands	r2, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	623b      	str	r3, [r7, #32]
 800549a:	6a3b      	ldr	r3, [r7, #32]
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <LL_GPIO_SetPinMode+0x58>
 80054ac:	2320      	movs	r3, #32
 80054ae:	e003      	b.n	80054b8 <LL_GPIO_SetPinMode+0x60>
 80054b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b2:	fab3 f383 	clz	r3, r3
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	fa01 f303 	lsl.w	r3, r1, r3
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	bf00      	nop
 80054c8:	372c      	adds	r7, #44	@ 0x2c
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_GPIO_SetPinOutputType>:
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	401a      	ands	r2, r3
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	431a      	orrs	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	bf00      	nop
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <LL_GPIO_SetPinSpeed>:
 8005502:	b480      	push	{r7}
 8005504:	b08b      	sub	sp, #44	@ 0x2c
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	fa93 f3a3 	rbit	r3, r3
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <LL_GPIO_SetPinSpeed+0x2a>
 8005528:	2320      	movs	r3, #32
 800552a:	e003      	b.n	8005534 <LL_GPIO_SetPinSpeed+0x32>
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	b2db      	uxtb	r3, r3
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	2103      	movs	r1, #3
 8005538:	fa01 f303 	lsl.w	r3, r1, r3
 800553c:	43db      	mvns	r3, r3
 800553e:	401a      	ands	r2, r3
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	623b      	str	r3, [r7, #32]
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	fa93 f3a3 	rbit	r3, r3
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <LL_GPIO_SetPinSpeed+0x58>
 8005556:	2320      	movs	r3, #32
 8005558:	e003      	b.n	8005562 <LL_GPIO_SetPinSpeed+0x60>
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	fab3 f383 	clz	r3, r3
 8005560:	b2db      	uxtb	r3, r3
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	431a      	orrs	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	bf00      	nop
 8005572:	372c      	adds	r7, #44	@ 0x2c
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <LL_GPIO_SetPinPull>:
 800557c:	b480      	push	{r7}
 800557e:	b08b      	sub	sp, #44	@ 0x2c
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	fa93 f3a3 	rbit	r3, r3
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	61bb      	str	r3, [r7, #24]
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <LL_GPIO_SetPinPull+0x2a>
 80055a2:	2320      	movs	r3, #32
 80055a4:	e003      	b.n	80055ae <LL_GPIO_SetPinPull+0x32>
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	fab3 f383 	clz	r3, r3
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	005b      	lsls	r3, r3, #1
 80055b0:	2103      	movs	r1, #3
 80055b2:	fa01 f303 	lsl.w	r3, r1, r3
 80055b6:	43db      	mvns	r3, r3
 80055b8:	401a      	ands	r2, r3
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	623b      	str	r3, [r7, #32]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	fa93 f3a3 	rbit	r3, r3
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <LL_GPIO_SetPinPull+0x58>
 80055d0:	2320      	movs	r3, #32
 80055d2:	e003      	b.n	80055dc <LL_GPIO_SetPinPull+0x60>
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	fab3 f383 	clz	r3, r3
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	fa01 f303 	lsl.w	r3, r1, r3
 80055e4:	431a      	orrs	r2, r3
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	bf00      	nop
 80055ec:	372c      	adds	r7, #44	@ 0x2c
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <LL_GPIO_SetAFPin_0_7>:
 80055f6:	b480      	push	{r7}
 80055f8:	b08b      	sub	sp, #44	@ 0x2c
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6a1a      	ldr	r2, [r3, #32]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <LL_GPIO_SetAFPin_0_7+0x2a>
 800561c:	2320      	movs	r3, #32
 800561e:	e003      	b.n	8005628 <LL_GPIO_SetAFPin_0_7+0x32>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	fab3 f383 	clz	r3, r3
 8005626:	b2db      	uxtb	r3, r3
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	210f      	movs	r1, #15
 800562c:	fa01 f303 	lsl.w	r3, r1, r3
 8005630:	43db      	mvns	r3, r3
 8005632:	401a      	ands	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	623b      	str	r3, [r7, #32]
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	fa93 f3a3 	rbit	r3, r3
 800563e:	61fb      	str	r3, [r7, #28]
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	2b00      	cmp	r3, #0
 8005648:	d101      	bne.n	800564e <LL_GPIO_SetAFPin_0_7+0x58>
 800564a:	2320      	movs	r3, #32
 800564c:	e003      	b.n	8005656 <LL_GPIO_SetAFPin_0_7+0x60>
 800564e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005650:	fab3 f383 	clz	r3, r3
 8005654:	b2db      	uxtb	r3, r3
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	431a      	orrs	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	621a      	str	r2, [r3, #32]
 8005664:	bf00      	nop
 8005666:	372c      	adds	r7, #44	@ 0x2c
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <LL_GPIO_SetAFPin_8_15>:
 8005670:	b480      	push	{r7}
 8005672:	b08b      	sub	sp, #44	@ 0x2c
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	0a1b      	lsrs	r3, r3, #8
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	fa93 f3a3 	rbit	r3, r3
 800568c:	613b      	str	r3, [r7, #16]
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	61bb      	str	r3, [r7, #24]
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <LL_GPIO_SetAFPin_8_15+0x2c>
 8005698:	2320      	movs	r3, #32
 800569a:	e003      	b.n	80056a4 <LL_GPIO_SetAFPin_8_15+0x34>
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	fab3 f383 	clz	r3, r3
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	210f      	movs	r1, #15
 80056a8:	fa01 f303 	lsl.w	r3, r1, r3
 80056ac:	43db      	mvns	r3, r3
 80056ae:	401a      	ands	r2, r3
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	623b      	str	r3, [r7, #32]
 80056b6:	6a3b      	ldr	r3, [r7, #32]
 80056b8:	fa93 f3a3 	rbit	r3, r3
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d101      	bne.n	80056cc <LL_GPIO_SetAFPin_8_15+0x5c>
 80056c8:	2320      	movs	r3, #32
 80056ca:	e003      	b.n	80056d4 <LL_GPIO_SetAFPin_8_15+0x64>
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	fab3 f383 	clz	r3, r3
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	fa01 f303 	lsl.w	r3, r1, r3
 80056dc:	431a      	orrs	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80056e2:	bf00      	nop
 80056e4:	372c      	adds	r7, #44	@ 0x2c
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <LL_GPIO_Init>:
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b088      	sub	sp, #32
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	613b      	str	r3, [r7, #16]
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	fa93 f3a3 	rbit	r3, r3
 8005704:	60fb      	str	r3, [r7, #12]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <LL_GPIO_Init+0x26>
 8005710:	2320      	movs	r3, #32
 8005712:	e003      	b.n	800571c <LL_GPIO_Init+0x2e>
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	fab3 f383 	clz	r3, r3
 800571a:	b2db      	uxtb	r3, r3
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	e048      	b.n	80057b2 <LL_GPIO_Init+0xc4>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	2101      	movs	r1, #1
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	fa01 f303 	lsl.w	r3, r1, r3
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d03a      	beq.n	80057ac <LL_GPIO_Init+0xbe>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d003      	beq.n	8005746 <LL_GPIO_Init+0x58>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d10e      	bne.n	8005764 <LL_GPIO_Init+0x76>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	461a      	mov	r2, r3
 800574c:	69b9      	ldr	r1, [r7, #24]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff fed7 	bl	8005502 <LL_GPIO_SetPinSpeed>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	6819      	ldr	r1, [r3, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	461a      	mov	r2, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7ff feb7 	bl	80054d2 <LL_GPIO_SetPinOutputType>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	461a      	mov	r2, r3
 800576a:	69b9      	ldr	r1, [r7, #24]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff ff05 	bl	800557c <LL_GPIO_SetPinPull>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d111      	bne.n	800579e <LL_GPIO_Init+0xb0>
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2bff      	cmp	r3, #255	@ 0xff
 800577e:	d807      	bhi.n	8005790 <LL_GPIO_Init+0xa2>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	461a      	mov	r2, r3
 8005786:	69b9      	ldr	r1, [r7, #24]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff ff34 	bl	80055f6 <LL_GPIO_SetAFPin_0_7>
 800578e:	e006      	b.n	800579e <LL_GPIO_Init+0xb0>
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	461a      	mov	r2, r3
 8005796:	69b9      	ldr	r1, [r7, #24]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff ff69 	bl	8005670 <LL_GPIO_SetAFPin_8_15>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	461a      	mov	r2, r3
 80057a4:	69b9      	ldr	r1, [r7, #24]
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7ff fe56 	bl	8005458 <LL_GPIO_SetPinMode>
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	3301      	adds	r3, #1
 80057b0:	61fb      	str	r3, [r7, #28]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1af      	bne.n	8005720 <LL_GPIO_Init+0x32>
 80057c0:	2300      	movs	r3, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <USB_CoreInit>:
 80057ca:	b084      	sub	sp, #16
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	f107 001c 	add.w	r0, r7, #28
 80057d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 fa69 	bl	8005cc0 <USB_CoreReset>
 80057ee:	4603      	mov	r3, r0
 80057f0:	73fb      	strb	r3, [r7, #15]
 80057f2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d106      	bne.n	8005808 <USB_CoreInit+0x3e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	639a      	str	r2, [r3, #56]	@ 0x38
 8005806:	e005      	b.n	8005814 <USB_CoreInit+0x4a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	639a      	str	r2, [r3, #56]	@ 0x38
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005820:	b004      	add	sp, #16
 8005822:	4770      	bx	lr

08005824 <USB_DisableGlobalInt>:
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f023 0201 	bic.w	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	609a      	str	r2, [r3, #8]
 8005838:	2300      	movs	r3, #0
 800583a:	4618      	mov	r0, r3
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_SetCurrentMode>:
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	460b      	mov	r3, r1
 8005850:	70fb      	strb	r3, [r7, #3]
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60da      	str	r2, [r3, #12]
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d115      	bne.n	8005894 <USB_SetCurrentMode+0x4e>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]
 8005874:	200a      	movs	r0, #10
 8005876:	f7fc fbd3 	bl	8002020 <HAL_Delay>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	330a      	adds	r3, #10
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fa0f 	bl	8005ca4 <USB_GetMode>
 8005886:	4603      	mov	r3, r0
 8005888:	2b01      	cmp	r3, #1
 800588a:	d01e      	beq.n	80058ca <USB_SetCurrentMode+0x84>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005890:	d9f0      	bls.n	8005874 <USB_SetCurrentMode+0x2e>
 8005892:	e01a      	b.n	80058ca <USB_SetCurrentMode+0x84>
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d115      	bne.n	80058c6 <USB_SetCurrentMode+0x80>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60da      	str	r2, [r3, #12]
 80058a6:	200a      	movs	r0, #10
 80058a8:	f7fc fbba 	bl	8002020 <HAL_Delay>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	330a      	adds	r3, #10
 80058b0:	60fb      	str	r3, [r7, #12]
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f9f6 	bl	8005ca4 <USB_GetMode>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <USB_SetCurrentMode+0x84>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2bc7      	cmp	r3, #199	@ 0xc7
 80058c2:	d9f0      	bls.n	80058a6 <USB_SetCurrentMode+0x60>
 80058c4:	e001      	b.n	80058ca <USB_SetCurrentMode+0x84>
 80058c6:	2301      	movs	r3, #1
 80058c8:	e005      	b.n	80058d6 <USB_SetCurrentMode+0x90>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2bc8      	cmp	r3, #200	@ 0xc8
 80058ce:	d101      	bne.n	80058d4 <USB_SetCurrentMode+0x8e>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <USB_SetCurrentMode+0x90>
 80058d4:	2300      	movs	r3, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <USB_DevInit>:
 80058e0:	b084      	sub	sp, #16
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b086      	sub	sp, #24
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80058ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80058f2:	2300      	movs	r3, #0
 80058f4:	75fb      	strb	r3, [r7, #23]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	2300      	movs	r3, #0
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	e009      	b.n	8005914 <USB_DevInit+0x34>
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	3340      	adds	r3, #64	@ 0x40
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	2200      	movs	r2, #0
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	3301      	adds	r3, #1
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b0e      	cmp	r3, #14
 8005918:	d9f2      	bls.n	8005900 <USB_DevInit+0x20>
 800591a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800591e:	2b00      	cmp	r3, #0
 8005920:	d11c      	bne.n	800595c <USB_DevInit+0x7c>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005930:	f043 0302 	orr.w	r3, r3, #2
 8005934:	6053      	str	r3, [r2, #4]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	639a      	str	r2, [r3, #56]	@ 0x38
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	e005      	b.n	8005968 <USB_DevInit+0x88>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005960:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	@ 0x38
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800596e:	461a      	mov	r2, r3
 8005970:	2300      	movs	r3, #0
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	2103      	movs	r1, #3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f95a 	bl	8005c30 <USB_SetDevSpeed>
 800597c:	2110      	movs	r1, #16
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8f6 	bl	8005b70 <USB_FlushTxFifo>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <USB_DevInit+0xae>
 800598a:	2301      	movs	r3, #1
 800598c:	75fb      	strb	r3, [r7, #23]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 f920 	bl	8005bd4 <USB_FlushRxFifo>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <USB_DevInit+0xbe>
 800599a:	2301      	movs	r3, #1
 800599c:	75fb      	strb	r3, [r7, #23]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a4:	461a      	mov	r2, r3
 80059a6:	2300      	movs	r3, #0
 80059a8:	6113      	str	r3, [r2, #16]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059b0:	461a      	mov	r2, r3
 80059b2:	2300      	movs	r3, #0
 80059b4:	6153      	str	r3, [r2, #20]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059bc:	461a      	mov	r2, r3
 80059be:	2300      	movs	r3, #0
 80059c0:	61d3      	str	r3, [r2, #28]
 80059c2:	2300      	movs	r3, #0
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	e043      	b.n	8005a50 <USB_DevInit+0x170>
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80059da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059de:	d118      	bne.n	8005a12 <USB_DevInit+0x132>
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <USB_DevInit+0x11c>
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f2:	461a      	mov	r2, r3
 80059f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e013      	b.n	8005a24 <USB_DevInit+0x144>
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	e008      	b.n	8005a24 <USB_DevInit+0x144>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a30:	461a      	mov	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	6113      	str	r3, [r2, #16]
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a42:	461a      	mov	r2, r3
 8005a44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a48:	6093      	str	r3, [r2, #8]
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005a54:	461a      	mov	r2, r3
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d3b5      	bcc.n	80059c8 <USB_DevInit+0xe8>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	e043      	b.n	8005aea <USB_DevInit+0x20a>
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a78:	d118      	bne.n	8005aac <USB_DevInit+0x1cc>
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <USB_DevInit+0x1b6>
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	e013      	b.n	8005abe <USB_DevInit+0x1de>
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e008      	b.n	8005abe <USB_DevInit+0x1de>
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab8:	461a      	mov	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aca:	461a      	mov	r2, r3
 8005acc:	2300      	movs	r3, #0
 8005ace:	6113      	str	r3, [r2, #16]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005adc:	461a      	mov	r2, r3
 8005ade:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ae2:	6093      	str	r3, [r2, #8]
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	613b      	str	r3, [r7, #16]
 8005aea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005aee:	461a      	mov	r2, r3
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d3b5      	bcc.n	8005a62 <USB_DevInit+0x182>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b08:	6113      	str	r3, [r2, #16]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	619a      	str	r2, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005b16:	615a      	str	r2, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	f043 0210 	orr.w	r2, r3, #16
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	619a      	str	r2, [r3, #24]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699a      	ldr	r2, [r3, #24]
 8005b28:	4b10      	ldr	r3, [pc, #64]	@ (8005b6c <USB_DevInit+0x28c>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6193      	str	r3, [r2, #24]
 8005b30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d005      	beq.n	8005b44 <USB_DevInit+0x264>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f043 0208 	orr.w	r2, r3, #8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	619a      	str	r2, [r3, #24]
 8005b44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d107      	bne.n	8005b5c <USB_DevInit+0x27c>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	699b      	ldr	r3, [r3, #24]
 8005b50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b54:	f043 0304 	orr.w	r3, r3, #4
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6193      	str	r3, [r2, #24]
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b68:	b004      	add	sp, #16
 8005b6a:	4770      	bx	lr
 8005b6c:	803c3800 	.word	0x803c3800

08005b70 <USB_FlushTxFifo>:
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3301      	adds	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b8a:	d901      	bls.n	8005b90 <USB_FlushTxFifo+0x20>
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e01b      	b.n	8005bc8 <USB_FlushTxFifo+0x58>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	daf2      	bge.n	8005b7e <USB_FlushTxFifo+0xe>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	019b      	lsls	r3, r3, #6
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	611a      	str	r2, [r3, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	3301      	adds	r3, #1
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bb4:	d901      	bls.n	8005bba <USB_FlushTxFifo+0x4a>
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e006      	b.n	8005bc8 <USB_FlushTxFifo+0x58>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	f003 0320 	and.w	r3, r3, #32
 8005bc2:	2b20      	cmp	r3, #32
 8005bc4:	d0f0      	beq.n	8005ba8 <USB_FlushTxFifo+0x38>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <USB_FlushRxFifo>:
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bec:	d901      	bls.n	8005bf2 <USB_FlushRxFifo+0x1e>
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e018      	b.n	8005c24 <USB_FlushRxFifo+0x50>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	daf2      	bge.n	8005be0 <USB_FlushRxFifo+0xc>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2210      	movs	r2, #16
 8005c02:	611a      	str	r2, [r3, #16]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	3301      	adds	r3, #1
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c10:	d901      	bls.n	8005c16 <USB_FlushRxFifo+0x42>
 8005c12:	2303      	movs	r3, #3
 8005c14:	e006      	b.n	8005c24 <USB_FlushRxFifo+0x50>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d0f0      	beq.n	8005c04 <USB_FlushRxFifo+0x30>
 8005c22:	2300      	movs	r3, #0
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <USB_SetDevSpeed>:
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	70fb      	strb	r3, [r7, #3]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	68f9      	ldr	r1, [r7, #12]
 8005c4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c50:	4313      	orrs	r3, r2
 8005c52:	600b      	str	r3, [r1, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <USB_DevDisconnect>:
 8005c62:	b480      	push	{r7}
 8005c64:	b085      	sub	sp, #20
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c7c:	f023 0303 	bic.w	r3, r3, #3
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c90:	f043 0302 	orr.w	r3, r3, #2
 8005c94:	6053      	str	r3, [r2, #4]
 8005c96:	2300      	movs	r3, #0
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_GetMode>:
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <USB_CoreReset>:
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cd8:	d901      	bls.n	8005cde <USB_CoreReset+0x1e>
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e01b      	b.n	8005d16 <USB_CoreReset+0x56>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	daf2      	bge.n	8005ccc <USB_CoreReset+0xc>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f043 0201 	orr.w	r2, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	611a      	str	r2, [r3, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d02:	d901      	bls.n	8005d08 <USB_CoreReset+0x48>
 8005d04:	2303      	movs	r3, #3
 8005d06:	e006      	b.n	8005d16 <USB_CoreReset+0x56>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d0f0      	beq.n	8005cf6 <USB_CoreReset+0x36>
 8005d14:	2300      	movs	r3, #0
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
	...

08005d24 <LL_mDelay>:
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	4b10      	ldr	r3, [pc, #64]	@ (8005d70 <LL_mDelay+0x4c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60bb      	str	r3, [r7, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3e:	d00c      	beq.n	8005d5a <LL_mDelay+0x36>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3301      	adds	r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e008      	b.n	8005d5a <LL_mDelay+0x36>
 8005d48:	4b09      	ldr	r3, [pc, #36]	@ (8005d70 <LL_mDelay+0x4c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <LL_mDelay+0x36>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f3      	bne.n	8005d48 <LL_mDelay+0x24>
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	e000e010 	.word	0xe000e010

08005d74 <memset>:
 8005d74:	4402      	add	r2, r0
 8005d76:	4603      	mov	r3, r0
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d100      	bne.n	8005d7e <memset+0xa>
 8005d7c:	4770      	bx	lr
 8005d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d82:	e7f9      	b.n	8005d78 <memset+0x4>

08005d84 <__libc_init_array>:
 8005d84:	b570      	push	{r4, r5, r6, lr}
 8005d86:	4d0d      	ldr	r5, [pc, #52]	@ (8005dbc <__libc_init_array+0x38>)
 8005d88:	4c0d      	ldr	r4, [pc, #52]	@ (8005dc0 <__libc_init_array+0x3c>)
 8005d8a:	1b64      	subs	r4, r4, r5
 8005d8c:	10a4      	asrs	r4, r4, #2
 8005d8e:	2600      	movs	r6, #0
 8005d90:	42a6      	cmp	r6, r4
 8005d92:	d109      	bne.n	8005da8 <__libc_init_array+0x24>
 8005d94:	4d0b      	ldr	r5, [pc, #44]	@ (8005dc4 <__libc_init_array+0x40>)
 8005d96:	4c0c      	ldr	r4, [pc, #48]	@ (8005dc8 <__libc_init_array+0x44>)
 8005d98:	f000 f818 	bl	8005dcc <_init>
 8005d9c:	1b64      	subs	r4, r4, r5
 8005d9e:	10a4      	asrs	r4, r4, #2
 8005da0:	2600      	movs	r6, #0
 8005da2:	42a6      	cmp	r6, r4
 8005da4:	d105      	bne.n	8005db2 <__libc_init_array+0x2e>
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dac:	4798      	blx	r3
 8005dae:	3601      	adds	r6, #1
 8005db0:	e7ee      	b.n	8005d90 <__libc_init_array+0xc>
 8005db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db6:	4798      	blx	r3
 8005db8:	3601      	adds	r6, #1
 8005dba:	e7f2      	b.n	8005da2 <__libc_init_array+0x1e>
 8005dbc:	08005e34 	.word	0x08005e34
 8005dc0:	08005e34 	.word	0x08005e34
 8005dc4:	08005e34 	.word	0x08005e34
 8005dc8:	08005e38 	.word	0x08005e38

08005dcc <_init>:
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	bf00      	nop
 8005dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dd2:	bc08      	pop	{r3}
 8005dd4:	469e      	mov	lr, r3
 8005dd6:	4770      	bx	lr

08005dd8 <_fini>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	bf00      	nop
 8005ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dde:	bc08      	pop	{r3}
 8005de0:	469e      	mov	lr, r3
 8005de2:	4770      	bx	lr
